{"ast":null,"code":"import _extends from \"@babel/runtime/helpers/extends\";\nimport _defineProperty from \"@babel/runtime/helpers/defineProperty\";\n\nfunction ownKeys(object, enumerableOnly) {\n  var keys = Object.keys(object);\n\n  if (Object.getOwnPropertySymbols) {\n    var symbols = Object.getOwnPropertySymbols(object);\n    enumerableOnly && (symbols = symbols.filter(function (sym) {\n      return Object.getOwnPropertyDescriptor(object, sym).enumerable;\n    })), keys.push.apply(keys, symbols);\n  }\n\n  return keys;\n}\n\nfunction _objectSpread(target) {\n  for (var i = 1; i < arguments.length; i++) {\n    var source = null != arguments[i] ? arguments[i] : {};\n    i % 2 ? ownKeys(Object(source), !0).forEach(function (key) {\n      _defineProperty(target, key, source[key]);\n    }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) {\n      Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));\n    });\n  }\n\n  return target;\n}\n\nimport { isComplex, isUnit, typeOf } from '../../utils/is.js';\nimport { factory } from '../../utils/factory.js';\nimport { memoize } from '../../utils/function.js';\nimport { endsWith } from '../../utils/string.js';\nimport { clone, hasOwnProperty } from '../../utils/object.js';\nimport { createBigNumberPi as createPi } from '../../utils/bignumber/constants.js';\nvar name = 'Unit';\nvar dependencies = ['?on', 'config', 'addScalar', 'subtract', 'multiplyScalar', 'divideScalar', 'pow', 'abs', 'fix', 'round', 'equal', 'isNumeric', 'format', 'number', 'Complex', 'BigNumber', 'Fraction'];\nexport var createUnitClass = /* #__PURE__ */factory(name, dependencies, _ref => {\n  var {\n    on,\n    config,\n    addScalar,\n    subtract,\n    multiplyScalar,\n    divideScalar,\n    pow,\n    abs,\n    fix,\n    round,\n    equal,\n    isNumeric,\n    format,\n    number,\n    Complex,\n    BigNumber: _BigNumber,\n    Fraction: _Fraction\n  } = _ref;\n  var toNumber = number;\n  /**\n   * A unit can be constructed in the following ways:\n   *\n   *     const a = new Unit(value, name)\n   *     const b = new Unit(null, name)\n   *     const c = Unit.parse(str)\n   *\n   * Example usage:\n   *\n   *     const a = new Unit(5, 'cm')               // 50 mm\n   *     const b = Unit.parse('23 kg')             // 23 kg\n   *     const c = math.in(a, new Unit(null, 'm')  // 0.05 m\n   *     const d = new Unit(9.81, \"m/s^2\")         // 9.81 m/s^2\n   *\n   * @class Unit\n   * @constructor Unit\n   * @param {number | BigNumber | Fraction | Complex | boolean} [value]  A value like 5.2\n   * @param {string} [name]   A unit name like \"cm\" or \"inch\", or a derived unit of the form: \"u1[^ex1] [u2[^ex2] ...] [/ u3[^ex3] [u4[^ex4]]]\", such as \"kg m^2/s^2\", where each unit appearing after the forward slash is taken to be in the denominator. \"kg m^2 s^-2\" is a synonym and is also acceptable. Any of the units can include a prefix.\n   */\n\n  function Unit(value, name) {\n    if (!(this instanceof Unit)) {\n      throw new Error('Constructor must be called with the new operator');\n    }\n\n    if (!(value === null || value === undefined || isNumeric(value) || isComplex(value))) {\n      throw new TypeError('First parameter in Unit constructor must be number, BigNumber, Fraction, Complex, or undefined');\n    }\n\n    if (name !== undefined && (typeof name !== 'string' || name === '')) {\n      throw new TypeError('Second parameter in Unit constructor must be a string');\n    }\n\n    if (name !== undefined) {\n      var u = Unit.parse(name);\n      this.units = u.units;\n      this.dimensions = u.dimensions;\n    } else {\n      this.units = [];\n      this.dimensions = [];\n\n      for (var i = 0; i < BASE_DIMENSIONS.length; i++) {\n        this.dimensions[i] = 0;\n      }\n    }\n\n    this.value = value !== undefined && value !== null ? this._normalize(value) : null;\n    this.fixPrefix = false; // if true, function format will not search for the\n    // best prefix but leave it as initially provided.\n    // fixPrefix is set true by the method Unit.to\n    // The justification behind this is that if the constructor is explicitly called,\n    // the caller wishes the units to be returned exactly as he supplied.\n\n    this.skipAutomaticSimplification = true;\n  }\n  /**\n   * Attach type information\n   */\n\n\n  Object.defineProperty(Unit, 'name', {\n    value: 'Unit'\n  });\n  Unit.prototype.constructor = Unit;\n  Unit.prototype.type = 'Unit';\n  Unit.prototype.isUnit = true; // private variables and functions for the Unit parser\n\n  var text, index, c;\n\n  function skipWhitespace() {\n    while (c === ' ' || c === '\\t') {\n      next();\n    }\n  }\n\n  function isDigitDot(c) {\n    return c >= '0' && c <= '9' || c === '.';\n  }\n\n  function isDigit(c) {\n    return c >= '0' && c <= '9';\n  }\n\n  function next() {\n    index++;\n    c = text.charAt(index);\n  }\n\n  function revert(oldIndex) {\n    index = oldIndex;\n    c = text.charAt(index);\n  }\n\n  function parseNumber() {\n    var number = '';\n    var oldIndex = index;\n\n    if (c === '+') {\n      next();\n    } else if (c === '-') {\n      number += c;\n      next();\n    }\n\n    if (!isDigitDot(c)) {\n      // a + or - must be followed by a digit\n      revert(oldIndex);\n      return null;\n    } // get number, can have a single dot\n\n\n    if (c === '.') {\n      number += c;\n      next();\n\n      if (!isDigit(c)) {\n        // this is no legal number, it is just a dot\n        revert(oldIndex);\n        return null;\n      }\n    } else {\n      while (isDigit(c)) {\n        number += c;\n        next();\n      }\n\n      if (c === '.') {\n        number += c;\n        next();\n      }\n    }\n\n    while (isDigit(c)) {\n      number += c;\n      next();\n    } // check for exponential notation like \"2.3e-4\" or \"1.23e50\"\n\n\n    if (c === 'E' || c === 'e') {\n      // The grammar branches here. This could either be part of an exponent or the start of a unit that begins with the letter e, such as \"4exabytes\"\n      var tentativeNumber = '';\n      var tentativeIndex = index;\n      tentativeNumber += c;\n      next();\n\n      if (c === '+' || c === '-') {\n        tentativeNumber += c;\n        next();\n      } // Scientific notation MUST be followed by an exponent (otherwise we assume it is not scientific notation)\n\n\n      if (!isDigit(c)) {\n        // The e or E must belong to something else, so return the number without the e or E.\n        revert(tentativeIndex);\n        return number;\n      } // We can now safely say that this is scientific notation.\n\n\n      number = number + tentativeNumber;\n\n      while (isDigit(c)) {\n        number += c;\n        next();\n      }\n    }\n\n    return number;\n  }\n\n  function parseUnit() {\n    var unitName = ''; // Alphanumeric characters only; matches [a-zA-Z0-9]\n\n    while (isDigit(c) || Unit.isValidAlpha(c)) {\n      unitName += c;\n      next();\n    } // Must begin with [a-zA-Z]\n\n\n    var firstC = unitName.charAt(0);\n\n    if (Unit.isValidAlpha(firstC)) {\n      return unitName;\n    } else {\n      return null;\n    }\n  }\n\n  function parseCharacter(toFind) {\n    if (c === toFind) {\n      next();\n      return toFind;\n    } else {\n      return null;\n    }\n  }\n  /**\n   * Parse a string into a unit. The value of the unit is parsed as number,\n   * BigNumber, or Fraction depending on the math.js config setting `number`.\n   *\n   * Throws an exception if the provided string does not contain a valid unit or\n   * cannot be parsed.\n   * @memberof Unit\n   * @param {string} str        A string like \"5.2 inch\", \"4e2 cm/s^2\"\n   * @return {Unit} unit\n   */\n\n\n  Unit.parse = function (str, options) {\n    options = options || {};\n    text = str;\n    index = -1;\n    c = '';\n\n    if (typeof text !== 'string') {\n      throw new TypeError('Invalid argument in Unit.parse, string expected');\n    }\n\n    var unit = new Unit();\n    unit.units = [];\n    var powerMultiplierCurrent = 1;\n    var expectingUnit = false; // A unit should follow this pattern:\n    // [number] ...[ [*/] unit[^number] ]\n    // unit[^number] ... [ [*/] unit[^number] ]\n    // Rules:\n    // number is any floating point number.\n    // unit is any alphanumeric string beginning with an alpha. Units with names like e3 should be avoided because they look like the exponent of a floating point number!\n    // The string may optionally begin with a number.\n    // Each unit may optionally be followed by ^number.\n    // Whitespace or a forward slash is recommended between consecutive units, although the following technically is parseable:\n    //   2m^2kg/s^2\n    // it is not good form. If a unit starts with e, then it could be confused as a floating point number:\n    //   4erg\n\n    next();\n    skipWhitespace(); // Optional number at the start of the string\n\n    var valueStr = parseNumber();\n    var value = null;\n\n    if (valueStr) {\n      if (config.number === 'BigNumber') {\n        value = new _BigNumber(valueStr);\n      } else if (config.number === 'Fraction') {\n        try {\n          // not all numbers can be turned in Fractions, for example very small numbers not\n          value = new _Fraction(valueStr);\n        } catch (err) {\n          value = parseFloat(valueStr);\n        }\n      } else {\n        // number\n        value = parseFloat(valueStr);\n      }\n\n      skipWhitespace(); // Whitespace is not required here\n      // handle multiplication or division right after the value, like '1/s'\n\n      if (parseCharacter('*')) {\n        powerMultiplierCurrent = 1;\n        expectingUnit = true;\n      } else if (parseCharacter('/')) {\n        powerMultiplierCurrent = -1;\n        expectingUnit = true;\n      }\n    } // Stack to keep track of powerMultipliers applied to each parentheses group\n\n\n    var powerMultiplierStack = []; // Running product of all elements in powerMultiplierStack\n\n    var powerMultiplierStackProduct = 1;\n\n    while (true) {\n      skipWhitespace(); // Check for and consume opening parentheses, pushing powerMultiplierCurrent to the stack\n      // A '(' will always appear directly before a unit.\n\n      while (c === '(') {\n        powerMultiplierStack.push(powerMultiplierCurrent);\n        powerMultiplierStackProduct *= powerMultiplierCurrent;\n        powerMultiplierCurrent = 1;\n        next();\n        skipWhitespace();\n      } // Is there something here?\n\n\n      var uStr = void 0;\n\n      if (c) {\n        var oldC = c;\n        uStr = parseUnit();\n\n        if (uStr === null) {\n          throw new SyntaxError('Unexpected \"' + oldC + '\" in \"' + text + '\" at index ' + index.toString());\n        }\n      } else {\n        // End of input.\n        break;\n      } // Verify the unit exists and get the prefix (if any)\n\n\n      var res = _findUnit(uStr);\n\n      if (res === null) {\n        // Unit not found.\n        throw new SyntaxError('Unit \"' + uStr + '\" not found.');\n      }\n\n      var power = powerMultiplierCurrent * powerMultiplierStackProduct; // Is there a \"^ number\"?\n\n      skipWhitespace();\n\n      if (parseCharacter('^')) {\n        skipWhitespace();\n        var p = parseNumber();\n\n        if (p === null) {\n          // No valid number found for the power!\n          throw new SyntaxError('In \"' + str + '\", \"^\" must be followed by a floating-point number');\n        }\n\n        power *= p;\n      } // Add the unit to the list\n\n\n      unit.units.push({\n        unit: res.unit,\n        prefix: res.prefix,\n        power\n      });\n\n      for (var i = 0; i < BASE_DIMENSIONS.length; i++) {\n        unit.dimensions[i] += (res.unit.dimensions[i] || 0) * power;\n      } // Check for and consume closing parentheses, popping from the stack.\n      // A ')' will always follow a unit.\n\n\n      skipWhitespace();\n\n      while (c === ')') {\n        if (powerMultiplierStack.length === 0) {\n          throw new SyntaxError('Unmatched \")\" in \"' + text + '\" at index ' + index.toString());\n        }\n\n        powerMultiplierStackProduct /= powerMultiplierStack.pop();\n        next();\n        skipWhitespace();\n      } // \"*\" and \"/\" should mean we are expecting something to come next.\n      // Is there a forward slash? If so, negate powerMultiplierCurrent. The next unit or paren group is in the denominator.\n\n\n      expectingUnit = false;\n\n      if (parseCharacter('*')) {\n        // explicit multiplication\n        powerMultiplierCurrent = 1;\n        expectingUnit = true;\n      } else if (parseCharacter('/')) {\n        // division\n        powerMultiplierCurrent = -1;\n        expectingUnit = true;\n      } else {\n        // implicit multiplication\n        powerMultiplierCurrent = 1;\n      } // Replace the unit into the auto unit system\n\n\n      if (res.unit.base) {\n        var baseDim = res.unit.base.key;\n        UNIT_SYSTEMS.auto[baseDim] = {\n          unit: res.unit,\n          prefix: res.prefix\n        };\n      }\n    } // Has the string been entirely consumed?\n\n\n    skipWhitespace();\n\n    if (c) {\n      throw new SyntaxError('Could not parse: \"' + str + '\"');\n    } // Is there a trailing slash?\n\n\n    if (expectingUnit) {\n      throw new SyntaxError('Trailing characters: \"' + str + '\"');\n    } // Is the parentheses stack empty?\n\n\n    if (powerMultiplierStack.length !== 0) {\n      throw new SyntaxError('Unmatched \"(\" in \"' + text + '\"');\n    } // Are there any units at all?\n\n\n    if (unit.units.length === 0 && !options.allowNoUnits) {\n      throw new SyntaxError('\"' + str + '\" contains no units');\n    }\n\n    unit.value = value !== undefined ? unit._normalize(value) : null;\n    return unit;\n  };\n  /**\n   * create a copy of this unit\n   * @memberof Unit\n   * @return {Unit} Returns a cloned version of the unit\n   */\n\n\n  Unit.prototype.clone = function () {\n    var unit = new Unit();\n    unit.fixPrefix = this.fixPrefix;\n    unit.skipAutomaticSimplification = this.skipAutomaticSimplification;\n    unit.value = clone(this.value);\n    unit.dimensions = this.dimensions.slice(0);\n    unit.units = [];\n\n    for (var i = 0; i < this.units.length; i++) {\n      unit.units[i] = {};\n\n      for (var p in this.units[i]) {\n        if (hasOwnProperty(this.units[i], p)) {\n          unit.units[i][p] = this.units[i][p];\n        }\n      }\n    }\n\n    return unit;\n  };\n  /**\n   * Return the type of the value of this unit\n   *\n   * @memberof Unit\n   * @ return {string} type of the value of the unit\n   */\n\n\n  Unit.prototype.valueType = function () {\n    return typeOf(this.value);\n  };\n  /**\n   * Return whether the unit is derived (such as m/s, or cm^2, but not N)\n   * @memberof Unit\n   * @return {boolean} True if the unit is derived\n   */\n\n\n  Unit.prototype._isDerived = function () {\n    if (this.units.length === 0) {\n      return false;\n    }\n\n    return this.units.length > 1 || Math.abs(this.units[0].power - 1.0) > 1e-15;\n  };\n  /**\n   * Normalize a value, based on its currently set unit(s)\n   * @memberof Unit\n   * @param {number | BigNumber | Fraction | boolean} value\n   * @return {number | BigNumber | Fraction | boolean} normalized value\n   * @private\n   */\n\n\n  Unit.prototype._normalize = function (value) {\n    if (value === null || value === undefined || this.units.length === 0) {\n      return value;\n    }\n\n    var res = value;\n\n    var convert = Unit._getNumberConverter(typeOf(value)); // convert to Fraction or BigNumber if needed\n\n\n    for (var i = 0; i < this.units.length; i++) {\n      var unitValue = convert(this.units[i].unit.value);\n      var unitPrefixValue = convert(this.units[i].prefix.value);\n      var unitPower = convert(this.units[i].power);\n      res = multiplyScalar(res, pow(multiplyScalar(unitValue, unitPrefixValue), unitPower));\n    }\n\n    return res;\n  };\n  /**\n   * Denormalize a value, based on its currently set unit(s)\n   * @memberof Unit\n   * @param {number} value\n   * @param {number} [prefixValue]    Optional prefix value to be used (ignored if this is a derived unit)\n   * @return {number} denormalized value\n   * @private\n   */\n\n\n  Unit.prototype._denormalize = function (value, prefixValue) {\n    if (value === null || value === undefined || this.units.length === 0) {\n      return value;\n    }\n\n    var res = value;\n\n    var convert = Unit._getNumberConverter(typeOf(value)); // convert to Fraction or BigNumber if needed\n\n\n    for (var i = 0; i < this.units.length; i++) {\n      var unitValue = convert(this.units[i].unit.value);\n      var unitPrefixValue = convert(this.units[i].prefix.value);\n      var unitPower = convert(this.units[i].power);\n      res = divideScalar(res, pow(multiplyScalar(unitValue, unitPrefixValue), unitPower));\n    }\n\n    return res;\n  };\n  /**\n   * Find a unit from a string\n   * @memberof Unit\n   * @param {string} str              A string like 'cm' or 'inch'\n   * @returns {Object | null} result  When found, an object with fields unit and\n   *                                  prefix is returned. Else, null is returned.\n   * @private\n   */\n\n\n  var _findUnit = memoize(str => {\n    // First, match units names exactly. For example, a user could define 'mm' as 10^-4 m, which is silly, but then we would want 'mm' to match the user-defined unit.\n    if (hasOwnProperty(UNITS, str)) {\n      var unit = UNITS[str];\n      var prefix = unit.prefixes[''];\n      return {\n        unit,\n        prefix\n      };\n    }\n\n    for (var _name in UNITS) {\n      if (hasOwnProperty(UNITS, _name)) {\n        if (endsWith(str, _name)) {\n          var _unit = UNITS[_name];\n          var prefixLen = str.length - _name.length;\n          var prefixName = str.substring(0, prefixLen);\n\n          var _prefix = hasOwnProperty(_unit.prefixes, prefixName) ? _unit.prefixes[prefixName] : undefined;\n\n          if (_prefix !== undefined) {\n            // store unit, prefix, and value\n            return {\n              unit: _unit,\n              prefix: _prefix\n            };\n          }\n        }\n      }\n    }\n\n    return null;\n  }, {\n    hasher: args => args[0],\n    limit: 100\n  });\n  /**\n   * Test if the given expression is a unit.\n   * The unit can have a prefix but cannot have a value.\n   * @memberof Unit\n   * @param {string} name   A string to be tested whether it is a value less unit.\n   *                        The unit can have prefix, like \"cm\"\n   * @return {boolean}      true if the given string is a unit\n   */\n\n\n  Unit.isValuelessUnit = function (name) {\n    return _findUnit(name) !== null;\n  };\n  /**\n   * check if this unit has given base unit\n   * If this unit is a derived unit, this will ALWAYS return false, since by definition base units are not derived.\n   * @memberof Unit\n   * @param {BASE_UNITS | string | undefined} base\n   */\n\n\n  Unit.prototype.hasBase = function (base) {\n    if (typeof base === 'string') {\n      base = BASE_UNITS[base];\n    }\n\n    if (!base) {\n      return false;\n    } // All dimensions must be the same\n\n\n    for (var i = 0; i < BASE_DIMENSIONS.length; i++) {\n      if (Math.abs((this.dimensions[i] || 0) - (base.dimensions[i] || 0)) > 1e-12) {\n        return false;\n      }\n    }\n\n    return true;\n  };\n  /**\n   * Check if this unit has a base or bases equal to another base or bases\n   * For derived units, the exponent on each base also must match\n   * @memberof Unit\n   * @param {Unit} other\n   * @return {boolean} true if equal base\n   */\n\n\n  Unit.prototype.equalBase = function (other) {\n    // All dimensions must be the same\n    for (var i = 0; i < BASE_DIMENSIONS.length; i++) {\n      if (Math.abs((this.dimensions[i] || 0) - (other.dimensions[i] || 0)) > 1e-12) {\n        return false;\n      }\n    }\n\n    return true;\n  };\n  /**\n   * Check if this unit equals another unit\n   * @memberof Unit\n   * @param {Unit} other\n   * @return {boolean} true if both units are equal\n   */\n\n\n  Unit.prototype.equals = function (other) {\n    return this.equalBase(other) && equal(this.value, other.value);\n  };\n  /**\n   * Multiply this unit with another one or with a scalar\n   * @memberof Unit\n   * @param {Unit} other\n   * @return {Unit} product of this unit and the other unit\n   */\n\n\n  Unit.prototype.multiply = function (_other) {\n    var res = this.clone();\n    var other = isUnit(_other) ? _other : new Unit(_other);\n\n    for (var i = 0; i < BASE_DIMENSIONS.length; i++) {\n      // Dimensions arrays may be of different lengths. Default to 0.\n      res.dimensions[i] = (this.dimensions[i] || 0) + (other.dimensions[i] || 0);\n    } // Append other's units list onto res\n\n\n    for (var _i = 0; _i < other.units.length; _i++) {\n      // Make a shallow copy of every unit\n      var inverted = _objectSpread({}, other.units[_i]);\n\n      res.units.push(inverted);\n    } // If at least one operand has a value, then the result should also have a value\n\n\n    if (this.value !== null || other.value !== null) {\n      var valThis = this.value === null ? this._normalize(1) : this.value;\n      var valOther = other.value === null ? other._normalize(1) : other.value;\n      res.value = multiplyScalar(valThis, valOther);\n    } else {\n      res.value = null;\n    }\n\n    if (isUnit(_other)) {\n      res.skipAutomaticSimplification = false;\n    }\n\n    return getNumericIfUnitless(res);\n  };\n  /**\n   * Divide a number by this unit\n   *\n   * @memberof Unit\n   * @param {numeric} numerator\n   * @param {unit} result of dividing numerator by this unit\n   */\n\n\n  Unit.prototype.divideInto = function (numerator) {\n    return new Unit(numerator).divide(this);\n  };\n  /**\n   * Divide this unit by another one\n   * @memberof Unit\n   * @param {Unit | numeric} other\n   * @return {Unit} result of dividing this unit by the other unit\n   */\n\n\n  Unit.prototype.divide = function (_other) {\n    var res = this.clone();\n    var other = isUnit(_other) ? _other : new Unit(_other);\n\n    for (var i = 0; i < BASE_DIMENSIONS.length; i++) {\n      // Dimensions arrays may be of different lengths. Default to 0.\n      res.dimensions[i] = (this.dimensions[i] || 0) - (other.dimensions[i] || 0);\n    } // Invert and append other's units list onto res\n\n\n    for (var _i2 = 0; _i2 < other.units.length; _i2++) {\n      // Make a shallow copy of every unit\n      var inverted = _objectSpread(_objectSpread({}, other.units[_i2]), {}, {\n        power: -other.units[_i2].power\n      });\n\n      res.units.push(inverted);\n    } // If at least one operand has a value, the result should have a value\n\n\n    if (this.value !== null || other.value !== null) {\n      var valThis = this.value === null ? this._normalize(1) : this.value;\n      var valOther = other.value === null ? other._normalize(1) : other.value;\n      res.value = divideScalar(valThis, valOther);\n    } else {\n      res.value = null;\n    }\n\n    if (isUnit(_other)) {\n      res.skipAutomaticSimplification = false;\n    }\n\n    return getNumericIfUnitless(res);\n  };\n  /**\n   * Calculate the power of a unit\n   * @memberof Unit\n   * @param {number | Fraction | BigNumber} p\n   * @returns {Unit}      The result: this^p\n   */\n\n\n  Unit.prototype.pow = function (p) {\n    var res = this.clone();\n\n    for (var i = 0; i < BASE_DIMENSIONS.length; i++) {\n      // Dimensions arrays may be of different lengths. Default to 0.\n      res.dimensions[i] = (this.dimensions[i] || 0) * p;\n    } // Adjust the power of each unit in the list\n\n\n    for (var _i3 = 0; _i3 < res.units.length; _i3++) {\n      res.units[_i3].power *= p;\n    }\n\n    if (res.value !== null) {\n      res.value = pow(res.value, p); // only allow numeric output, we don't want to return a Complex number\n      // if (!isNumeric(res.value)) {\n      //  res.value = NaN\n      // }\n      // Update: Complex supported now\n    } else {\n      res.value = null;\n    }\n\n    res.skipAutomaticSimplification = false;\n    return getNumericIfUnitless(res);\n  };\n  /**\n   * Return the numeric value of this unit if it is dimensionless, has a value, and config.predictable == false; or the original unit otherwise\n   * @param {Unit} unit\n   * @returns {number | Fraction | BigNumber | Unit}  The numeric value of the unit if conditions are met, or the original unit otherwise\n   */\n\n\n  function getNumericIfUnitless(unit) {\n    if (unit.equalBase(BASE_UNITS.NONE) && unit.value !== null && !config.predictable) {\n      return unit.value;\n    } else {\n      return unit;\n    }\n  }\n  /**\n   * Calculate the absolute value of a unit\n   * @memberof Unit\n   * @param {number | Fraction | BigNumber} x\n   * @returns {Unit}      The result: |x|, absolute value of x\n   */\n\n\n  Unit.prototype.abs = function () {\n    var ret = this.clone();\n\n    if (ret.value !== null) {\n      if (ret._isDerived() || ret.units[0].unit.offset === 0) {\n        ret.value = abs(ret.value);\n      } else {\n        // To give the correct, but unexpected, results for units with an offset.\n        // For example, abs(-283.15 degC) = -263.15 degC !!!\n        // We must take the offset into consideration here\n        var convert = ret._numberConverter(); // convert to Fraction or BigNumber if needed\n\n\n        var unitValue = convert(ret.units[0].unit.value);\n        var nominalOffset = convert(ret.units[0].unit.offset);\n        var unitOffset = multiplyScalar(unitValue, nominalOffset);\n        ret.value = subtract(abs(addScalar(ret.value, unitOffset)), unitOffset);\n      }\n    }\n\n    for (var i in ret.units) {\n      if (ret.units[i].unit.name === 'VA' || ret.units[i].unit.name === 'VAR') {\n        ret.units[i].unit = UNITS.W;\n      }\n    }\n\n    return ret;\n  };\n  /**\n   * Convert the unit to a specific unit name.\n   * @memberof Unit\n   * @param {string | Unit} valuelessUnit   A unit without value. Can have prefix, like \"cm\"\n   * @returns {Unit} Returns a clone of the unit with a fixed prefix and unit.\n   */\n\n\n  Unit.prototype.to = function (valuelessUnit) {\n    var value = this.value === null ? this._normalize(1) : this.value;\n    var other;\n\n    if (typeof valuelessUnit === 'string') {\n      other = Unit.parse(valuelessUnit);\n    } else if (isUnit(valuelessUnit)) {\n      other = valuelessUnit.clone();\n    } else {\n      throw new Error('String or Unit expected as parameter');\n    }\n\n    if (!this.equalBase(other)) {\n      throw new Error(\"Units do not match ('\".concat(other.toString(), \"' != '\").concat(this.toString(), \"')\"));\n    }\n\n    if (other.value !== null) {\n      throw new Error('Cannot convert to a unit with a value');\n    }\n\n    if (this.value === null || this._isDerived() || this.units[0].unit.offset === other.units[0].unit.offset) {\n      other.value = clone(value);\n    } else {\n      /* Need to adjust value by difference in offset to convert */\n      var convert = Unit._getNumberConverter(typeOf(value)); // convert to Fraction or BigNumber if needed\n\n\n      var thisUnitValue = convert(this.units[0].unit.value);\n      var thisNominalOffset = convert(this.units[0].unit.offset);\n      var thisUnitOffset = multiplyScalar(thisUnitValue, thisNominalOffset);\n      var otherUnitValue = convert(other.units[0].unit.value);\n      var otherNominalOffset = convert(other.units[0].unit.offset);\n      var otherUnitOffset = multiplyScalar(otherUnitValue, otherNominalOffset);\n      other.value = subtract(addScalar(value, thisUnitOffset), otherUnitOffset);\n    }\n\n    other.fixPrefix = true;\n    other.skipAutomaticSimplification = true;\n    return other;\n  };\n  /**\n   * Return the value of the unit when represented with given valueless unit\n   * @memberof Unit\n   * @param {string | Unit} valuelessUnit    For example 'cm' or 'inch'\n   * @return {number} Returns the unit value as number.\n   */\n  // TODO: deprecate Unit.toNumber? It's always better to use toNumeric\n\n\n  Unit.prototype.toNumber = function (valuelessUnit) {\n    return toNumber(this.toNumeric(valuelessUnit));\n  };\n  /**\n   * Return the value of the unit in the original numeric type\n   * @memberof Unit\n   * @param {string | Unit} valuelessUnit    For example 'cm' or 'inch'\n   * @return {number | BigNumber | Fraction} Returns the unit value\n   */\n\n\n  Unit.prototype.toNumeric = function (valuelessUnit) {\n    var other;\n\n    if (valuelessUnit) {\n      // Allow getting the numeric value without converting to a different unit\n      other = this.to(valuelessUnit);\n    } else {\n      other = this.clone();\n    }\n\n    if (other._isDerived() || other.units.length === 0) {\n      return other._denormalize(other.value);\n    } else {\n      return other._denormalize(other.value, other.units[0].prefix.value);\n    }\n  };\n  /**\n   * Get a string representation of the unit.\n   * @memberof Unit\n   * @return {string}\n   */\n\n\n  Unit.prototype.toString = function () {\n    return this.format();\n  };\n  /**\n   * Get a JSON representation of the unit\n   * @memberof Unit\n   * @returns {Object} Returns a JSON object structured as:\n   *                   `{\"mathjs\": \"Unit\", \"value\": 2, \"unit\": \"cm\", \"fixPrefix\": false}`\n   */\n\n\n  Unit.prototype.toJSON = function () {\n    return {\n      mathjs: 'Unit',\n      value: this._denormalize(this.value),\n      unit: this.formatUnits(),\n      fixPrefix: this.fixPrefix\n    };\n  };\n  /**\n   * Instantiate a Unit from a JSON object\n   * @memberof Unit\n   * @param {Object} json  A JSON object structured as:\n   *                       `{\"mathjs\": \"Unit\", \"value\": 2, \"unit\": \"cm\", \"fixPrefix\": false}`\n   * @return {Unit}\n   */\n\n\n  Unit.fromJSON = function (json) {\n    var unit = new Unit(json.value, json.unit);\n    unit.fixPrefix = json.fixPrefix || false;\n    return unit;\n  };\n  /**\n   * Returns the string representation of the unit.\n   * @memberof Unit\n   * @return {string}\n   */\n\n\n  Unit.prototype.valueOf = Unit.prototype.toString;\n  /**\n   * Simplify this Unit's unit list and return a new Unit with the simplified list.\n   * The returned Unit will contain a list of the \"best\" units for formatting.\n   */\n\n  Unit.prototype.simplify = function () {\n    var ret = this.clone();\n    var proposedUnitList = []; // Search for a matching base\n\n    var matchingBase;\n\n    for (var key in currentUnitSystem) {\n      if (hasOwnProperty(currentUnitSystem, key)) {\n        if (ret.hasBase(BASE_UNITS[key])) {\n          matchingBase = key;\n          break;\n        }\n      }\n    }\n\n    if (matchingBase === 'NONE') {\n      ret.units = [];\n    } else {\n      var matchingUnit;\n\n      if (matchingBase) {\n        // Does the unit system have a matching unit?\n        if (hasOwnProperty(currentUnitSystem, matchingBase)) {\n          matchingUnit = currentUnitSystem[matchingBase];\n        }\n      }\n\n      if (matchingUnit) {\n        ret.units = [{\n          unit: matchingUnit.unit,\n          prefix: matchingUnit.prefix,\n          power: 1.0\n        }];\n      } else {\n        // Multiple units or units with powers are formatted like this:\n        // 5 (kg m^2) / (s^3 mol)\n        // Build an representation from the base units of the current unit system\n        var missingBaseDim = false;\n\n        for (var i = 0; i < BASE_DIMENSIONS.length; i++) {\n          var baseDim = BASE_DIMENSIONS[i];\n\n          if (Math.abs(ret.dimensions[i] || 0) > 1e-12) {\n            if (hasOwnProperty(currentUnitSystem, baseDim)) {\n              proposedUnitList.push({\n                unit: currentUnitSystem[baseDim].unit,\n                prefix: currentUnitSystem[baseDim].prefix,\n                power: ret.dimensions[i] || 0\n              });\n            } else {\n              missingBaseDim = true;\n            }\n          }\n        } // Is the proposed unit list \"simpler\" than the existing one?\n\n\n        if (proposedUnitList.length < ret.units.length && !missingBaseDim) {\n          // Replace this unit list with the proposed list\n          ret.units = proposedUnitList;\n        }\n      }\n    }\n\n    return ret;\n  };\n  /**\n   * Returns a new Unit in the SI system with the same value as this one\n   */\n\n\n  Unit.prototype.toSI = function () {\n    var ret = this.clone();\n    var proposedUnitList = []; // Multiple units or units with powers are formatted like this:\n    // 5 (kg m^2) / (s^3 mol)\n    // Build an representation from the base units of the SI unit system\n\n    for (var i = 0; i < BASE_DIMENSIONS.length; i++) {\n      var baseDim = BASE_DIMENSIONS[i];\n\n      if (Math.abs(ret.dimensions[i] || 0) > 1e-12) {\n        if (hasOwnProperty(UNIT_SYSTEMS.si, baseDim)) {\n          proposedUnitList.push({\n            unit: UNIT_SYSTEMS.si[baseDim].unit,\n            prefix: UNIT_SYSTEMS.si[baseDim].prefix,\n            power: ret.dimensions[i] || 0\n          });\n        } else {\n          throw new Error('Cannot express custom unit ' + baseDim + ' in SI units');\n        }\n      }\n    } // Replace this unit list with the proposed list\n\n\n    ret.units = proposedUnitList;\n    ret.fixPrefix = true;\n    ret.skipAutomaticSimplification = true;\n    return ret;\n  };\n  /**\n   * Get a string representation of the units of this Unit, without the value. The unit list is formatted as-is without first being simplified.\n   * @memberof Unit\n   * @return {string}\n   */\n\n\n  Unit.prototype.formatUnits = function () {\n    var strNum = '';\n    var strDen = '';\n    var nNum = 0;\n    var nDen = 0;\n\n    for (var i = 0; i < this.units.length; i++) {\n      if (this.units[i].power > 0) {\n        nNum++;\n        strNum += ' ' + this.units[i].prefix.name + this.units[i].unit.name;\n\n        if (Math.abs(this.units[i].power - 1.0) > 1e-15) {\n          strNum += '^' + this.units[i].power;\n        }\n      } else if (this.units[i].power < 0) {\n        nDen++;\n      }\n    }\n\n    if (nDen > 0) {\n      for (var _i4 = 0; _i4 < this.units.length; _i4++) {\n        if (this.units[_i4].power < 0) {\n          if (nNum > 0) {\n            strDen += ' ' + this.units[_i4].prefix.name + this.units[_i4].unit.name;\n\n            if (Math.abs(this.units[_i4].power + 1.0) > 1e-15) {\n              strDen += '^' + -this.units[_i4].power;\n            }\n          } else {\n            strDen += ' ' + this.units[_i4].prefix.name + this.units[_i4].unit.name;\n            strDen += '^' + this.units[_i4].power;\n          }\n        }\n      }\n    } // Remove leading \" \"\n\n\n    strNum = strNum.substr(1);\n    strDen = strDen.substr(1); // Add parans for better copy/paste back into evaluate, for example, or for better pretty print formatting\n\n    if (nNum > 1 && nDen > 0) {\n      strNum = '(' + strNum + ')';\n    }\n\n    if (nDen > 1 && nNum > 0) {\n      strDen = '(' + strDen + ')';\n    }\n\n    var str = strNum;\n\n    if (nNum > 0 && nDen > 0) {\n      str += ' / ';\n    }\n\n    str += strDen;\n    return str;\n  };\n  /**\n   * Get a string representation of the Unit, with optional formatting options.\n   * @memberof Unit\n   * @param {Object | number | Function} [options]  Formatting options. See\n   *                                                lib/utils/number:format for a\n   *                                                description of the available\n   *                                                options.\n   * @return {string}\n   */\n\n\n  Unit.prototype.format = function (options) {\n    // Simplfy the unit list, unless it is valueless or was created directly in the\n    // constructor or as the result of to or toSI\n    var simp = this.skipAutomaticSimplification || this.value === null ? this.clone() : this.simplify(); // Apply some custom logic for handling VA and VAR. The goal is to express the value of the unit as a real value, if possible. Otherwise, use a real-valued unit instead of a complex-valued one.\n\n    var isImaginary = false;\n\n    if (typeof simp.value !== 'undefined' && simp.value !== null && isComplex(simp.value)) {\n      // TODO: Make this better, for example, use relative magnitude of re and im rather than absolute\n      isImaginary = Math.abs(simp.value.re) < 1e-14;\n    }\n\n    for (var i in simp.units) {\n      if (hasOwnProperty(simp.units, i)) {\n        if (simp.units[i].unit) {\n          if (simp.units[i].unit.name === 'VA' && isImaginary) {\n            simp.units[i].unit = UNITS.VAR;\n          } else if (simp.units[i].unit.name === 'VAR' && !isImaginary) {\n            simp.units[i].unit = UNITS.VA;\n          }\n        }\n      }\n    } // Now apply the best prefix\n    // Units must have only one unit and not have the fixPrefix flag set\n\n\n    if (simp.units.length === 1 && !simp.fixPrefix) {\n      // Units must have integer powers, otherwise the prefix will change the\n      // outputted value by not-an-integer-power-of-ten\n      if (Math.abs(simp.units[0].power - Math.round(simp.units[0].power)) < 1e-14) {\n        // Apply the best prefix\n        simp.units[0].prefix = simp._bestPrefix();\n      }\n    }\n\n    var value = simp._denormalize(simp.value);\n\n    var str = simp.value !== null ? format(value, options || {}) : '';\n    var unitStr = simp.formatUnits();\n\n    if (simp.value && isComplex(simp.value)) {\n      str = '(' + str + ')'; // Surround complex values with ( ) to enable better parsing\n    }\n\n    if (unitStr.length > 0 && str.length > 0) {\n      str += ' ';\n    }\n\n    str += unitStr;\n    return str;\n  };\n  /**\n   * Calculate the best prefix using current value.\n   * @memberof Unit\n   * @returns {Object} prefix\n   * @private\n   */\n\n\n  Unit.prototype._bestPrefix = function () {\n    if (this.units.length !== 1) {\n      throw new Error('Can only compute the best prefix for single units with integer powers, like kg, s^2, N^-1, and so forth!');\n    }\n\n    if (Math.abs(this.units[0].power - Math.round(this.units[0].power)) >= 1e-14) {\n      throw new Error('Can only compute the best prefix for single units with integer powers, like kg, s^2, N^-1, and so forth!');\n    } // find the best prefix value (resulting in the value of which\n    // the absolute value of the log10 is closest to zero,\n    // though with a little offset of 1.2 for nicer values: you get a\n    // sequence 1mm 100mm 500mm 0.6m 1m 10m 100m 500m 0.6km 1km ...\n    // Note: the units value can be any numeric type, but to find the best\n    // prefix it's enough to work with limited precision of a regular number\n    // Update: using mathjs abs since we also allow complex numbers\n\n\n    var absValue = this.value !== null ? abs(this.value) : 0;\n    var absUnitValue = abs(this.units[0].unit.value);\n    var bestPrefix = this.units[0].prefix;\n\n    if (absValue === 0) {\n      return bestPrefix;\n    }\n\n    var power = this.units[0].power;\n    var bestDiff = Math.log(absValue / Math.pow(bestPrefix.value * absUnitValue, power)) / Math.LN10 - 1.2;\n    if (bestDiff > -2.200001 && bestDiff < 1.800001) return bestPrefix; // Allow the original prefix\n\n    bestDiff = Math.abs(bestDiff);\n    var prefixes = this.units[0].unit.prefixes;\n\n    for (var p in prefixes) {\n      if (hasOwnProperty(prefixes, p)) {\n        var prefix = prefixes[p];\n\n        if (prefix.scientific) {\n          var diff = Math.abs(Math.log(absValue / Math.pow(prefix.value * absUnitValue, power)) / Math.LN10 - 1.2);\n\n          if (diff < bestDiff || diff === bestDiff && prefix.name.length < bestPrefix.name.length) {\n            // choose the prefix with the smallest diff, or if equal, choose the one\n            // with the shortest name (can happen with SHORTLONG for example)\n            bestPrefix = prefix;\n            bestDiff = diff;\n          }\n        }\n      }\n    }\n\n    return bestPrefix;\n  };\n  /**\n   * Returns an array of units whose sum is equal to this unit\n   * @memberof Unit\n   * @param {Array} [parts] An array of strings or valueless units.\n   *\n   *   Example:\n   *\n   *   const u = new Unit(1, 'm')\n   *   u.splitUnit(['feet', 'inch'])\n   *     [ 3 feet, 3.3700787401575 inch ]\n   *\n   * @return {Array} An array of units.\n   */\n\n\n  Unit.prototype.splitUnit = function (parts) {\n    var x = this.clone();\n    var ret = [];\n\n    for (var i = 0; i < parts.length; i++) {\n      // Convert x to the requested unit\n      x = x.to(parts[i]);\n      if (i === parts.length - 1) break; // Get the numeric value of this unit\n\n      var xNumeric = x.toNumeric(); // Check to see if xNumeric is nearly equal to an integer,\n      // since fix can incorrectly round down if there is round-off error\n\n      var xRounded = round(xNumeric);\n      var xFixed = void 0;\n      var isNearlyEqual = equal(xRounded, xNumeric);\n\n      if (isNearlyEqual) {\n        xFixed = xRounded;\n      } else {\n        xFixed = fix(x.toNumeric());\n      }\n\n      var y = new Unit(xFixed, parts[i].toString());\n      ret.push(y);\n      x = subtract(x, y);\n    } // This little bit fixes a bug where the remainder should be 0 but is a little bit off.\n    // But instead of comparing x, the remainder, with zero--we will compare the sum of\n    // all the parts so far with the original value. If they are nearly equal,\n    // we set the remainder to 0.\n\n\n    var testSum = 0;\n\n    for (var _i5 = 0; _i5 < ret.length; _i5++) {\n      testSum = addScalar(testSum, ret[_i5].value);\n    }\n\n    if (equal(testSum, this.value)) {\n      x.value = 0;\n    }\n\n    ret.push(x);\n    return ret;\n  };\n\n  var PREFIXES = {\n    NONE: {\n      '': {\n        name: '',\n        value: 1,\n        scientific: true\n      }\n    },\n    SHORT: {\n      '': {\n        name: '',\n        value: 1,\n        scientific: true\n      },\n      da: {\n        name: 'da',\n        value: 1e1,\n        scientific: false\n      },\n      h: {\n        name: 'h',\n        value: 1e2,\n        scientific: false\n      },\n      k: {\n        name: 'k',\n        value: 1e3,\n        scientific: true\n      },\n      M: {\n        name: 'M',\n        value: 1e6,\n        scientific: true\n      },\n      G: {\n        name: 'G',\n        value: 1e9,\n        scientific: true\n      },\n      T: {\n        name: 'T',\n        value: 1e12,\n        scientific: true\n      },\n      P: {\n        name: 'P',\n        value: 1e15,\n        scientific: true\n      },\n      E: {\n        name: 'E',\n        value: 1e18,\n        scientific: true\n      },\n      Z: {\n        name: 'Z',\n        value: 1e21,\n        scientific: true\n      },\n      Y: {\n        name: 'Y',\n        value: 1e24,\n        scientific: true\n      },\n      d: {\n        name: 'd',\n        value: 1e-1,\n        scientific: false\n      },\n      c: {\n        name: 'c',\n        value: 1e-2,\n        scientific: false\n      },\n      m: {\n        name: 'm',\n        value: 1e-3,\n        scientific: true\n      },\n      u: {\n        name: 'u',\n        value: 1e-6,\n        scientific: true\n      },\n      n: {\n        name: 'n',\n        value: 1e-9,\n        scientific: true\n      },\n      p: {\n        name: 'p',\n        value: 1e-12,\n        scientific: true\n      },\n      f: {\n        name: 'f',\n        value: 1e-15,\n        scientific: true\n      },\n      a: {\n        name: 'a',\n        value: 1e-18,\n        scientific: true\n      },\n      z: {\n        name: 'z',\n        value: 1e-21,\n        scientific: true\n      },\n      y: {\n        name: 'y',\n        value: 1e-24,\n        scientific: true\n      }\n    },\n    LONG: {\n      '': {\n        name: '',\n        value: 1,\n        scientific: true\n      },\n      deca: {\n        name: 'deca',\n        value: 1e1,\n        scientific: false\n      },\n      hecto: {\n        name: 'hecto',\n        value: 1e2,\n        scientific: false\n      },\n      kilo: {\n        name: 'kilo',\n        value: 1e3,\n        scientific: true\n      },\n      mega: {\n        name: 'mega',\n        value: 1e6,\n        scientific: true\n      },\n      giga: {\n        name: 'giga',\n        value: 1e9,\n        scientific: true\n      },\n      tera: {\n        name: 'tera',\n        value: 1e12,\n        scientific: true\n      },\n      peta: {\n        name: 'peta',\n        value: 1e15,\n        scientific: true\n      },\n      exa: {\n        name: 'exa',\n        value: 1e18,\n        scientific: true\n      },\n      zetta: {\n        name: 'zetta',\n        value: 1e21,\n        scientific: true\n      },\n      yotta: {\n        name: 'yotta',\n        value: 1e24,\n        scientific: true\n      },\n      deci: {\n        name: 'deci',\n        value: 1e-1,\n        scientific: false\n      },\n      centi: {\n        name: 'centi',\n        value: 1e-2,\n        scientific: false\n      },\n      milli: {\n        name: 'milli',\n        value: 1e-3,\n        scientific: true\n      },\n      micro: {\n        name: 'micro',\n        value: 1e-6,\n        scientific: true\n      },\n      nano: {\n        name: 'nano',\n        value: 1e-9,\n        scientific: true\n      },\n      pico: {\n        name: 'pico',\n        value: 1e-12,\n        scientific: true\n      },\n      femto: {\n        name: 'femto',\n        value: 1e-15,\n        scientific: true\n      },\n      atto: {\n        name: 'atto',\n        value: 1e-18,\n        scientific: true\n      },\n      zepto: {\n        name: 'zepto',\n        value: 1e-21,\n        scientific: true\n      },\n      yocto: {\n        name: 'yocto',\n        value: 1e-24,\n        scientific: true\n      }\n    },\n    SQUARED: {\n      '': {\n        name: '',\n        value: 1,\n        scientific: true\n      },\n      da: {\n        name: 'da',\n        value: 1e2,\n        scientific: false\n      },\n      h: {\n        name: 'h',\n        value: 1e4,\n        scientific: false\n      },\n      k: {\n        name: 'k',\n        value: 1e6,\n        scientific: true\n      },\n      M: {\n        name: 'M',\n        value: 1e12,\n        scientific: true\n      },\n      G: {\n        name: 'G',\n        value: 1e18,\n        scientific: true\n      },\n      T: {\n        name: 'T',\n        value: 1e24,\n        scientific: true\n      },\n      P: {\n        name: 'P',\n        value: 1e30,\n        scientific: true\n      },\n      E: {\n        name: 'E',\n        value: 1e36,\n        scientific: true\n      },\n      Z: {\n        name: 'Z',\n        value: 1e42,\n        scientific: true\n      },\n      Y: {\n        name: 'Y',\n        value: 1e48,\n        scientific: true\n      },\n      d: {\n        name: 'd',\n        value: 1e-2,\n        scientific: false\n      },\n      c: {\n        name: 'c',\n        value: 1e-4,\n        scientific: false\n      },\n      m: {\n        name: 'm',\n        value: 1e-6,\n        scientific: true\n      },\n      u: {\n        name: 'u',\n        value: 1e-12,\n        scientific: true\n      },\n      n: {\n        name: 'n',\n        value: 1e-18,\n        scientific: true\n      },\n      p: {\n        name: 'p',\n        value: 1e-24,\n        scientific: true\n      },\n      f: {\n        name: 'f',\n        value: 1e-30,\n        scientific: true\n      },\n      a: {\n        name: 'a',\n        value: 1e-36,\n        scientific: true\n      },\n      z: {\n        name: 'z',\n        value: 1e-42,\n        scientific: true\n      },\n      y: {\n        name: 'y',\n        value: 1e-48,\n        scientific: true\n      }\n    },\n    CUBIC: {\n      '': {\n        name: '',\n        value: 1,\n        scientific: true\n      },\n      da: {\n        name: 'da',\n        value: 1e3,\n        scientific: false\n      },\n      h: {\n        name: 'h',\n        value: 1e6,\n        scientific: false\n      },\n      k: {\n        name: 'k',\n        value: 1e9,\n        scientific: true\n      },\n      M: {\n        name: 'M',\n        value: 1e18,\n        scientific: true\n      },\n      G: {\n        name: 'G',\n        value: 1e27,\n        scientific: true\n      },\n      T: {\n        name: 'T',\n        value: 1e36,\n        scientific: true\n      },\n      P: {\n        name: 'P',\n        value: 1e45,\n        scientific: true\n      },\n      E: {\n        name: 'E',\n        value: 1e54,\n        scientific: true\n      },\n      Z: {\n        name: 'Z',\n        value: 1e63,\n        scientific: true\n      },\n      Y: {\n        name: 'Y',\n        value: 1e72,\n        scientific: true\n      },\n      d: {\n        name: 'd',\n        value: 1e-3,\n        scientific: false\n      },\n      c: {\n        name: 'c',\n        value: 1e-6,\n        scientific: false\n      },\n      m: {\n        name: 'm',\n        value: 1e-9,\n        scientific: true\n      },\n      u: {\n        name: 'u',\n        value: 1e-18,\n        scientific: true\n      },\n      n: {\n        name: 'n',\n        value: 1e-27,\n        scientific: true\n      },\n      p: {\n        name: 'p',\n        value: 1e-36,\n        scientific: true\n      },\n      f: {\n        name: 'f',\n        value: 1e-45,\n        scientific: true\n      },\n      a: {\n        name: 'a',\n        value: 1e-54,\n        scientific: true\n      },\n      z: {\n        name: 'z',\n        value: 1e-63,\n        scientific: true\n      },\n      y: {\n        name: 'y',\n        value: 1e-72,\n        scientific: true\n      }\n    },\n    BINARY_SHORT_SI: {\n      '': {\n        name: '',\n        value: 1,\n        scientific: true\n      },\n      k: {\n        name: 'k',\n        value: 1e3,\n        scientific: true\n      },\n      M: {\n        name: 'M',\n        value: 1e6,\n        scientific: true\n      },\n      G: {\n        name: 'G',\n        value: 1e9,\n        scientific: true\n      },\n      T: {\n        name: 'T',\n        value: 1e12,\n        scientific: true\n      },\n      P: {\n        name: 'P',\n        value: 1e15,\n        scientific: true\n      },\n      E: {\n        name: 'E',\n        value: 1e18,\n        scientific: true\n      },\n      Z: {\n        name: 'Z',\n        value: 1e21,\n        scientific: true\n      },\n      Y: {\n        name: 'Y',\n        value: 1e24,\n        scientific: true\n      }\n    },\n    BINARY_SHORT_IEC: {\n      '': {\n        name: '',\n        value: 1,\n        scientific: true\n      },\n      Ki: {\n        name: 'Ki',\n        value: 1024,\n        scientific: true\n      },\n      Mi: {\n        name: 'Mi',\n        value: Math.pow(1024, 2),\n        scientific: true\n      },\n      Gi: {\n        name: 'Gi',\n        value: Math.pow(1024, 3),\n        scientific: true\n      },\n      Ti: {\n        name: 'Ti',\n        value: Math.pow(1024, 4),\n        scientific: true\n      },\n      Pi: {\n        name: 'Pi',\n        value: Math.pow(1024, 5),\n        scientific: true\n      },\n      Ei: {\n        name: 'Ei',\n        value: Math.pow(1024, 6),\n        scientific: true\n      },\n      Zi: {\n        name: 'Zi',\n        value: Math.pow(1024, 7),\n        scientific: true\n      },\n      Yi: {\n        name: 'Yi',\n        value: Math.pow(1024, 8),\n        scientific: true\n      }\n    },\n    BINARY_LONG_SI: {\n      '': {\n        name: '',\n        value: 1,\n        scientific: true\n      },\n      kilo: {\n        name: 'kilo',\n        value: 1e3,\n        scientific: true\n      },\n      mega: {\n        name: 'mega',\n        value: 1e6,\n        scientific: true\n      },\n      giga: {\n        name: 'giga',\n        value: 1e9,\n        scientific: true\n      },\n      tera: {\n        name: 'tera',\n        value: 1e12,\n        scientific: true\n      },\n      peta: {\n        name: 'peta',\n        value: 1e15,\n        scientific: true\n      },\n      exa: {\n        name: 'exa',\n        value: 1e18,\n        scientific: true\n      },\n      zetta: {\n        name: 'zetta',\n        value: 1e21,\n        scientific: true\n      },\n      yotta: {\n        name: 'yotta',\n        value: 1e24,\n        scientific: true\n      }\n    },\n    BINARY_LONG_IEC: {\n      '': {\n        name: '',\n        value: 1,\n        scientific: true\n      },\n      kibi: {\n        name: 'kibi',\n        value: 1024,\n        scientific: true\n      },\n      mebi: {\n        name: 'mebi',\n        value: Math.pow(1024, 2),\n        scientific: true\n      },\n      gibi: {\n        name: 'gibi',\n        value: Math.pow(1024, 3),\n        scientific: true\n      },\n      tebi: {\n        name: 'tebi',\n        value: Math.pow(1024, 4),\n        scientific: true\n      },\n      pebi: {\n        name: 'pebi',\n        value: Math.pow(1024, 5),\n        scientific: true\n      },\n      exi: {\n        name: 'exi',\n        value: Math.pow(1024, 6),\n        scientific: true\n      },\n      zebi: {\n        name: 'zebi',\n        value: Math.pow(1024, 7),\n        scientific: true\n      },\n      yobi: {\n        name: 'yobi',\n        value: Math.pow(1024, 8),\n        scientific: true\n      }\n    },\n    BTU: {\n      '': {\n        name: '',\n        value: 1,\n        scientific: true\n      },\n      MM: {\n        name: 'MM',\n        value: 1e6,\n        scientific: true\n      }\n    }\n  };\n  PREFIXES.SHORTLONG = _extends({}, PREFIXES.SHORT, PREFIXES.LONG);\n  PREFIXES.BINARY_SHORT = _extends({}, PREFIXES.BINARY_SHORT_SI, PREFIXES.BINARY_SHORT_IEC);\n  PREFIXES.BINARY_LONG = _extends({}, PREFIXES.BINARY_LONG_SI, PREFIXES.BINARY_LONG_IEC);\n  /* Internally, each unit is represented by a value and a dimension array. The elements of the dimensions array have the following meaning:\n   * Index  Dimension\n   * -----  ---------\n   *   0    Length\n   *   1    Mass\n   *   2    Time\n   *   3    Current\n   *   4    Temperature\n   *   5    Luminous intensity\n   *   6    Amount of substance\n   *   7    Angle\n   *   8    Bit (digital)\n   * For example, the unit \"298.15 K\" is a pure temperature and would have a value of 298.15 and a dimension array of [0, 0, 0, 0, 1, 0, 0, 0, 0]. The unit \"1 cal / (gm °C)\" can be written in terms of the 9 fundamental dimensions as [length^2] / ([time^2] * [temperature]), and would a value of (after conversion to SI) 4184.0 and a dimensions array of [2, 0, -2, 0, -1, 0, 0, 0, 0].\n   *\n   */\n\n  var BASE_DIMENSIONS = ['MASS', 'LENGTH', 'TIME', 'CURRENT', 'TEMPERATURE', 'LUMINOUS_INTENSITY', 'AMOUNT_OF_SUBSTANCE', 'ANGLE', 'BIT'];\n  var BASE_UNITS = {\n    NONE: {\n      dimensions: [0, 0, 0, 0, 0, 0, 0, 0, 0]\n    },\n    MASS: {\n      dimensions: [1, 0, 0, 0, 0, 0, 0, 0, 0]\n    },\n    LENGTH: {\n      dimensions: [0, 1, 0, 0, 0, 0, 0, 0, 0]\n    },\n    TIME: {\n      dimensions: [0, 0, 1, 0, 0, 0, 0, 0, 0]\n    },\n    CURRENT: {\n      dimensions: [0, 0, 0, 1, 0, 0, 0, 0, 0]\n    },\n    TEMPERATURE: {\n      dimensions: [0, 0, 0, 0, 1, 0, 0, 0, 0]\n    },\n    LUMINOUS_INTENSITY: {\n      dimensions: [0, 0, 0, 0, 0, 1, 0, 0, 0]\n    },\n    AMOUNT_OF_SUBSTANCE: {\n      dimensions: [0, 0, 0, 0, 0, 0, 1, 0, 0]\n    },\n    FORCE: {\n      dimensions: [1, 1, -2, 0, 0, 0, 0, 0, 0]\n    },\n    SURFACE: {\n      dimensions: [0, 2, 0, 0, 0, 0, 0, 0, 0]\n    },\n    VOLUME: {\n      dimensions: [0, 3, 0, 0, 0, 0, 0, 0, 0]\n    },\n    ENERGY: {\n      dimensions: [1, 2, -2, 0, 0, 0, 0, 0, 0]\n    },\n    POWER: {\n      dimensions: [1, 2, -3, 0, 0, 0, 0, 0, 0]\n    },\n    PRESSURE: {\n      dimensions: [1, -1, -2, 0, 0, 0, 0, 0, 0]\n    },\n    ELECTRIC_CHARGE: {\n      dimensions: [0, 0, 1, 1, 0, 0, 0, 0, 0]\n    },\n    ELECTRIC_CAPACITANCE: {\n      dimensions: [-1, -2, 4, 2, 0, 0, 0, 0, 0]\n    },\n    ELECTRIC_POTENTIAL: {\n      dimensions: [1, 2, -3, -1, 0, 0, 0, 0, 0]\n    },\n    ELECTRIC_RESISTANCE: {\n      dimensions: [1, 2, -3, -2, 0, 0, 0, 0, 0]\n    },\n    ELECTRIC_INDUCTANCE: {\n      dimensions: [1, 2, -2, -2, 0, 0, 0, 0, 0]\n    },\n    ELECTRIC_CONDUCTANCE: {\n      dimensions: [-1, -2, 3, 2, 0, 0, 0, 0, 0]\n    },\n    MAGNETIC_FLUX: {\n      dimensions: [1, 2, -2, -1, 0, 0, 0, 0, 0]\n    },\n    MAGNETIC_FLUX_DENSITY: {\n      dimensions: [1, 0, -2, -1, 0, 0, 0, 0, 0]\n    },\n    FREQUENCY: {\n      dimensions: [0, 0, -1, 0, 0, 0, 0, 0, 0]\n    },\n    ANGLE: {\n      dimensions: [0, 0, 0, 0, 0, 0, 0, 1, 0]\n    },\n    BIT: {\n      dimensions: [0, 0, 0, 0, 0, 0, 0, 0, 1]\n    }\n  };\n\n  for (var key in BASE_UNITS) {\n    if (hasOwnProperty(BASE_UNITS, key)) {\n      BASE_UNITS[key].key = key;\n    }\n  }\n\n  var BASE_UNIT_NONE = {};\n  var UNIT_NONE = {\n    name: '',\n    base: BASE_UNIT_NONE,\n    value: 1,\n    offset: 0,\n    dimensions: BASE_DIMENSIONS.map(x => 0)\n  };\n  var UNITS = {\n    // length\n    meter: {\n      name: 'meter',\n      base: BASE_UNITS.LENGTH,\n      prefixes: PREFIXES.LONG,\n      value: 1,\n      offset: 0\n    },\n    inch: {\n      name: 'inch',\n      base: BASE_UNITS.LENGTH,\n      prefixes: PREFIXES.NONE,\n      value: 0.0254,\n      offset: 0\n    },\n    foot: {\n      name: 'foot',\n      base: BASE_UNITS.LENGTH,\n      prefixes: PREFIXES.NONE,\n      value: 0.3048,\n      offset: 0\n    },\n    yard: {\n      name: 'yard',\n      base: BASE_UNITS.LENGTH,\n      prefixes: PREFIXES.NONE,\n      value: 0.9144,\n      offset: 0\n    },\n    mile: {\n      name: 'mile',\n      base: BASE_UNITS.LENGTH,\n      prefixes: PREFIXES.NONE,\n      value: 1609.344,\n      offset: 0\n    },\n    link: {\n      name: 'link',\n      base: BASE_UNITS.LENGTH,\n      prefixes: PREFIXES.NONE,\n      value: 0.201168,\n      offset: 0\n    },\n    rod: {\n      name: 'rod',\n      base: BASE_UNITS.LENGTH,\n      prefixes: PREFIXES.NONE,\n      value: 5.0292,\n      offset: 0\n    },\n    chain: {\n      name: 'chain',\n      base: BASE_UNITS.LENGTH,\n      prefixes: PREFIXES.NONE,\n      value: 20.1168,\n      offset: 0\n    },\n    angstrom: {\n      name: 'angstrom',\n      base: BASE_UNITS.LENGTH,\n      prefixes: PREFIXES.NONE,\n      value: 1e-10,\n      offset: 0\n    },\n    m: {\n      name: 'm',\n      base: BASE_UNITS.LENGTH,\n      prefixes: PREFIXES.SHORT,\n      value: 1,\n      offset: 0\n    },\n    in: {\n      name: 'in',\n      base: BASE_UNITS.LENGTH,\n      prefixes: PREFIXES.NONE,\n      value: 0.0254,\n      offset: 0\n    },\n    ft: {\n      name: 'ft',\n      base: BASE_UNITS.LENGTH,\n      prefixes: PREFIXES.NONE,\n      value: 0.3048,\n      offset: 0\n    },\n    yd: {\n      name: 'yd',\n      base: BASE_UNITS.LENGTH,\n      prefixes: PREFIXES.NONE,\n      value: 0.9144,\n      offset: 0\n    },\n    mi: {\n      name: 'mi',\n      base: BASE_UNITS.LENGTH,\n      prefixes: PREFIXES.NONE,\n      value: 1609.344,\n      offset: 0\n    },\n    li: {\n      name: 'li',\n      base: BASE_UNITS.LENGTH,\n      prefixes: PREFIXES.NONE,\n      value: 0.201168,\n      offset: 0\n    },\n    rd: {\n      name: 'rd',\n      base: BASE_UNITS.LENGTH,\n      prefixes: PREFIXES.NONE,\n      value: 5.029210,\n      offset: 0\n    },\n    ch: {\n      name: 'ch',\n      base: BASE_UNITS.LENGTH,\n      prefixes: PREFIXES.NONE,\n      value: 20.1168,\n      offset: 0\n    },\n    mil: {\n      name: 'mil',\n      base: BASE_UNITS.LENGTH,\n      prefixes: PREFIXES.NONE,\n      value: 0.0000254,\n      offset: 0\n    },\n    // 1/1000 inch\n    // Surface\n    m2: {\n      name: 'm2',\n      base: BASE_UNITS.SURFACE,\n      prefixes: PREFIXES.SQUARED,\n      value: 1,\n      offset: 0\n    },\n    sqin: {\n      name: 'sqin',\n      base: BASE_UNITS.SURFACE,\n      prefixes: PREFIXES.NONE,\n      value: 0.00064516,\n      offset: 0\n    },\n    // 645.16 mm2\n    sqft: {\n      name: 'sqft',\n      base: BASE_UNITS.SURFACE,\n      prefixes: PREFIXES.NONE,\n      value: 0.09290304,\n      offset: 0\n    },\n    // 0.09290304 m2\n    sqyd: {\n      name: 'sqyd',\n      base: BASE_UNITS.SURFACE,\n      prefixes: PREFIXES.NONE,\n      value: 0.83612736,\n      offset: 0\n    },\n    // 0.83612736 m2\n    sqmi: {\n      name: 'sqmi',\n      base: BASE_UNITS.SURFACE,\n      prefixes: PREFIXES.NONE,\n      value: 2589988.110336,\n      offset: 0\n    },\n    // 2.589988110336 km2\n    sqrd: {\n      name: 'sqrd',\n      base: BASE_UNITS.SURFACE,\n      prefixes: PREFIXES.NONE,\n      value: 25.29295,\n      offset: 0\n    },\n    // 25.29295 m2\n    sqch: {\n      name: 'sqch',\n      base: BASE_UNITS.SURFACE,\n      prefixes: PREFIXES.NONE,\n      value: 404.6873,\n      offset: 0\n    },\n    // 404.6873 m2\n    sqmil: {\n      name: 'sqmil',\n      base: BASE_UNITS.SURFACE,\n      prefixes: PREFIXES.NONE,\n      value: 6.4516e-10,\n      offset: 0\n    },\n    // 6.4516 * 10^-10 m2\n    acre: {\n      name: 'acre',\n      base: BASE_UNITS.SURFACE,\n      prefixes: PREFIXES.NONE,\n      value: 4046.86,\n      offset: 0\n    },\n    // 4046.86 m2\n    hectare: {\n      name: 'hectare',\n      base: BASE_UNITS.SURFACE,\n      prefixes: PREFIXES.NONE,\n      value: 10000,\n      offset: 0\n    },\n    // 10000 m2\n    // Volume\n    m3: {\n      name: 'm3',\n      base: BASE_UNITS.VOLUME,\n      prefixes: PREFIXES.CUBIC,\n      value: 1,\n      offset: 0\n    },\n    L: {\n      name: 'L',\n      base: BASE_UNITS.VOLUME,\n      prefixes: PREFIXES.SHORT,\n      value: 0.001,\n      offset: 0\n    },\n    // litre\n    l: {\n      name: 'l',\n      base: BASE_UNITS.VOLUME,\n      prefixes: PREFIXES.SHORT,\n      value: 0.001,\n      offset: 0\n    },\n    // litre\n    litre: {\n      name: 'litre',\n      base: BASE_UNITS.VOLUME,\n      prefixes: PREFIXES.LONG,\n      value: 0.001,\n      offset: 0\n    },\n    cuin: {\n      name: 'cuin',\n      base: BASE_UNITS.VOLUME,\n      prefixes: PREFIXES.NONE,\n      value: 1.6387064e-5,\n      offset: 0\n    },\n    // 1.6387064e-5 m3\n    cuft: {\n      name: 'cuft',\n      base: BASE_UNITS.VOLUME,\n      prefixes: PREFIXES.NONE,\n      value: 0.028316846592,\n      offset: 0\n    },\n    // 28.316 846 592 L\n    cuyd: {\n      name: 'cuyd',\n      base: BASE_UNITS.VOLUME,\n      prefixes: PREFIXES.NONE,\n      value: 0.764554857984,\n      offset: 0\n    },\n    // 764.554 857 984 L\n    teaspoon: {\n      name: 'teaspoon',\n      base: BASE_UNITS.VOLUME,\n      prefixes: PREFIXES.NONE,\n      value: 0.000005,\n      offset: 0\n    },\n    // 5 mL\n    tablespoon: {\n      name: 'tablespoon',\n      base: BASE_UNITS.VOLUME,\n      prefixes: PREFIXES.NONE,\n      value: 0.000015,\n      offset: 0\n    },\n    // 15 mL\n    // {name: 'cup', base: BASE_UNITS.VOLUME, prefixes: PREFIXES.NONE, value: 0.000240, offset: 0}, // 240 mL  // not possible, we have already another cup\n    drop: {\n      name: 'drop',\n      base: BASE_UNITS.VOLUME,\n      prefixes: PREFIXES.NONE,\n      value: 5e-8,\n      offset: 0\n    },\n    // 0.05 mL = 5e-8 m3\n    gtt: {\n      name: 'gtt',\n      base: BASE_UNITS.VOLUME,\n      prefixes: PREFIXES.NONE,\n      value: 5e-8,\n      offset: 0\n    },\n    // 0.05 mL = 5e-8 m3\n    // Liquid volume\n    minim: {\n      name: 'minim',\n      base: BASE_UNITS.VOLUME,\n      prefixes: PREFIXES.NONE,\n      value: 0.00000006161152,\n      offset: 0\n    },\n    // 0.06161152 mL\n    fluiddram: {\n      name: 'fluiddram',\n      base: BASE_UNITS.VOLUME,\n      prefixes: PREFIXES.NONE,\n      value: 0.0000036966911,\n      offset: 0\n    },\n    // 3.696691 mL\n    fluidounce: {\n      name: 'fluidounce',\n      base: BASE_UNITS.VOLUME,\n      prefixes: PREFIXES.NONE,\n      value: 0.00002957353,\n      offset: 0\n    },\n    // 29.57353 mL\n    gill: {\n      name: 'gill',\n      base: BASE_UNITS.VOLUME,\n      prefixes: PREFIXES.NONE,\n      value: 0.0001182941,\n      offset: 0\n    },\n    // 118.2941 mL\n    cc: {\n      name: 'cc',\n      base: BASE_UNITS.VOLUME,\n      prefixes: PREFIXES.NONE,\n      value: 1e-6,\n      offset: 0\n    },\n    // 1e-6 L\n    cup: {\n      name: 'cup',\n      base: BASE_UNITS.VOLUME,\n      prefixes: PREFIXES.NONE,\n      value: 0.0002365882,\n      offset: 0\n    },\n    // 236.5882 mL\n    pint: {\n      name: 'pint',\n      base: BASE_UNITS.VOLUME,\n      prefixes: PREFIXES.NONE,\n      value: 0.0004731765,\n      offset: 0\n    },\n    // 473.1765 mL\n    quart: {\n      name: 'quart',\n      base: BASE_UNITS.VOLUME,\n      prefixes: PREFIXES.NONE,\n      value: 0.0009463529,\n      offset: 0\n    },\n    // 946.3529 mL\n    gallon: {\n      name: 'gallon',\n      base: BASE_UNITS.VOLUME,\n      prefixes: PREFIXES.NONE,\n      value: 0.003785412,\n      offset: 0\n    },\n    // 3.785412 L\n    beerbarrel: {\n      name: 'beerbarrel',\n      base: BASE_UNITS.VOLUME,\n      prefixes: PREFIXES.NONE,\n      value: 0.1173478,\n      offset: 0\n    },\n    // 117.3478 L\n    oilbarrel: {\n      name: 'oilbarrel',\n      base: BASE_UNITS.VOLUME,\n      prefixes: PREFIXES.NONE,\n      value: 0.1589873,\n      offset: 0\n    },\n    // 158.9873 L\n    hogshead: {\n      name: 'hogshead',\n      base: BASE_UNITS.VOLUME,\n      prefixes: PREFIXES.NONE,\n      value: 0.2384810,\n      offset: 0\n    },\n    // 238.4810 L\n    // {name: 'min', base: BASE_UNITS.VOLUME, prefixes: PREFIXES.NONE, value: 0.00000006161152, offset: 0}, // 0.06161152 mL // min is already in use as minute\n    fldr: {\n      name: 'fldr',\n      base: BASE_UNITS.VOLUME,\n      prefixes: PREFIXES.NONE,\n      value: 0.0000036966911,\n      offset: 0\n    },\n    // 3.696691 mL\n    floz: {\n      name: 'floz',\n      base: BASE_UNITS.VOLUME,\n      prefixes: PREFIXES.NONE,\n      value: 0.00002957353,\n      offset: 0\n    },\n    // 29.57353 mL\n    gi: {\n      name: 'gi',\n      base: BASE_UNITS.VOLUME,\n      prefixes: PREFIXES.NONE,\n      value: 0.0001182941,\n      offset: 0\n    },\n    // 118.2941 mL\n    cp: {\n      name: 'cp',\n      base: BASE_UNITS.VOLUME,\n      prefixes: PREFIXES.NONE,\n      value: 0.0002365882,\n      offset: 0\n    },\n    // 236.5882 mL\n    pt: {\n      name: 'pt',\n      base: BASE_UNITS.VOLUME,\n      prefixes: PREFIXES.NONE,\n      value: 0.0004731765,\n      offset: 0\n    },\n    // 473.1765 mL\n    qt: {\n      name: 'qt',\n      base: BASE_UNITS.VOLUME,\n      prefixes: PREFIXES.NONE,\n      value: 0.0009463529,\n      offset: 0\n    },\n    // 946.3529 mL\n    gal: {\n      name: 'gal',\n      base: BASE_UNITS.VOLUME,\n      prefixes: PREFIXES.NONE,\n      value: 0.003785412,\n      offset: 0\n    },\n    // 3.785412 L\n    bbl: {\n      name: 'bbl',\n      base: BASE_UNITS.VOLUME,\n      prefixes: PREFIXES.NONE,\n      value: 0.1173478,\n      offset: 0\n    },\n    // 117.3478 L\n    obl: {\n      name: 'obl',\n      base: BASE_UNITS.VOLUME,\n      prefixes: PREFIXES.NONE,\n      value: 0.1589873,\n      offset: 0\n    },\n    // 158.9873 L\n    // {name: 'hogshead', base: BASE_UNITS.VOLUME, prefixes: PREFIXES.NONE, value: 0.2384810, offset: 0}, // 238.4810 L // TODO: hh?\n    // Mass\n    g: {\n      name: 'g',\n      base: BASE_UNITS.MASS,\n      prefixes: PREFIXES.SHORT,\n      value: 0.001,\n      offset: 0\n    },\n    gram: {\n      name: 'gram',\n      base: BASE_UNITS.MASS,\n      prefixes: PREFIXES.LONG,\n      value: 0.001,\n      offset: 0\n    },\n    ton: {\n      name: 'ton',\n      base: BASE_UNITS.MASS,\n      prefixes: PREFIXES.SHORT,\n      value: 907.18474,\n      offset: 0\n    },\n    t: {\n      name: 't',\n      base: BASE_UNITS.MASS,\n      prefixes: PREFIXES.SHORT,\n      value: 1000,\n      offset: 0\n    },\n    tonne: {\n      name: 'tonne',\n      base: BASE_UNITS.MASS,\n      prefixes: PREFIXES.LONG,\n      value: 1000,\n      offset: 0\n    },\n    grain: {\n      name: 'grain',\n      base: BASE_UNITS.MASS,\n      prefixes: PREFIXES.NONE,\n      value: 64.79891e-6,\n      offset: 0\n    },\n    dram: {\n      name: 'dram',\n      base: BASE_UNITS.MASS,\n      prefixes: PREFIXES.NONE,\n      value: 1.7718451953125e-3,\n      offset: 0\n    },\n    ounce: {\n      name: 'ounce',\n      base: BASE_UNITS.MASS,\n      prefixes: PREFIXES.NONE,\n      value: 28.349523125e-3,\n      offset: 0\n    },\n    poundmass: {\n      name: 'poundmass',\n      base: BASE_UNITS.MASS,\n      prefixes: PREFIXES.NONE,\n      value: 453.59237e-3,\n      offset: 0\n    },\n    hundredweight: {\n      name: 'hundredweight',\n      base: BASE_UNITS.MASS,\n      prefixes: PREFIXES.NONE,\n      value: 45.359237,\n      offset: 0\n    },\n    stick: {\n      name: 'stick',\n      base: BASE_UNITS.MASS,\n      prefixes: PREFIXES.NONE,\n      value: 115e-3,\n      offset: 0\n    },\n    stone: {\n      name: 'stone',\n      base: BASE_UNITS.MASS,\n      prefixes: PREFIXES.NONE,\n      value: 6.35029318,\n      offset: 0\n    },\n    gr: {\n      name: 'gr',\n      base: BASE_UNITS.MASS,\n      prefixes: PREFIXES.NONE,\n      value: 64.79891e-6,\n      offset: 0\n    },\n    dr: {\n      name: 'dr',\n      base: BASE_UNITS.MASS,\n      prefixes: PREFIXES.NONE,\n      value: 1.7718451953125e-3,\n      offset: 0\n    },\n    oz: {\n      name: 'oz',\n      base: BASE_UNITS.MASS,\n      prefixes: PREFIXES.NONE,\n      value: 28.349523125e-3,\n      offset: 0\n    },\n    lbm: {\n      name: 'lbm',\n      base: BASE_UNITS.MASS,\n      prefixes: PREFIXES.NONE,\n      value: 453.59237e-3,\n      offset: 0\n    },\n    cwt: {\n      name: 'cwt',\n      base: BASE_UNITS.MASS,\n      prefixes: PREFIXES.NONE,\n      value: 45.359237,\n      offset: 0\n    },\n    // Time\n    s: {\n      name: 's',\n      base: BASE_UNITS.TIME,\n      prefixes: PREFIXES.SHORT,\n      value: 1,\n      offset: 0\n    },\n    min: {\n      name: 'min',\n      base: BASE_UNITS.TIME,\n      prefixes: PREFIXES.NONE,\n      value: 60,\n      offset: 0\n    },\n    h: {\n      name: 'h',\n      base: BASE_UNITS.TIME,\n      prefixes: PREFIXES.NONE,\n      value: 3600,\n      offset: 0\n    },\n    second: {\n      name: 'second',\n      base: BASE_UNITS.TIME,\n      prefixes: PREFIXES.LONG,\n      value: 1,\n      offset: 0\n    },\n    sec: {\n      name: 'sec',\n      base: BASE_UNITS.TIME,\n      prefixes: PREFIXES.LONG,\n      value: 1,\n      offset: 0\n    },\n    minute: {\n      name: 'minute',\n      base: BASE_UNITS.TIME,\n      prefixes: PREFIXES.NONE,\n      value: 60,\n      offset: 0\n    },\n    hour: {\n      name: 'hour',\n      base: BASE_UNITS.TIME,\n      prefixes: PREFIXES.NONE,\n      value: 3600,\n      offset: 0\n    },\n    day: {\n      name: 'day',\n      base: BASE_UNITS.TIME,\n      prefixes: PREFIXES.NONE,\n      value: 86400,\n      offset: 0\n    },\n    week: {\n      name: 'week',\n      base: BASE_UNITS.TIME,\n      prefixes: PREFIXES.NONE,\n      value: 7 * 86400,\n      offset: 0\n    },\n    month: {\n      name: 'month',\n      base: BASE_UNITS.TIME,\n      prefixes: PREFIXES.NONE,\n      value: 2629800,\n      // 1/12th of Julian year\n      offset: 0\n    },\n    year: {\n      name: 'year',\n      base: BASE_UNITS.TIME,\n      prefixes: PREFIXES.NONE,\n      value: 31557600,\n      // Julian year\n      offset: 0\n    },\n    decade: {\n      name: 'decade',\n      base: BASE_UNITS.TIME,\n      prefixes: PREFIXES.NONE,\n      value: 315576000,\n      // Julian decade\n      offset: 0\n    },\n    century: {\n      name: 'century',\n      base: BASE_UNITS.TIME,\n      prefixes: PREFIXES.NONE,\n      value: 3155760000,\n      // Julian century\n      offset: 0\n    },\n    millennium: {\n      name: 'millennium',\n      base: BASE_UNITS.TIME,\n      prefixes: PREFIXES.NONE,\n      value: 31557600000,\n      // Julian millennium\n      offset: 0\n    },\n    // Frequency\n    hertz: {\n      name: 'Hertz',\n      base: BASE_UNITS.FREQUENCY,\n      prefixes: PREFIXES.LONG,\n      value: 1,\n      offset: 0,\n      reciprocal: true\n    },\n    Hz: {\n      name: 'Hz',\n      base: BASE_UNITS.FREQUENCY,\n      prefixes: PREFIXES.SHORT,\n      value: 1,\n      offset: 0,\n      reciprocal: true\n    },\n    // Angle\n    rad: {\n      name: 'rad',\n      base: BASE_UNITS.ANGLE,\n      prefixes: PREFIXES.SHORT,\n      value: 1,\n      offset: 0\n    },\n    radian: {\n      name: 'radian',\n      base: BASE_UNITS.ANGLE,\n      prefixes: PREFIXES.LONG,\n      value: 1,\n      offset: 0\n    },\n    // deg = rad / (2*pi) * 360 = rad / 0.017453292519943295769236907684888\n    deg: {\n      name: 'deg',\n      base: BASE_UNITS.ANGLE,\n      prefixes: PREFIXES.SHORT,\n      value: null,\n      // will be filled in by calculateAngleValues()\n      offset: 0\n    },\n    degree: {\n      name: 'degree',\n      base: BASE_UNITS.ANGLE,\n      prefixes: PREFIXES.LONG,\n      value: null,\n      // will be filled in by calculateAngleValues()\n      offset: 0\n    },\n    // grad = rad / (2*pi) * 400  = rad / 0.015707963267948966192313216916399\n    grad: {\n      name: 'grad',\n      base: BASE_UNITS.ANGLE,\n      prefixes: PREFIXES.SHORT,\n      value: null,\n      // will be filled in by calculateAngleValues()\n      offset: 0\n    },\n    gradian: {\n      name: 'gradian',\n      base: BASE_UNITS.ANGLE,\n      prefixes: PREFIXES.LONG,\n      value: null,\n      // will be filled in by calculateAngleValues()\n      offset: 0\n    },\n    // cycle = rad / (2*pi) = rad / 6.2831853071795864769252867665793\n    cycle: {\n      name: 'cycle',\n      base: BASE_UNITS.ANGLE,\n      prefixes: PREFIXES.NONE,\n      value: null,\n      // will be filled in by calculateAngleValues()\n      offset: 0\n    },\n    // arcsec = rad / (3600 * (360 / 2 * pi)) = rad / 0.0000048481368110953599358991410235795\n    arcsec: {\n      name: 'arcsec',\n      base: BASE_UNITS.ANGLE,\n      prefixes: PREFIXES.NONE,\n      value: null,\n      // will be filled in by calculateAngleValues()\n      offset: 0\n    },\n    // arcmin = rad / (60 * (360 / 2 * pi)) = rad / 0.00029088820866572159615394846141477\n    arcmin: {\n      name: 'arcmin',\n      base: BASE_UNITS.ANGLE,\n      prefixes: PREFIXES.NONE,\n      value: null,\n      // will be filled in by calculateAngleValues()\n      offset: 0\n    },\n    // Electric current\n    A: {\n      name: 'A',\n      base: BASE_UNITS.CURRENT,\n      prefixes: PREFIXES.SHORT,\n      value: 1,\n      offset: 0\n    },\n    ampere: {\n      name: 'ampere',\n      base: BASE_UNITS.CURRENT,\n      prefixes: PREFIXES.LONG,\n      value: 1,\n      offset: 0\n    },\n    // Temperature\n    // K(C) = °C + 273.15\n    // K(F) = (°F + 459.67) / 1.8\n    // K(R) = °R / 1.8\n    K: {\n      name: 'K',\n      base: BASE_UNITS.TEMPERATURE,\n      prefixes: PREFIXES.NONE,\n      value: 1,\n      offset: 0\n    },\n    degC: {\n      name: 'degC',\n      base: BASE_UNITS.TEMPERATURE,\n      prefixes: PREFIXES.NONE,\n      value: 1,\n      offset: 273.15\n    },\n    degF: {\n      name: 'degF',\n      base: BASE_UNITS.TEMPERATURE,\n      prefixes: PREFIXES.NONE,\n      value: 1 / 1.8,\n      offset: 459.67\n    },\n    degR: {\n      name: 'degR',\n      base: BASE_UNITS.TEMPERATURE,\n      prefixes: PREFIXES.NONE,\n      value: 1 / 1.8,\n      offset: 0\n    },\n    kelvin: {\n      name: 'kelvin',\n      base: BASE_UNITS.TEMPERATURE,\n      prefixes: PREFIXES.NONE,\n      value: 1,\n      offset: 0\n    },\n    celsius: {\n      name: 'celsius',\n      base: BASE_UNITS.TEMPERATURE,\n      prefixes: PREFIXES.NONE,\n      value: 1,\n      offset: 273.15\n    },\n    fahrenheit: {\n      name: 'fahrenheit',\n      base: BASE_UNITS.TEMPERATURE,\n      prefixes: PREFIXES.NONE,\n      value: 1 / 1.8,\n      offset: 459.67\n    },\n    rankine: {\n      name: 'rankine',\n      base: BASE_UNITS.TEMPERATURE,\n      prefixes: PREFIXES.NONE,\n      value: 1 / 1.8,\n      offset: 0\n    },\n    // amount of substance\n    mol: {\n      name: 'mol',\n      base: BASE_UNITS.AMOUNT_OF_SUBSTANCE,\n      prefixes: PREFIXES.SHORT,\n      value: 1,\n      offset: 0\n    },\n    mole: {\n      name: 'mole',\n      base: BASE_UNITS.AMOUNT_OF_SUBSTANCE,\n      prefixes: PREFIXES.LONG,\n      value: 1,\n      offset: 0\n    },\n    // luminous intensity\n    cd: {\n      name: 'cd',\n      base: BASE_UNITS.LUMINOUS_INTENSITY,\n      prefixes: PREFIXES.SHORT,\n      value: 1,\n      offset: 0\n    },\n    candela: {\n      name: 'candela',\n      base: BASE_UNITS.LUMINOUS_INTENSITY,\n      prefixes: PREFIXES.LONG,\n      value: 1,\n      offset: 0\n    },\n    // TODO: units STERADIAN\n    // {name: 'sr', base: BASE_UNITS.STERADIAN, prefixes: PREFIXES.NONE, value: 1, offset: 0},\n    // {name: 'steradian', base: BASE_UNITS.STERADIAN, prefixes: PREFIXES.NONE, value: 1, offset: 0},\n    // Force\n    N: {\n      name: 'N',\n      base: BASE_UNITS.FORCE,\n      prefixes: PREFIXES.SHORT,\n      value: 1,\n      offset: 0\n    },\n    newton: {\n      name: 'newton',\n      base: BASE_UNITS.FORCE,\n      prefixes: PREFIXES.LONG,\n      value: 1,\n      offset: 0\n    },\n    dyn: {\n      name: 'dyn',\n      base: BASE_UNITS.FORCE,\n      prefixes: PREFIXES.SHORT,\n      value: 0.00001,\n      offset: 0\n    },\n    dyne: {\n      name: 'dyne',\n      base: BASE_UNITS.FORCE,\n      prefixes: PREFIXES.LONG,\n      value: 0.00001,\n      offset: 0\n    },\n    lbf: {\n      name: 'lbf',\n      base: BASE_UNITS.FORCE,\n      prefixes: PREFIXES.NONE,\n      value: 4.4482216152605,\n      offset: 0\n    },\n    poundforce: {\n      name: 'poundforce',\n      base: BASE_UNITS.FORCE,\n      prefixes: PREFIXES.NONE,\n      value: 4.4482216152605,\n      offset: 0\n    },\n    kip: {\n      name: 'kip',\n      base: BASE_UNITS.FORCE,\n      prefixes: PREFIXES.LONG,\n      value: 4448.2216,\n      offset: 0\n    },\n    kilogramforce: {\n      name: 'kilogramforce',\n      base: BASE_UNITS.FORCE,\n      prefixes: PREFIXES.NONE,\n      value: 9.80665,\n      offset: 0\n    },\n    // Energy\n    J: {\n      name: 'J',\n      base: BASE_UNITS.ENERGY,\n      prefixes: PREFIXES.SHORT,\n      value: 1,\n      offset: 0\n    },\n    joule: {\n      name: 'joule',\n      base: BASE_UNITS.ENERGY,\n      prefixes: PREFIXES.SHORT,\n      value: 1,\n      offset: 0\n    },\n    erg: {\n      name: 'erg',\n      base: BASE_UNITS.ENERGY,\n      prefixes: PREFIXES.NONE,\n      value: 1e-7,\n      offset: 0\n    },\n    Wh: {\n      name: 'Wh',\n      base: BASE_UNITS.ENERGY,\n      prefixes: PREFIXES.SHORT,\n      value: 3600,\n      offset: 0\n    },\n    BTU: {\n      name: 'BTU',\n      base: BASE_UNITS.ENERGY,\n      prefixes: PREFIXES.BTU,\n      value: 1055.05585262,\n      offset: 0\n    },\n    eV: {\n      name: 'eV',\n      base: BASE_UNITS.ENERGY,\n      prefixes: PREFIXES.SHORT,\n      value: 1.602176565e-19,\n      offset: 0\n    },\n    electronvolt: {\n      name: 'electronvolt',\n      base: BASE_UNITS.ENERGY,\n      prefixes: PREFIXES.LONG,\n      value: 1.602176565e-19,\n      offset: 0\n    },\n    // Power\n    W: {\n      name: 'W',\n      base: BASE_UNITS.POWER,\n      prefixes: PREFIXES.SHORT,\n      value: 1,\n      offset: 0\n    },\n    watt: {\n      name: 'watt',\n      base: BASE_UNITS.POWER,\n      prefixes: PREFIXES.LONG,\n      value: 1,\n      offset: 0\n    },\n    hp: {\n      name: 'hp',\n      base: BASE_UNITS.POWER,\n      prefixes: PREFIXES.NONE,\n      value: 745.6998715386,\n      offset: 0\n    },\n    // Electrical power units\n    VAR: {\n      name: 'VAR',\n      base: BASE_UNITS.POWER,\n      prefixes: PREFIXES.SHORT,\n      value: Complex.I,\n      offset: 0\n    },\n    VA: {\n      name: 'VA',\n      base: BASE_UNITS.POWER,\n      prefixes: PREFIXES.SHORT,\n      value: 1,\n      offset: 0\n    },\n    // Pressure\n    Pa: {\n      name: 'Pa',\n      base: BASE_UNITS.PRESSURE,\n      prefixes: PREFIXES.SHORT,\n      value: 1,\n      offset: 0\n    },\n    psi: {\n      name: 'psi',\n      base: BASE_UNITS.PRESSURE,\n      prefixes: PREFIXES.NONE,\n      value: 6894.75729276459,\n      offset: 0\n    },\n    atm: {\n      name: 'atm',\n      base: BASE_UNITS.PRESSURE,\n      prefixes: PREFIXES.NONE,\n      value: 101325,\n      offset: 0\n    },\n    bar: {\n      name: 'bar',\n      base: BASE_UNITS.PRESSURE,\n      prefixes: PREFIXES.SHORTLONG,\n      value: 100000,\n      offset: 0\n    },\n    torr: {\n      name: 'torr',\n      base: BASE_UNITS.PRESSURE,\n      prefixes: PREFIXES.NONE,\n      value: 133.322,\n      offset: 0\n    },\n    mmHg: {\n      name: 'mmHg',\n      base: BASE_UNITS.PRESSURE,\n      prefixes: PREFIXES.NONE,\n      value: 133.322,\n      offset: 0\n    },\n    mmH2O: {\n      name: 'mmH2O',\n      base: BASE_UNITS.PRESSURE,\n      prefixes: PREFIXES.NONE,\n      value: 9.80665,\n      offset: 0\n    },\n    cmH2O: {\n      name: 'cmH2O',\n      base: BASE_UNITS.PRESSURE,\n      prefixes: PREFIXES.NONE,\n      value: 98.0665,\n      offset: 0\n    },\n    // Electric charge\n    coulomb: {\n      name: 'coulomb',\n      base: BASE_UNITS.ELECTRIC_CHARGE,\n      prefixes: PREFIXES.LONG,\n      value: 1,\n      offset: 0\n    },\n    C: {\n      name: 'C',\n      base: BASE_UNITS.ELECTRIC_CHARGE,\n      prefixes: PREFIXES.SHORT,\n      value: 1,\n      offset: 0\n    },\n    // Electric capacitance\n    farad: {\n      name: 'farad',\n      base: BASE_UNITS.ELECTRIC_CAPACITANCE,\n      prefixes: PREFIXES.LONG,\n      value: 1,\n      offset: 0\n    },\n    F: {\n      name: 'F',\n      base: BASE_UNITS.ELECTRIC_CAPACITANCE,\n      prefixes: PREFIXES.SHORT,\n      value: 1,\n      offset: 0\n    },\n    // Electric potential\n    volt: {\n      name: 'volt',\n      base: BASE_UNITS.ELECTRIC_POTENTIAL,\n      prefixes: PREFIXES.LONG,\n      value: 1,\n      offset: 0\n    },\n    V: {\n      name: 'V',\n      base: BASE_UNITS.ELECTRIC_POTENTIAL,\n      prefixes: PREFIXES.SHORT,\n      value: 1,\n      offset: 0\n    },\n    // Electric resistance\n    ohm: {\n      name: 'ohm',\n      base: BASE_UNITS.ELECTRIC_RESISTANCE,\n      prefixes: PREFIXES.SHORTLONG,\n      // Both Mohm and megaohm are acceptable\n      value: 1,\n      offset: 0\n    },\n\n    /*\n     * Unicode breaks in browsers if charset is not specified\n    Ω: {\n      name: 'Ω',\n      base: BASE_UNITS.ELECTRIC_RESISTANCE,\n      prefixes: PREFIXES.SHORT,\n      value: 1,\n      offset: 0\n    },\n    */\n    // Electric inductance\n    henry: {\n      name: 'henry',\n      base: BASE_UNITS.ELECTRIC_INDUCTANCE,\n      prefixes: PREFIXES.LONG,\n      value: 1,\n      offset: 0\n    },\n    H: {\n      name: 'H',\n      base: BASE_UNITS.ELECTRIC_INDUCTANCE,\n      prefixes: PREFIXES.SHORT,\n      value: 1,\n      offset: 0\n    },\n    // Electric conductance\n    siemens: {\n      name: 'siemens',\n      base: BASE_UNITS.ELECTRIC_CONDUCTANCE,\n      prefixes: PREFIXES.LONG,\n      value: 1,\n      offset: 0\n    },\n    S: {\n      name: 'S',\n      base: BASE_UNITS.ELECTRIC_CONDUCTANCE,\n      prefixes: PREFIXES.SHORT,\n      value: 1,\n      offset: 0\n    },\n    // Magnetic flux\n    weber: {\n      name: 'weber',\n      base: BASE_UNITS.MAGNETIC_FLUX,\n      prefixes: PREFIXES.LONG,\n      value: 1,\n      offset: 0\n    },\n    Wb: {\n      name: 'Wb',\n      base: BASE_UNITS.MAGNETIC_FLUX,\n      prefixes: PREFIXES.SHORT,\n      value: 1,\n      offset: 0\n    },\n    // Magnetic flux density\n    tesla: {\n      name: 'tesla',\n      base: BASE_UNITS.MAGNETIC_FLUX_DENSITY,\n      prefixes: PREFIXES.LONG,\n      value: 1,\n      offset: 0\n    },\n    T: {\n      name: 'T',\n      base: BASE_UNITS.MAGNETIC_FLUX_DENSITY,\n      prefixes: PREFIXES.SHORT,\n      value: 1,\n      offset: 0\n    },\n    // Binary\n    b: {\n      name: 'b',\n      base: BASE_UNITS.BIT,\n      prefixes: PREFIXES.BINARY_SHORT,\n      value: 1,\n      offset: 0\n    },\n    bits: {\n      name: 'bits',\n      base: BASE_UNITS.BIT,\n      prefixes: PREFIXES.BINARY_LONG,\n      value: 1,\n      offset: 0\n    },\n    B: {\n      name: 'B',\n      base: BASE_UNITS.BIT,\n      prefixes: PREFIXES.BINARY_SHORT,\n      value: 8,\n      offset: 0\n    },\n    bytes: {\n      name: 'bytes',\n      base: BASE_UNITS.BIT,\n      prefixes: PREFIXES.BINARY_LONG,\n      value: 8,\n      offset: 0\n    }\n  }; // aliases (formerly plurals)\n\n  var ALIASES = {\n    meters: 'meter',\n    inches: 'inch',\n    feet: 'foot',\n    yards: 'yard',\n    miles: 'mile',\n    links: 'link',\n    rods: 'rod',\n    chains: 'chain',\n    angstroms: 'angstrom',\n    lt: 'l',\n    litres: 'litre',\n    liter: 'litre',\n    liters: 'litre',\n    teaspoons: 'teaspoon',\n    tablespoons: 'tablespoon',\n    minims: 'minim',\n    fluiddrams: 'fluiddram',\n    fluidounces: 'fluidounce',\n    gills: 'gill',\n    cups: 'cup',\n    pints: 'pint',\n    quarts: 'quart',\n    gallons: 'gallon',\n    beerbarrels: 'beerbarrel',\n    oilbarrels: 'oilbarrel',\n    hogsheads: 'hogshead',\n    gtts: 'gtt',\n    grams: 'gram',\n    tons: 'ton',\n    tonnes: 'tonne',\n    grains: 'grain',\n    drams: 'dram',\n    ounces: 'ounce',\n    poundmasses: 'poundmass',\n    hundredweights: 'hundredweight',\n    sticks: 'stick',\n    lb: 'lbm',\n    lbs: 'lbm',\n    kips: 'kip',\n    kgf: 'kilogramforce',\n    acres: 'acre',\n    hectares: 'hectare',\n    sqfeet: 'sqft',\n    sqyard: 'sqyd',\n    sqmile: 'sqmi',\n    sqmiles: 'sqmi',\n    mmhg: 'mmHg',\n    mmh2o: 'mmH2O',\n    cmh2o: 'cmH2O',\n    seconds: 'second',\n    secs: 'second',\n    minutes: 'minute',\n    mins: 'minute',\n    hours: 'hour',\n    hr: 'hour',\n    hrs: 'hour',\n    days: 'day',\n    weeks: 'week',\n    months: 'month',\n    years: 'year',\n    decades: 'decade',\n    centuries: 'century',\n    millennia: 'millennium',\n    hertz: 'hertz',\n    radians: 'radian',\n    degrees: 'degree',\n    gradians: 'gradian',\n    cycles: 'cycle',\n    arcsecond: 'arcsec',\n    arcseconds: 'arcsec',\n    arcminute: 'arcmin',\n    arcminutes: 'arcmin',\n    BTUs: 'BTU',\n    watts: 'watt',\n    joules: 'joule',\n    amperes: 'ampere',\n    coulombs: 'coulomb',\n    volts: 'volt',\n    ohms: 'ohm',\n    farads: 'farad',\n    webers: 'weber',\n    teslas: 'tesla',\n    electronvolts: 'electronvolt',\n    moles: 'mole',\n    bit: 'bits',\n    byte: 'bytes'\n  };\n  /**\n   * Calculate the values for the angle units.\n   * Value is calculated as number or BigNumber depending on the configuration\n   * @param {{number: 'number' | 'BigNumber'}} config\n   */\n\n  function calculateAngleValues(config) {\n    if (config.number === 'BigNumber') {\n      var pi = createPi(_BigNumber);\n      UNITS.rad.value = new _BigNumber(1);\n      UNITS.deg.value = pi.div(180); // 2 * pi / 360\n\n      UNITS.grad.value = pi.div(200); // 2 * pi / 400\n\n      UNITS.cycle.value = pi.times(2); // 2 * pi\n\n      UNITS.arcsec.value = pi.div(648000); // 2 * pi / 360 / 3600\n\n      UNITS.arcmin.value = pi.div(10800); // 2 * pi / 360 / 60\n    } else {\n      // number\n      UNITS.rad.value = 1;\n      UNITS.deg.value = Math.PI / 180; // 2 * pi / 360\n\n      UNITS.grad.value = Math.PI / 200; // 2 * pi / 400\n\n      UNITS.cycle.value = Math.PI * 2; // 2 * pi\n\n      UNITS.arcsec.value = Math.PI / 648000; // 2 * pi / 360 / 3600\n\n      UNITS.arcmin.value = Math.PI / 10800; // 2 * pi / 360 / 60\n    } // copy to the full names of the angles\n\n\n    UNITS.radian.value = UNITS.rad.value;\n    UNITS.degree.value = UNITS.deg.value;\n    UNITS.gradian.value = UNITS.grad.value;\n  } // apply the angle values now\n\n\n  calculateAngleValues(config);\n\n  if (on) {\n    // recalculate the values on change of configuration\n    on('config', function (curr, prev) {\n      if (curr.number !== prev.number) {\n        calculateAngleValues(curr);\n      }\n    });\n  }\n  /**\n   * A unit system is a set of dimensionally independent base units plus a set of derived units, formed by multiplication and division of the base units, that are by convention used with the unit system.\n   * A user perhaps could issue a command to select a preferred unit system, or use the default (see below).\n   * Auto unit system: The default unit system is updated on the fly anytime a unit is parsed. The corresponding unit in the default unit system is updated, so that answers are given in the same units the user supplies.\n   */\n\n\n  var UNIT_SYSTEMS = {\n    si: {\n      // Base units\n      NONE: {\n        unit: UNIT_NONE,\n        prefix: PREFIXES.NONE['']\n      },\n      LENGTH: {\n        unit: UNITS.m,\n        prefix: PREFIXES.SHORT['']\n      },\n      MASS: {\n        unit: UNITS.g,\n        prefix: PREFIXES.SHORT.k\n      },\n      TIME: {\n        unit: UNITS.s,\n        prefix: PREFIXES.SHORT['']\n      },\n      CURRENT: {\n        unit: UNITS.A,\n        prefix: PREFIXES.SHORT['']\n      },\n      TEMPERATURE: {\n        unit: UNITS.K,\n        prefix: PREFIXES.SHORT['']\n      },\n      LUMINOUS_INTENSITY: {\n        unit: UNITS.cd,\n        prefix: PREFIXES.SHORT['']\n      },\n      AMOUNT_OF_SUBSTANCE: {\n        unit: UNITS.mol,\n        prefix: PREFIXES.SHORT['']\n      },\n      ANGLE: {\n        unit: UNITS.rad,\n        prefix: PREFIXES.SHORT['']\n      },\n      BIT: {\n        unit: UNITS.bits,\n        prefix: PREFIXES.SHORT['']\n      },\n      // Derived units\n      FORCE: {\n        unit: UNITS.N,\n        prefix: PREFIXES.SHORT['']\n      },\n      ENERGY: {\n        unit: UNITS.J,\n        prefix: PREFIXES.SHORT['']\n      },\n      POWER: {\n        unit: UNITS.W,\n        prefix: PREFIXES.SHORT['']\n      },\n      PRESSURE: {\n        unit: UNITS.Pa,\n        prefix: PREFIXES.SHORT['']\n      },\n      ELECTRIC_CHARGE: {\n        unit: UNITS.C,\n        prefix: PREFIXES.SHORT['']\n      },\n      ELECTRIC_CAPACITANCE: {\n        unit: UNITS.F,\n        prefix: PREFIXES.SHORT['']\n      },\n      ELECTRIC_POTENTIAL: {\n        unit: UNITS.V,\n        prefix: PREFIXES.SHORT['']\n      },\n      ELECTRIC_RESISTANCE: {\n        unit: UNITS.ohm,\n        prefix: PREFIXES.SHORT['']\n      },\n      ELECTRIC_INDUCTANCE: {\n        unit: UNITS.H,\n        prefix: PREFIXES.SHORT['']\n      },\n      ELECTRIC_CONDUCTANCE: {\n        unit: UNITS.S,\n        prefix: PREFIXES.SHORT['']\n      },\n      MAGNETIC_FLUX: {\n        unit: UNITS.Wb,\n        prefix: PREFIXES.SHORT['']\n      },\n      MAGNETIC_FLUX_DENSITY: {\n        unit: UNITS.T,\n        prefix: PREFIXES.SHORT['']\n      },\n      FREQUENCY: {\n        unit: UNITS.Hz,\n        prefix: PREFIXES.SHORT['']\n      }\n    }\n  }; // Clone to create the other unit systems\n\n  UNIT_SYSTEMS.cgs = JSON.parse(JSON.stringify(UNIT_SYSTEMS.si));\n  UNIT_SYSTEMS.cgs.LENGTH = {\n    unit: UNITS.m,\n    prefix: PREFIXES.SHORT.c\n  };\n  UNIT_SYSTEMS.cgs.MASS = {\n    unit: UNITS.g,\n    prefix: PREFIXES.SHORT['']\n  };\n  UNIT_SYSTEMS.cgs.FORCE = {\n    unit: UNITS.dyn,\n    prefix: PREFIXES.SHORT['']\n  };\n  UNIT_SYSTEMS.cgs.ENERGY = {\n    unit: UNITS.erg,\n    prefix: PREFIXES.NONE['']\n  }; // there are wholly 4 unique cgs systems for electricity and magnetism,\n  // so let's not worry about it unless somebody complains\n\n  UNIT_SYSTEMS.us = JSON.parse(JSON.stringify(UNIT_SYSTEMS.si));\n  UNIT_SYSTEMS.us.LENGTH = {\n    unit: UNITS.ft,\n    prefix: PREFIXES.NONE['']\n  };\n  UNIT_SYSTEMS.us.MASS = {\n    unit: UNITS.lbm,\n    prefix: PREFIXES.NONE['']\n  };\n  UNIT_SYSTEMS.us.TEMPERATURE = {\n    unit: UNITS.degF,\n    prefix: PREFIXES.NONE['']\n  };\n  UNIT_SYSTEMS.us.FORCE = {\n    unit: UNITS.lbf,\n    prefix: PREFIXES.NONE['']\n  };\n  UNIT_SYSTEMS.us.ENERGY = {\n    unit: UNITS.BTU,\n    prefix: PREFIXES.BTU['']\n  };\n  UNIT_SYSTEMS.us.POWER = {\n    unit: UNITS.hp,\n    prefix: PREFIXES.NONE['']\n  };\n  UNIT_SYSTEMS.us.PRESSURE = {\n    unit: UNITS.psi,\n    prefix: PREFIXES.NONE['']\n  }; // Add additional unit systems here.\n  // Choose a unit system to seed the auto unit system.\n\n  UNIT_SYSTEMS.auto = JSON.parse(JSON.stringify(UNIT_SYSTEMS.si)); // Set the current unit system\n\n  var currentUnitSystem = UNIT_SYSTEMS.auto;\n  /**\n   * Set a unit system for formatting derived units.\n   * @param {string} [name] The name of the unit system.\n   */\n\n  Unit.setUnitSystem = function (name) {\n    if (hasOwnProperty(UNIT_SYSTEMS, name)) {\n      currentUnitSystem = UNIT_SYSTEMS[name];\n    } else {\n      throw new Error('Unit system ' + name + ' does not exist. Choices are: ' + Object.keys(UNIT_SYSTEMS).join(', '));\n    }\n  };\n  /**\n   * Return the current unit system.\n   * @return {string} The current unit system.\n   */\n\n\n  Unit.getUnitSystem = function () {\n    for (var _key in UNIT_SYSTEMS) {\n      if (hasOwnProperty(UNIT_SYSTEMS, _key)) {\n        if (UNIT_SYSTEMS[_key] === currentUnitSystem) {\n          return _key;\n        }\n      }\n    }\n  };\n  /**\n   * Converters to convert from number to an other numeric type like BigNumber\n   * or Fraction\n   */\n\n\n  Unit.typeConverters = {\n    BigNumber: function BigNumber(x) {\n      return new _BigNumber(x + ''); // stringify to prevent constructor error\n    },\n    Fraction: function Fraction(x) {\n      return new _Fraction(x);\n    },\n    Complex: function Complex(x) {\n      return x;\n    },\n    number: function number(x) {\n      return x;\n    }\n  };\n  /**\n   * Retrieve the right converter function corresponding with this unit's\n   * value\n   *\n   * @memberof Unit\n   * @return {Function}\n   */\n\n  Unit.prototype._numberConverter = function () {\n    var convert = Unit.typeConverters[this.valueType()];\n\n    if (convert) {\n      return convert;\n    }\n\n    throw new TypeError('Unsupported Unit value type \"' + this.valueType() + '\"');\n  };\n  /**\n   * Retrieve the right convertor function corresponding with the type\n   * of provided exampleValue.\n   *\n   * @param {string} type   A string 'number', 'BigNumber', or 'Fraction'\n   *                        In case of an unknown type,\n   * @return {Function}\n   */\n\n\n  Unit._getNumberConverter = function (type) {\n    if (!Unit.typeConverters[type]) {\n      throw new TypeError('Unsupported type \"' + type + '\"');\n    }\n\n    return Unit.typeConverters[type];\n  }; // Add dimensions to each built-in unit\n\n\n  for (var _key2 in UNITS) {\n    if (hasOwnProperty(UNITS, _key2)) {\n      var unit = UNITS[_key2];\n      unit.dimensions = unit.base.dimensions;\n    }\n  } // Create aliases\n\n\n  for (var _name2 in ALIASES) {\n    if (hasOwnProperty(ALIASES, _name2)) {\n      var _unit2 = UNITS[ALIASES[_name2]];\n      var alias = {};\n\n      for (var _key3 in _unit2) {\n        if (hasOwnProperty(_unit2, _key3)) {\n          alias[_key3] = _unit2[_key3];\n        }\n      }\n\n      alias.name = _name2;\n      UNITS[_name2] = alias;\n    }\n  }\n  /**\n   * Checks if a character is a valid latin letter (upper or lower case).\n   * Note that this function can be overridden, for example to allow support of other alphabets.\n   * @param {string} c Tested character\n   */\n\n\n  Unit.isValidAlpha = function isValidAlpha(c) {\n    return /^[a-zA-Z]$/.test(c);\n  };\n\n  function assertUnitNameIsValid(name) {\n    for (var i = 0; i < name.length; i++) {\n      c = name.charAt(i);\n\n      if (i === 0 && !Unit.isValidAlpha(c)) {\n        throw new Error('Invalid unit name (must begin with alpha character): \"' + name + '\"');\n      }\n\n      if (i > 0 && !(Unit.isValidAlpha(c) || isDigit(c))) {\n        throw new Error('Invalid unit name (only alphanumeric characters are allowed): \"' + name + '\"');\n      }\n    }\n  }\n  /**\n   * Wrapper around createUnitSingle.\n   * Example:\n   *  createUnit({\n   *    foo: { },\n   *    bar: {\n   *      definition: 'kg/foo',\n   *      aliases: ['ba', 'barr', 'bars'],\n   *      offset: 200\n   *    },\n   *    baz: '4 bar'\n   *  },\n   *  {\n   *    override: true\n   *  })\n   * @param {object} obj      Object map. Each key becomes a unit which is defined by its value.\n   * @param {object} options\n   */\n\n\n  Unit.createUnit = function (obj, options) {\n    if (typeof obj !== 'object') {\n      throw new TypeError(\"createUnit expects first parameter to be of type 'Object'\");\n    } // Remove all units and aliases we are overriding\n\n\n    if (options && options.override) {\n      for (var _key4 in obj) {\n        if (hasOwnProperty(obj, _key4)) {\n          Unit.deleteUnit(_key4);\n        }\n\n        if (obj[_key4].aliases) {\n          for (var i = 0; i < obj[_key4].aliases.length; i++) {\n            Unit.deleteUnit(obj[_key4].aliases[i]);\n          }\n        }\n      }\n    } // TODO: traverse multiple times until all units have been added\n\n\n    var lastUnit;\n\n    for (var _key5 in obj) {\n      if (hasOwnProperty(obj, _key5)) {\n        lastUnit = Unit.createUnitSingle(_key5, obj[_key5]);\n      }\n    }\n\n    return lastUnit;\n  };\n  /**\n   * Create a user-defined unit and register it with the Unit type.\n   * Example:\n   *  createUnitSingle('knot', '0.514444444 m/s')\n   *  createUnitSingle('acre', new Unit(43560, 'ft^2'))\n   *\n   * @param {string} name      The name of the new unit. Must be unique. Example: 'knot'\n   * @param {string, Unit, Object} definition      Definition of the unit in terms\n   * of existing units. For example, '0.514444444 m / s'. Can be a Unit, a string,\n   * or an Object. If an Object, may have the following properties:\n   *   - definition {string|Unit} The definition of this unit.\n   *   - prefixes {string} \"none\", \"short\", \"long\", \"binary_short\", or \"binary_long\".\n   *     The default is \"none\".\n   *   - aliases {Array} Array of strings. Example: ['knots', 'kt', 'kts']\n   *   - offset {Numeric} An offset to apply when converting from the unit. For\n   *     example, the offset for celsius is 273.15 and the offset for farhenheit\n   *     is 459.67. Default is 0.\n   *   - baseName {string} If the unit's dimension does not match that of any other\n   *     base unit, the name of the newly create base unit. Otherwise, this property\n   *     has no effect.\n   *\n   * @param {Object} options   (optional) An object containing any of the following\n   * properties:\n   *   - override {boolean} Whether this unit should be allowed to override existing\n   *     units.\n   *\n   * @return {Unit}\n   */\n\n\n  Unit.createUnitSingle = function (name, obj, options) {\n    if (typeof obj === 'undefined' || obj === null) {\n      obj = {};\n    }\n\n    if (typeof name !== 'string') {\n      throw new TypeError(\"createUnitSingle expects first parameter to be of type 'string'\");\n    } // Check collisions with existing units\n\n\n    if (hasOwnProperty(UNITS, name)) {\n      throw new Error('Cannot create unit \"' + name + '\": a unit with that name already exists');\n    } // TODO: Validate name for collisions with other built-in functions (like abs or cos, for example), and for acceptable variable names. For example, '42' is probably not a valid unit. Nor is '%', since it is also an operator.\n\n\n    assertUnitNameIsValid(name);\n    var defUnit = null; // The Unit from which the new unit will be created.\n\n    var aliases = [];\n    var offset = 0;\n    var definition;\n    var prefixes;\n    var baseName;\n\n    if (obj && obj.type === 'Unit') {\n      defUnit = obj.clone();\n    } else if (typeof obj === 'string') {\n      if (obj !== '') {\n        definition = obj;\n      }\n    } else if (typeof obj === 'object') {\n      definition = obj.definition;\n      prefixes = obj.prefixes;\n      offset = obj.offset;\n      baseName = obj.baseName;\n\n      if (obj.aliases) {\n        aliases = obj.aliases.valueOf(); // aliases could be a Matrix, so convert to Array\n      }\n    } else {\n      throw new TypeError('Cannot create unit \"' + name + '\" from \"' + obj.toString() + '\": expecting \"string\" or \"Unit\" or \"Object\"');\n    }\n\n    if (aliases) {\n      for (var i = 0; i < aliases.length; i++) {\n        if (hasOwnProperty(UNITS, aliases[i])) {\n          throw new Error('Cannot create alias \"' + aliases[i] + '\": a unit with that name already exists');\n        }\n      }\n    }\n\n    if (definition && typeof definition === 'string' && !defUnit) {\n      try {\n        defUnit = Unit.parse(definition, {\n          allowNoUnits: true\n        });\n      } catch (ex) {\n        ex.message = 'Could not create unit \"' + name + '\" from \"' + definition + '\": ' + ex.message;\n        throw ex;\n      }\n    } else if (definition && definition.type === 'Unit') {\n      defUnit = definition.clone();\n    }\n\n    aliases = aliases || [];\n    offset = offset || 0;\n\n    if (prefixes && prefixes.toUpperCase) {\n      prefixes = PREFIXES[prefixes.toUpperCase()] || PREFIXES.NONE;\n    } else {\n      prefixes = PREFIXES.NONE;\n    } // If defUnit is null, it is because the user did not\n    // specify a defintion. So create a new base dimension.\n\n\n    var newUnit = {};\n\n    if (!defUnit) {\n      // Add a new base dimension\n      baseName = baseName || name + '_STUFF'; // foo --> foo_STUFF, or the essence of foo\n\n      if (BASE_DIMENSIONS.indexOf(baseName) >= 0) {\n        throw new Error('Cannot create new base unit \"' + name + '\": a base unit with that name already exists (and cannot be overridden)');\n      }\n\n      BASE_DIMENSIONS.push(baseName); // Push 0 onto existing base units\n\n      for (var b in BASE_UNITS) {\n        if (hasOwnProperty(BASE_UNITS, b)) {\n          BASE_UNITS[b].dimensions[BASE_DIMENSIONS.length - 1] = 0;\n        }\n      } // Add the new base unit\n\n\n      var newBaseUnit = {\n        dimensions: []\n      };\n\n      for (var _i6 = 0; _i6 < BASE_DIMENSIONS.length; _i6++) {\n        newBaseUnit.dimensions[_i6] = 0;\n      }\n\n      newBaseUnit.dimensions[BASE_DIMENSIONS.length - 1] = 1;\n      newBaseUnit.key = baseName;\n      BASE_UNITS[baseName] = newBaseUnit;\n      newUnit = {\n        name,\n        value: 1,\n        dimensions: BASE_UNITS[baseName].dimensions.slice(0),\n        prefixes,\n        offset,\n        base: BASE_UNITS[baseName]\n      };\n      currentUnitSystem[baseName] = {\n        unit: newUnit,\n        prefix: PREFIXES.NONE['']\n      };\n    } else {\n      newUnit = {\n        name,\n        value: defUnit.value,\n        dimensions: defUnit.dimensions.slice(0),\n        prefixes,\n        offset\n      }; // Create a new base if no matching base exists\n\n      var anyMatch = false;\n\n      for (var _i7 in BASE_UNITS) {\n        if (hasOwnProperty(BASE_UNITS, _i7)) {\n          var match = true;\n\n          for (var j = 0; j < BASE_DIMENSIONS.length; j++) {\n            if (Math.abs((newUnit.dimensions[j] || 0) - (BASE_UNITS[_i7].dimensions[j] || 0)) > 1e-12) {\n              match = false;\n              break;\n            }\n          }\n\n          if (match) {\n            anyMatch = true;\n            newUnit.base = BASE_UNITS[_i7];\n            break;\n          }\n        }\n      }\n\n      if (!anyMatch) {\n        baseName = baseName || name + '_STUFF'; // foo --> foo_STUFF, or the essence of foo\n        // Add the new base unit\n\n        var _newBaseUnit = {\n          dimensions: defUnit.dimensions.slice(0)\n        };\n        _newBaseUnit.key = baseName;\n        BASE_UNITS[baseName] = _newBaseUnit;\n        currentUnitSystem[baseName] = {\n          unit: newUnit,\n          prefix: PREFIXES.NONE['']\n        };\n        newUnit.base = BASE_UNITS[baseName];\n      }\n    }\n\n    Unit.UNITS[name] = newUnit;\n\n    for (var _i8 = 0; _i8 < aliases.length; _i8++) {\n      var aliasName = aliases[_i8];\n      var _alias = {};\n\n      for (var _key6 in newUnit) {\n        if (hasOwnProperty(newUnit, _key6)) {\n          _alias[_key6] = newUnit[_key6];\n        }\n      }\n\n      _alias.name = aliasName;\n      Unit.UNITS[aliasName] = _alias;\n    } // delete the memoization cache, since adding a new unit to the array\n    // invalidates all old results\n\n\n    delete _findUnit.cache;\n    return new Unit(null, name);\n  };\n\n  Unit.deleteUnit = function (name) {\n    delete Unit.UNITS[name];\n  }; // expose arrays with prefixes, dimensions, units, systems\n\n\n  Unit.PREFIXES = PREFIXES;\n  Unit.BASE_DIMENSIONS = BASE_DIMENSIONS;\n  Unit.BASE_UNITS = BASE_UNITS;\n  Unit.UNIT_SYSTEMS = UNIT_SYSTEMS;\n  Unit.UNITS = UNITS;\n  return Unit;\n}, {\n  isClass: true\n});","map":{"version":3,"names":["_extends","_defineProperty","ownKeys","object","enumerableOnly","keys","Object","getOwnPropertySymbols","symbols","filter","sym","getOwnPropertyDescriptor","enumerable","push","apply","_objectSpread","target","i","arguments","length","source","forEach","key","getOwnPropertyDescriptors","defineProperties","defineProperty","isComplex","isUnit","typeOf","factory","memoize","endsWith","clone","hasOwnProperty","createBigNumberPi","createPi","name","dependencies","createUnitClass","_ref","on","config","addScalar","subtract","multiplyScalar","divideScalar","pow","abs","fix","round","equal","isNumeric","format","number","Complex","BigNumber","_BigNumber","Fraction","_Fraction","toNumber","Unit","value","Error","undefined","TypeError","u","parse","units","dimensions","BASE_DIMENSIONS","_normalize","fixPrefix","skipAutomaticSimplification","prototype","constructor","type","text","index","c","skipWhitespace","next","isDigitDot","isDigit","charAt","revert","oldIndex","parseNumber","tentativeNumber","tentativeIndex","parseUnit","unitName","isValidAlpha","firstC","parseCharacter","toFind","str","options","unit","powerMultiplierCurrent","expectingUnit","valueStr","err","parseFloat","powerMultiplierStack","powerMultiplierStackProduct","uStr","oldC","SyntaxError","toString","res","_findUnit","power","p","prefix","pop","base","baseDim","UNIT_SYSTEMS","auto","allowNoUnits","slice","valueType","_isDerived","Math","convert","_getNumberConverter","unitValue","unitPrefixValue","unitPower","_denormalize","prefixValue","UNITS","prefixes","_name","_unit","prefixLen","prefixName","substring","_prefix","hasher","args","limit","isValuelessUnit","hasBase","BASE_UNITS","equalBase","other","equals","multiply","_other","_i","inverted","valThis","valOther","getNumericIfUnitless","divideInto","numerator","divide","_i2","_i3","NONE","predictable","ret","offset","_numberConverter","nominalOffset","unitOffset","W","to","valuelessUnit","concat","thisUnitValue","thisNominalOffset","thisUnitOffset","otherUnitValue","otherNominalOffset","otherUnitOffset","toNumeric","toJSON","mathjs","formatUnits","fromJSON","json","valueOf","simplify","proposedUnitList","matchingBase","currentUnitSystem","matchingUnit","missingBaseDim","toSI","si","strNum","strDen","nNum","nDen","_i4","substr","simp","isImaginary","re","VAR","VA","_bestPrefix","unitStr","absValue","absUnitValue","bestPrefix","bestDiff","log","LN10","scientific","diff","splitUnit","parts","x","xNumeric","xRounded","xFixed","isNearlyEqual","y","testSum","_i5","PREFIXES","SHORT","da","h","k","M","G","T","P","E","Z","Y","d","m","n","f","a","z","LONG","deca","hecto","kilo","mega","giga","tera","peta","exa","zetta","yotta","deci","centi","milli","micro","nano","pico","femto","atto","zepto","yocto","SQUARED","CUBIC","BINARY_SHORT_SI","BINARY_SHORT_IEC","Ki","Mi","Gi","Ti","Pi","Ei","Zi","Yi","BINARY_LONG_SI","BINARY_LONG_IEC","kibi","mebi","gibi","tebi","pebi","exi","zebi","yobi","BTU","MM","SHORTLONG","BINARY_SHORT","BINARY_LONG","MASS","LENGTH","TIME","CURRENT","TEMPERATURE","LUMINOUS_INTENSITY","AMOUNT_OF_SUBSTANCE","FORCE","SURFACE","VOLUME","ENERGY","POWER","PRESSURE","ELECTRIC_CHARGE","ELECTRIC_CAPACITANCE","ELECTRIC_POTENTIAL","ELECTRIC_RESISTANCE","ELECTRIC_INDUCTANCE","ELECTRIC_CONDUCTANCE","MAGNETIC_FLUX","MAGNETIC_FLUX_DENSITY","FREQUENCY","ANGLE","BIT","BASE_UNIT_NONE","UNIT_NONE","map","meter","inch","foot","yard","mile","link","rod","chain","angstrom","in","ft","yd","mi","li","rd","ch","mil","m2","sqin","sqft","sqyd","sqmi","sqrd","sqch","sqmil","acre","hectare","m3","L","l","litre","cuin","cuft","cuyd","teaspoon","tablespoon","drop","gtt","minim","fluiddram","fluidounce","gill","cc","cup","pint","quart","gallon","beerbarrel","oilbarrel","hogshead","fldr","floz","gi","cp","pt","qt","gal","bbl","obl","g","gram","ton","t","tonne","grain","dram","ounce","poundmass","hundredweight","stick","stone","gr","dr","oz","lbm","cwt","s","min","second","sec","minute","hour","day","week","month","year","decade","century","millennium","hertz","reciprocal","Hz","rad","radian","deg","degree","grad","gradian","cycle","arcsec","arcmin","A","ampere","K","degC","degF","degR","kelvin","celsius","fahrenheit","rankine","mol","mole","cd","candela","N","newton","dyn","dyne","lbf","poundforce","kip","kilogramforce","J","joule","erg","Wh","eV","electronvolt","watt","hp","I","Pa","psi","atm","bar","torr","mmHg","mmH2O","cmH2O","coulomb","C","farad","F","volt","V","ohm","henry","H","siemens","S","weber","Wb","tesla","b","bits","B","bytes","ALIASES","meters","inches","feet","yards","miles","links","rods","chains","angstroms","lt","litres","liter","liters","teaspoons","tablespoons","minims","fluiddrams","fluidounces","gills","cups","pints","quarts","gallons","beerbarrels","oilbarrels","hogsheads","gtts","grams","tons","tonnes","grains","drams","ounces","poundmasses","hundredweights","sticks","lb","lbs","kips","kgf","acres","hectares","sqfeet","sqyard","sqmile","sqmiles","mmhg","mmh2o","cmh2o","seconds","secs","minutes","mins","hours","hr","hrs","days","weeks","months","years","decades","centuries","millennia","radians","degrees","gradians","cycles","arcsecond","arcseconds","arcminute","arcminutes","BTUs","watts","joules","amperes","coulombs","volts","ohms","farads","webers","teslas","electronvolts","moles","bit","byte","calculateAngleValues","pi","div","times","PI","curr","prev","cgs","JSON","stringify","us","setUnitSystem","join","getUnitSystem","_key","typeConverters","_key2","_name2","_unit2","alias","_key3","test","assertUnitNameIsValid","createUnit","obj","override","_key4","deleteUnit","aliases","lastUnit","_key5","createUnitSingle","defUnit","definition","baseName","ex","message","toUpperCase","newUnit","indexOf","newBaseUnit","_i6","anyMatch","_i7","match","j","_newBaseUnit","_i8","aliasName","_alias","_key6","cache","isClass"],"sources":["C:/Users/User/Documents/PROYECTOS PROGRAMACION/calculadora/node_modules/mathjs/lib/esm/type/unit/Unit.js"],"sourcesContent":["import _extends from \"@babel/runtime/helpers/extends\";\nimport _defineProperty from \"@babel/runtime/helpers/defineProperty\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys(Object(source), !0).forEach(function (key) { _defineProperty(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }\n\nimport { isComplex, isUnit, typeOf } from '../../utils/is.js';\nimport { factory } from '../../utils/factory.js';\nimport { memoize } from '../../utils/function.js';\nimport { endsWith } from '../../utils/string.js';\nimport { clone, hasOwnProperty } from '../../utils/object.js';\nimport { createBigNumberPi as createPi } from '../../utils/bignumber/constants.js';\nvar name = 'Unit';\nvar dependencies = ['?on', 'config', 'addScalar', 'subtract', 'multiplyScalar', 'divideScalar', 'pow', 'abs', 'fix', 'round', 'equal', 'isNumeric', 'format', 'number', 'Complex', 'BigNumber', 'Fraction'];\nexport var createUnitClass = /* #__PURE__ */factory(name, dependencies, _ref => {\n  var {\n    on,\n    config,\n    addScalar,\n    subtract,\n    multiplyScalar,\n    divideScalar,\n    pow,\n    abs,\n    fix,\n    round,\n    equal,\n    isNumeric,\n    format,\n    number,\n    Complex,\n    BigNumber: _BigNumber,\n    Fraction: _Fraction\n  } = _ref;\n  var toNumber = number;\n  /**\n   * A unit can be constructed in the following ways:\n   *\n   *     const a = new Unit(value, name)\n   *     const b = new Unit(null, name)\n   *     const c = Unit.parse(str)\n   *\n   * Example usage:\n   *\n   *     const a = new Unit(5, 'cm')               // 50 mm\n   *     const b = Unit.parse('23 kg')             // 23 kg\n   *     const c = math.in(a, new Unit(null, 'm')  // 0.05 m\n   *     const d = new Unit(9.81, \"m/s^2\")         // 9.81 m/s^2\n   *\n   * @class Unit\n   * @constructor Unit\n   * @param {number | BigNumber | Fraction | Complex | boolean} [value]  A value like 5.2\n   * @param {string} [name]   A unit name like \"cm\" or \"inch\", or a derived unit of the form: \"u1[^ex1] [u2[^ex2] ...] [/ u3[^ex3] [u4[^ex4]]]\", such as \"kg m^2/s^2\", where each unit appearing after the forward slash is taken to be in the denominator. \"kg m^2 s^-2\" is a synonym and is also acceptable. Any of the units can include a prefix.\n   */\n\n  function Unit(value, name) {\n    if (!(this instanceof Unit)) {\n      throw new Error('Constructor must be called with the new operator');\n    }\n\n    if (!(value === null || value === undefined || isNumeric(value) || isComplex(value))) {\n      throw new TypeError('First parameter in Unit constructor must be number, BigNumber, Fraction, Complex, or undefined');\n    }\n\n    if (name !== undefined && (typeof name !== 'string' || name === '')) {\n      throw new TypeError('Second parameter in Unit constructor must be a string');\n    }\n\n    if (name !== undefined) {\n      var u = Unit.parse(name);\n      this.units = u.units;\n      this.dimensions = u.dimensions;\n    } else {\n      this.units = [];\n      this.dimensions = [];\n\n      for (var i = 0; i < BASE_DIMENSIONS.length; i++) {\n        this.dimensions[i] = 0;\n      }\n    }\n\n    this.value = value !== undefined && value !== null ? this._normalize(value) : null;\n    this.fixPrefix = false; // if true, function format will not search for the\n    // best prefix but leave it as initially provided.\n    // fixPrefix is set true by the method Unit.to\n    // The justification behind this is that if the constructor is explicitly called,\n    // the caller wishes the units to be returned exactly as he supplied.\n\n    this.skipAutomaticSimplification = true;\n  }\n  /**\n   * Attach type information\n   */\n\n\n  Object.defineProperty(Unit, 'name', {\n    value: 'Unit'\n  });\n  Unit.prototype.constructor = Unit;\n  Unit.prototype.type = 'Unit';\n  Unit.prototype.isUnit = true; // private variables and functions for the Unit parser\n\n  var text, index, c;\n\n  function skipWhitespace() {\n    while (c === ' ' || c === '\\t') {\n      next();\n    }\n  }\n\n  function isDigitDot(c) {\n    return c >= '0' && c <= '9' || c === '.';\n  }\n\n  function isDigit(c) {\n    return c >= '0' && c <= '9';\n  }\n\n  function next() {\n    index++;\n    c = text.charAt(index);\n  }\n\n  function revert(oldIndex) {\n    index = oldIndex;\n    c = text.charAt(index);\n  }\n\n  function parseNumber() {\n    var number = '';\n    var oldIndex = index;\n\n    if (c === '+') {\n      next();\n    } else if (c === '-') {\n      number += c;\n      next();\n    }\n\n    if (!isDigitDot(c)) {\n      // a + or - must be followed by a digit\n      revert(oldIndex);\n      return null;\n    } // get number, can have a single dot\n\n\n    if (c === '.') {\n      number += c;\n      next();\n\n      if (!isDigit(c)) {\n        // this is no legal number, it is just a dot\n        revert(oldIndex);\n        return null;\n      }\n    } else {\n      while (isDigit(c)) {\n        number += c;\n        next();\n      }\n\n      if (c === '.') {\n        number += c;\n        next();\n      }\n    }\n\n    while (isDigit(c)) {\n      number += c;\n      next();\n    } // check for exponential notation like \"2.3e-4\" or \"1.23e50\"\n\n\n    if (c === 'E' || c === 'e') {\n      // The grammar branches here. This could either be part of an exponent or the start of a unit that begins with the letter e, such as \"4exabytes\"\n      var tentativeNumber = '';\n      var tentativeIndex = index;\n      tentativeNumber += c;\n      next();\n\n      if (c === '+' || c === '-') {\n        tentativeNumber += c;\n        next();\n      } // Scientific notation MUST be followed by an exponent (otherwise we assume it is not scientific notation)\n\n\n      if (!isDigit(c)) {\n        // The e or E must belong to something else, so return the number without the e or E.\n        revert(tentativeIndex);\n        return number;\n      } // We can now safely say that this is scientific notation.\n\n\n      number = number + tentativeNumber;\n\n      while (isDigit(c)) {\n        number += c;\n        next();\n      }\n    }\n\n    return number;\n  }\n\n  function parseUnit() {\n    var unitName = ''; // Alphanumeric characters only; matches [a-zA-Z0-9]\n\n    while (isDigit(c) || Unit.isValidAlpha(c)) {\n      unitName += c;\n      next();\n    } // Must begin with [a-zA-Z]\n\n\n    var firstC = unitName.charAt(0);\n\n    if (Unit.isValidAlpha(firstC)) {\n      return unitName;\n    } else {\n      return null;\n    }\n  }\n\n  function parseCharacter(toFind) {\n    if (c === toFind) {\n      next();\n      return toFind;\n    } else {\n      return null;\n    }\n  }\n  /**\n   * Parse a string into a unit. The value of the unit is parsed as number,\n   * BigNumber, or Fraction depending on the math.js config setting `number`.\n   *\n   * Throws an exception if the provided string does not contain a valid unit or\n   * cannot be parsed.\n   * @memberof Unit\n   * @param {string} str        A string like \"5.2 inch\", \"4e2 cm/s^2\"\n   * @return {Unit} unit\n   */\n\n\n  Unit.parse = function (str, options) {\n    options = options || {};\n    text = str;\n    index = -1;\n    c = '';\n\n    if (typeof text !== 'string') {\n      throw new TypeError('Invalid argument in Unit.parse, string expected');\n    }\n\n    var unit = new Unit();\n    unit.units = [];\n    var powerMultiplierCurrent = 1;\n    var expectingUnit = false; // A unit should follow this pattern:\n    // [number] ...[ [*/] unit[^number] ]\n    // unit[^number] ... [ [*/] unit[^number] ]\n    // Rules:\n    // number is any floating point number.\n    // unit is any alphanumeric string beginning with an alpha. Units with names like e3 should be avoided because they look like the exponent of a floating point number!\n    // The string may optionally begin with a number.\n    // Each unit may optionally be followed by ^number.\n    // Whitespace or a forward slash is recommended between consecutive units, although the following technically is parseable:\n    //   2m^2kg/s^2\n    // it is not good form. If a unit starts with e, then it could be confused as a floating point number:\n    //   4erg\n\n    next();\n    skipWhitespace(); // Optional number at the start of the string\n\n    var valueStr = parseNumber();\n    var value = null;\n\n    if (valueStr) {\n      if (config.number === 'BigNumber') {\n        value = new _BigNumber(valueStr);\n      } else if (config.number === 'Fraction') {\n        try {\n          // not all numbers can be turned in Fractions, for example very small numbers not\n          value = new _Fraction(valueStr);\n        } catch (err) {\n          value = parseFloat(valueStr);\n        }\n      } else {\n        // number\n        value = parseFloat(valueStr);\n      }\n\n      skipWhitespace(); // Whitespace is not required here\n      // handle multiplication or division right after the value, like '1/s'\n\n      if (parseCharacter('*')) {\n        powerMultiplierCurrent = 1;\n        expectingUnit = true;\n      } else if (parseCharacter('/')) {\n        powerMultiplierCurrent = -1;\n        expectingUnit = true;\n      }\n    } // Stack to keep track of powerMultipliers applied to each parentheses group\n\n\n    var powerMultiplierStack = []; // Running product of all elements in powerMultiplierStack\n\n    var powerMultiplierStackProduct = 1;\n\n    while (true) {\n      skipWhitespace(); // Check for and consume opening parentheses, pushing powerMultiplierCurrent to the stack\n      // A '(' will always appear directly before a unit.\n\n      while (c === '(') {\n        powerMultiplierStack.push(powerMultiplierCurrent);\n        powerMultiplierStackProduct *= powerMultiplierCurrent;\n        powerMultiplierCurrent = 1;\n        next();\n        skipWhitespace();\n      } // Is there something here?\n\n\n      var uStr = void 0;\n\n      if (c) {\n        var oldC = c;\n        uStr = parseUnit();\n\n        if (uStr === null) {\n          throw new SyntaxError('Unexpected \"' + oldC + '\" in \"' + text + '\" at index ' + index.toString());\n        }\n      } else {\n        // End of input.\n        break;\n      } // Verify the unit exists and get the prefix (if any)\n\n\n      var res = _findUnit(uStr);\n\n      if (res === null) {\n        // Unit not found.\n        throw new SyntaxError('Unit \"' + uStr + '\" not found.');\n      }\n\n      var power = powerMultiplierCurrent * powerMultiplierStackProduct; // Is there a \"^ number\"?\n\n      skipWhitespace();\n\n      if (parseCharacter('^')) {\n        skipWhitespace();\n        var p = parseNumber();\n\n        if (p === null) {\n          // No valid number found for the power!\n          throw new SyntaxError('In \"' + str + '\", \"^\" must be followed by a floating-point number');\n        }\n\n        power *= p;\n      } // Add the unit to the list\n\n\n      unit.units.push({\n        unit: res.unit,\n        prefix: res.prefix,\n        power\n      });\n\n      for (var i = 0; i < BASE_DIMENSIONS.length; i++) {\n        unit.dimensions[i] += (res.unit.dimensions[i] || 0) * power;\n      } // Check for and consume closing parentheses, popping from the stack.\n      // A ')' will always follow a unit.\n\n\n      skipWhitespace();\n\n      while (c === ')') {\n        if (powerMultiplierStack.length === 0) {\n          throw new SyntaxError('Unmatched \")\" in \"' + text + '\" at index ' + index.toString());\n        }\n\n        powerMultiplierStackProduct /= powerMultiplierStack.pop();\n        next();\n        skipWhitespace();\n      } // \"*\" and \"/\" should mean we are expecting something to come next.\n      // Is there a forward slash? If so, negate powerMultiplierCurrent. The next unit or paren group is in the denominator.\n\n\n      expectingUnit = false;\n\n      if (parseCharacter('*')) {\n        // explicit multiplication\n        powerMultiplierCurrent = 1;\n        expectingUnit = true;\n      } else if (parseCharacter('/')) {\n        // division\n        powerMultiplierCurrent = -1;\n        expectingUnit = true;\n      } else {\n        // implicit multiplication\n        powerMultiplierCurrent = 1;\n      } // Replace the unit into the auto unit system\n\n\n      if (res.unit.base) {\n        var baseDim = res.unit.base.key;\n        UNIT_SYSTEMS.auto[baseDim] = {\n          unit: res.unit,\n          prefix: res.prefix\n        };\n      }\n    } // Has the string been entirely consumed?\n\n\n    skipWhitespace();\n\n    if (c) {\n      throw new SyntaxError('Could not parse: \"' + str + '\"');\n    } // Is there a trailing slash?\n\n\n    if (expectingUnit) {\n      throw new SyntaxError('Trailing characters: \"' + str + '\"');\n    } // Is the parentheses stack empty?\n\n\n    if (powerMultiplierStack.length !== 0) {\n      throw new SyntaxError('Unmatched \"(\" in \"' + text + '\"');\n    } // Are there any units at all?\n\n\n    if (unit.units.length === 0 && !options.allowNoUnits) {\n      throw new SyntaxError('\"' + str + '\" contains no units');\n    }\n\n    unit.value = value !== undefined ? unit._normalize(value) : null;\n    return unit;\n  };\n  /**\n   * create a copy of this unit\n   * @memberof Unit\n   * @return {Unit} Returns a cloned version of the unit\n   */\n\n\n  Unit.prototype.clone = function () {\n    var unit = new Unit();\n    unit.fixPrefix = this.fixPrefix;\n    unit.skipAutomaticSimplification = this.skipAutomaticSimplification;\n    unit.value = clone(this.value);\n    unit.dimensions = this.dimensions.slice(0);\n    unit.units = [];\n\n    for (var i = 0; i < this.units.length; i++) {\n      unit.units[i] = {};\n\n      for (var p in this.units[i]) {\n        if (hasOwnProperty(this.units[i], p)) {\n          unit.units[i][p] = this.units[i][p];\n        }\n      }\n    }\n\n    return unit;\n  };\n  /**\n   * Return the type of the value of this unit\n   *\n   * @memberof Unit\n   * @ return {string} type of the value of the unit\n   */\n\n\n  Unit.prototype.valueType = function () {\n    return typeOf(this.value);\n  };\n  /**\n   * Return whether the unit is derived (such as m/s, or cm^2, but not N)\n   * @memberof Unit\n   * @return {boolean} True if the unit is derived\n   */\n\n\n  Unit.prototype._isDerived = function () {\n    if (this.units.length === 0) {\n      return false;\n    }\n\n    return this.units.length > 1 || Math.abs(this.units[0].power - 1.0) > 1e-15;\n  };\n  /**\n   * Normalize a value, based on its currently set unit(s)\n   * @memberof Unit\n   * @param {number | BigNumber | Fraction | boolean} value\n   * @return {number | BigNumber | Fraction | boolean} normalized value\n   * @private\n   */\n\n\n  Unit.prototype._normalize = function (value) {\n    if (value === null || value === undefined || this.units.length === 0) {\n      return value;\n    }\n\n    var res = value;\n\n    var convert = Unit._getNumberConverter(typeOf(value)); // convert to Fraction or BigNumber if needed\n\n\n    for (var i = 0; i < this.units.length; i++) {\n      var unitValue = convert(this.units[i].unit.value);\n      var unitPrefixValue = convert(this.units[i].prefix.value);\n      var unitPower = convert(this.units[i].power);\n      res = multiplyScalar(res, pow(multiplyScalar(unitValue, unitPrefixValue), unitPower));\n    }\n\n    return res;\n  };\n  /**\n   * Denormalize a value, based on its currently set unit(s)\n   * @memberof Unit\n   * @param {number} value\n   * @param {number} [prefixValue]    Optional prefix value to be used (ignored if this is a derived unit)\n   * @return {number} denormalized value\n   * @private\n   */\n\n\n  Unit.prototype._denormalize = function (value, prefixValue) {\n    if (value === null || value === undefined || this.units.length === 0) {\n      return value;\n    }\n\n    var res = value;\n\n    var convert = Unit._getNumberConverter(typeOf(value)); // convert to Fraction or BigNumber if needed\n\n\n    for (var i = 0; i < this.units.length; i++) {\n      var unitValue = convert(this.units[i].unit.value);\n      var unitPrefixValue = convert(this.units[i].prefix.value);\n      var unitPower = convert(this.units[i].power);\n      res = divideScalar(res, pow(multiplyScalar(unitValue, unitPrefixValue), unitPower));\n    }\n\n    return res;\n  };\n  /**\n   * Find a unit from a string\n   * @memberof Unit\n   * @param {string} str              A string like 'cm' or 'inch'\n   * @returns {Object | null} result  When found, an object with fields unit and\n   *                                  prefix is returned. Else, null is returned.\n   * @private\n   */\n\n\n  var _findUnit = memoize(str => {\n    // First, match units names exactly. For example, a user could define 'mm' as 10^-4 m, which is silly, but then we would want 'mm' to match the user-defined unit.\n    if (hasOwnProperty(UNITS, str)) {\n      var unit = UNITS[str];\n      var prefix = unit.prefixes[''];\n      return {\n        unit,\n        prefix\n      };\n    }\n\n    for (var _name in UNITS) {\n      if (hasOwnProperty(UNITS, _name)) {\n        if (endsWith(str, _name)) {\n          var _unit = UNITS[_name];\n          var prefixLen = str.length - _name.length;\n          var prefixName = str.substring(0, prefixLen);\n\n          var _prefix = hasOwnProperty(_unit.prefixes, prefixName) ? _unit.prefixes[prefixName] : undefined;\n\n          if (_prefix !== undefined) {\n            // store unit, prefix, and value\n            return {\n              unit: _unit,\n              prefix: _prefix\n            };\n          }\n        }\n      }\n    }\n\n    return null;\n  }, {\n    hasher: args => args[0],\n    limit: 100\n  });\n  /**\n   * Test if the given expression is a unit.\n   * The unit can have a prefix but cannot have a value.\n   * @memberof Unit\n   * @param {string} name   A string to be tested whether it is a value less unit.\n   *                        The unit can have prefix, like \"cm\"\n   * @return {boolean}      true if the given string is a unit\n   */\n\n\n  Unit.isValuelessUnit = function (name) {\n    return _findUnit(name) !== null;\n  };\n  /**\n   * check if this unit has given base unit\n   * If this unit is a derived unit, this will ALWAYS return false, since by definition base units are not derived.\n   * @memberof Unit\n   * @param {BASE_UNITS | string | undefined} base\n   */\n\n\n  Unit.prototype.hasBase = function (base) {\n    if (typeof base === 'string') {\n      base = BASE_UNITS[base];\n    }\n\n    if (!base) {\n      return false;\n    } // All dimensions must be the same\n\n\n    for (var i = 0; i < BASE_DIMENSIONS.length; i++) {\n      if (Math.abs((this.dimensions[i] || 0) - (base.dimensions[i] || 0)) > 1e-12) {\n        return false;\n      }\n    }\n\n    return true;\n  };\n  /**\n   * Check if this unit has a base or bases equal to another base or bases\n   * For derived units, the exponent on each base also must match\n   * @memberof Unit\n   * @param {Unit} other\n   * @return {boolean} true if equal base\n   */\n\n\n  Unit.prototype.equalBase = function (other) {\n    // All dimensions must be the same\n    for (var i = 0; i < BASE_DIMENSIONS.length; i++) {\n      if (Math.abs((this.dimensions[i] || 0) - (other.dimensions[i] || 0)) > 1e-12) {\n        return false;\n      }\n    }\n\n    return true;\n  };\n  /**\n   * Check if this unit equals another unit\n   * @memberof Unit\n   * @param {Unit} other\n   * @return {boolean} true if both units are equal\n   */\n\n\n  Unit.prototype.equals = function (other) {\n    return this.equalBase(other) && equal(this.value, other.value);\n  };\n  /**\n   * Multiply this unit with another one or with a scalar\n   * @memberof Unit\n   * @param {Unit} other\n   * @return {Unit} product of this unit and the other unit\n   */\n\n\n  Unit.prototype.multiply = function (_other) {\n    var res = this.clone();\n    var other = isUnit(_other) ? _other : new Unit(_other);\n\n    for (var i = 0; i < BASE_DIMENSIONS.length; i++) {\n      // Dimensions arrays may be of different lengths. Default to 0.\n      res.dimensions[i] = (this.dimensions[i] || 0) + (other.dimensions[i] || 0);\n    } // Append other's units list onto res\n\n\n    for (var _i = 0; _i < other.units.length; _i++) {\n      // Make a shallow copy of every unit\n      var inverted = _objectSpread({}, other.units[_i]);\n\n      res.units.push(inverted);\n    } // If at least one operand has a value, then the result should also have a value\n\n\n    if (this.value !== null || other.value !== null) {\n      var valThis = this.value === null ? this._normalize(1) : this.value;\n      var valOther = other.value === null ? other._normalize(1) : other.value;\n      res.value = multiplyScalar(valThis, valOther);\n    } else {\n      res.value = null;\n    }\n\n    if (isUnit(_other)) {\n      res.skipAutomaticSimplification = false;\n    }\n\n    return getNumericIfUnitless(res);\n  };\n  /**\n   * Divide a number by this unit\n   *\n   * @memberof Unit\n   * @param {numeric} numerator\n   * @param {unit} result of dividing numerator by this unit\n   */\n\n\n  Unit.prototype.divideInto = function (numerator) {\n    return new Unit(numerator).divide(this);\n  };\n  /**\n   * Divide this unit by another one\n   * @memberof Unit\n   * @param {Unit | numeric} other\n   * @return {Unit} result of dividing this unit by the other unit\n   */\n\n\n  Unit.prototype.divide = function (_other) {\n    var res = this.clone();\n    var other = isUnit(_other) ? _other : new Unit(_other);\n\n    for (var i = 0; i < BASE_DIMENSIONS.length; i++) {\n      // Dimensions arrays may be of different lengths. Default to 0.\n      res.dimensions[i] = (this.dimensions[i] || 0) - (other.dimensions[i] || 0);\n    } // Invert and append other's units list onto res\n\n\n    for (var _i2 = 0; _i2 < other.units.length; _i2++) {\n      // Make a shallow copy of every unit\n      var inverted = _objectSpread(_objectSpread({}, other.units[_i2]), {}, {\n        power: -other.units[_i2].power\n      });\n\n      res.units.push(inverted);\n    } // If at least one operand has a value, the result should have a value\n\n\n    if (this.value !== null || other.value !== null) {\n      var valThis = this.value === null ? this._normalize(1) : this.value;\n      var valOther = other.value === null ? other._normalize(1) : other.value;\n      res.value = divideScalar(valThis, valOther);\n    } else {\n      res.value = null;\n    }\n\n    if (isUnit(_other)) {\n      res.skipAutomaticSimplification = false;\n    }\n\n    return getNumericIfUnitless(res);\n  };\n  /**\n   * Calculate the power of a unit\n   * @memberof Unit\n   * @param {number | Fraction | BigNumber} p\n   * @returns {Unit}      The result: this^p\n   */\n\n\n  Unit.prototype.pow = function (p) {\n    var res = this.clone();\n\n    for (var i = 0; i < BASE_DIMENSIONS.length; i++) {\n      // Dimensions arrays may be of different lengths. Default to 0.\n      res.dimensions[i] = (this.dimensions[i] || 0) * p;\n    } // Adjust the power of each unit in the list\n\n\n    for (var _i3 = 0; _i3 < res.units.length; _i3++) {\n      res.units[_i3].power *= p;\n    }\n\n    if (res.value !== null) {\n      res.value = pow(res.value, p); // only allow numeric output, we don't want to return a Complex number\n      // if (!isNumeric(res.value)) {\n      //  res.value = NaN\n      // }\n      // Update: Complex supported now\n    } else {\n      res.value = null;\n    }\n\n    res.skipAutomaticSimplification = false;\n    return getNumericIfUnitless(res);\n  };\n  /**\n   * Return the numeric value of this unit if it is dimensionless, has a value, and config.predictable == false; or the original unit otherwise\n   * @param {Unit} unit\n   * @returns {number | Fraction | BigNumber | Unit}  The numeric value of the unit if conditions are met, or the original unit otherwise\n   */\n\n\n  function getNumericIfUnitless(unit) {\n    if (unit.equalBase(BASE_UNITS.NONE) && unit.value !== null && !config.predictable) {\n      return unit.value;\n    } else {\n      return unit;\n    }\n  }\n  /**\n   * Calculate the absolute value of a unit\n   * @memberof Unit\n   * @param {number | Fraction | BigNumber} x\n   * @returns {Unit}      The result: |x|, absolute value of x\n   */\n\n\n  Unit.prototype.abs = function () {\n    var ret = this.clone();\n\n    if (ret.value !== null) {\n      if (ret._isDerived() || ret.units[0].unit.offset === 0) {\n        ret.value = abs(ret.value);\n      } else {\n        // To give the correct, but unexpected, results for units with an offset.\n        // For example, abs(-283.15 degC) = -263.15 degC !!!\n        // We must take the offset into consideration here\n        var convert = ret._numberConverter(); // convert to Fraction or BigNumber if needed\n\n\n        var unitValue = convert(ret.units[0].unit.value);\n        var nominalOffset = convert(ret.units[0].unit.offset);\n        var unitOffset = multiplyScalar(unitValue, nominalOffset);\n        ret.value = subtract(abs(addScalar(ret.value, unitOffset)), unitOffset);\n      }\n    }\n\n    for (var i in ret.units) {\n      if (ret.units[i].unit.name === 'VA' || ret.units[i].unit.name === 'VAR') {\n        ret.units[i].unit = UNITS.W;\n      }\n    }\n\n    return ret;\n  };\n  /**\n   * Convert the unit to a specific unit name.\n   * @memberof Unit\n   * @param {string | Unit} valuelessUnit   A unit without value. Can have prefix, like \"cm\"\n   * @returns {Unit} Returns a clone of the unit with a fixed prefix and unit.\n   */\n\n\n  Unit.prototype.to = function (valuelessUnit) {\n    var value = this.value === null ? this._normalize(1) : this.value;\n    var other;\n\n    if (typeof valuelessUnit === 'string') {\n      other = Unit.parse(valuelessUnit);\n    } else if (isUnit(valuelessUnit)) {\n      other = valuelessUnit.clone();\n    } else {\n      throw new Error('String or Unit expected as parameter');\n    }\n\n    if (!this.equalBase(other)) {\n      throw new Error(\"Units do not match ('\".concat(other.toString(), \"' != '\").concat(this.toString(), \"')\"));\n    }\n\n    if (other.value !== null) {\n      throw new Error('Cannot convert to a unit with a value');\n    }\n\n    if (this.value === null || this._isDerived() || this.units[0].unit.offset === other.units[0].unit.offset) {\n      other.value = clone(value);\n    } else {\n      /* Need to adjust value by difference in offset to convert */\n      var convert = Unit._getNumberConverter(typeOf(value)); // convert to Fraction or BigNumber if needed\n\n\n      var thisUnitValue = convert(this.units[0].unit.value);\n      var thisNominalOffset = convert(this.units[0].unit.offset);\n      var thisUnitOffset = multiplyScalar(thisUnitValue, thisNominalOffset);\n      var otherUnitValue = convert(other.units[0].unit.value);\n      var otherNominalOffset = convert(other.units[0].unit.offset);\n      var otherUnitOffset = multiplyScalar(otherUnitValue, otherNominalOffset);\n      other.value = subtract(addScalar(value, thisUnitOffset), otherUnitOffset);\n    }\n\n    other.fixPrefix = true;\n    other.skipAutomaticSimplification = true;\n    return other;\n  };\n  /**\n   * Return the value of the unit when represented with given valueless unit\n   * @memberof Unit\n   * @param {string | Unit} valuelessUnit    For example 'cm' or 'inch'\n   * @return {number} Returns the unit value as number.\n   */\n  // TODO: deprecate Unit.toNumber? It's always better to use toNumeric\n\n\n  Unit.prototype.toNumber = function (valuelessUnit) {\n    return toNumber(this.toNumeric(valuelessUnit));\n  };\n  /**\n   * Return the value of the unit in the original numeric type\n   * @memberof Unit\n   * @param {string | Unit} valuelessUnit    For example 'cm' or 'inch'\n   * @return {number | BigNumber | Fraction} Returns the unit value\n   */\n\n\n  Unit.prototype.toNumeric = function (valuelessUnit) {\n    var other;\n\n    if (valuelessUnit) {\n      // Allow getting the numeric value without converting to a different unit\n      other = this.to(valuelessUnit);\n    } else {\n      other = this.clone();\n    }\n\n    if (other._isDerived() || other.units.length === 0) {\n      return other._denormalize(other.value);\n    } else {\n      return other._denormalize(other.value, other.units[0].prefix.value);\n    }\n  };\n  /**\n   * Get a string representation of the unit.\n   * @memberof Unit\n   * @return {string}\n   */\n\n\n  Unit.prototype.toString = function () {\n    return this.format();\n  };\n  /**\n   * Get a JSON representation of the unit\n   * @memberof Unit\n   * @returns {Object} Returns a JSON object structured as:\n   *                   `{\"mathjs\": \"Unit\", \"value\": 2, \"unit\": \"cm\", \"fixPrefix\": false}`\n   */\n\n\n  Unit.prototype.toJSON = function () {\n    return {\n      mathjs: 'Unit',\n      value: this._denormalize(this.value),\n      unit: this.formatUnits(),\n      fixPrefix: this.fixPrefix\n    };\n  };\n  /**\n   * Instantiate a Unit from a JSON object\n   * @memberof Unit\n   * @param {Object} json  A JSON object structured as:\n   *                       `{\"mathjs\": \"Unit\", \"value\": 2, \"unit\": \"cm\", \"fixPrefix\": false}`\n   * @return {Unit}\n   */\n\n\n  Unit.fromJSON = function (json) {\n    var unit = new Unit(json.value, json.unit);\n    unit.fixPrefix = json.fixPrefix || false;\n    return unit;\n  };\n  /**\n   * Returns the string representation of the unit.\n   * @memberof Unit\n   * @return {string}\n   */\n\n\n  Unit.prototype.valueOf = Unit.prototype.toString;\n  /**\n   * Simplify this Unit's unit list and return a new Unit with the simplified list.\n   * The returned Unit will contain a list of the \"best\" units for formatting.\n   */\n\n  Unit.prototype.simplify = function () {\n    var ret = this.clone();\n    var proposedUnitList = []; // Search for a matching base\n\n    var matchingBase;\n\n    for (var key in currentUnitSystem) {\n      if (hasOwnProperty(currentUnitSystem, key)) {\n        if (ret.hasBase(BASE_UNITS[key])) {\n          matchingBase = key;\n          break;\n        }\n      }\n    }\n\n    if (matchingBase === 'NONE') {\n      ret.units = [];\n    } else {\n      var matchingUnit;\n\n      if (matchingBase) {\n        // Does the unit system have a matching unit?\n        if (hasOwnProperty(currentUnitSystem, matchingBase)) {\n          matchingUnit = currentUnitSystem[matchingBase];\n        }\n      }\n\n      if (matchingUnit) {\n        ret.units = [{\n          unit: matchingUnit.unit,\n          prefix: matchingUnit.prefix,\n          power: 1.0\n        }];\n      } else {\n        // Multiple units or units with powers are formatted like this:\n        // 5 (kg m^2) / (s^3 mol)\n        // Build an representation from the base units of the current unit system\n        var missingBaseDim = false;\n\n        for (var i = 0; i < BASE_DIMENSIONS.length; i++) {\n          var baseDim = BASE_DIMENSIONS[i];\n\n          if (Math.abs(ret.dimensions[i] || 0) > 1e-12) {\n            if (hasOwnProperty(currentUnitSystem, baseDim)) {\n              proposedUnitList.push({\n                unit: currentUnitSystem[baseDim].unit,\n                prefix: currentUnitSystem[baseDim].prefix,\n                power: ret.dimensions[i] || 0\n              });\n            } else {\n              missingBaseDim = true;\n            }\n          }\n        } // Is the proposed unit list \"simpler\" than the existing one?\n\n\n        if (proposedUnitList.length < ret.units.length && !missingBaseDim) {\n          // Replace this unit list with the proposed list\n          ret.units = proposedUnitList;\n        }\n      }\n    }\n\n    return ret;\n  };\n  /**\n   * Returns a new Unit in the SI system with the same value as this one\n   */\n\n\n  Unit.prototype.toSI = function () {\n    var ret = this.clone();\n    var proposedUnitList = []; // Multiple units or units with powers are formatted like this:\n    // 5 (kg m^2) / (s^3 mol)\n    // Build an representation from the base units of the SI unit system\n\n    for (var i = 0; i < BASE_DIMENSIONS.length; i++) {\n      var baseDim = BASE_DIMENSIONS[i];\n\n      if (Math.abs(ret.dimensions[i] || 0) > 1e-12) {\n        if (hasOwnProperty(UNIT_SYSTEMS.si, baseDim)) {\n          proposedUnitList.push({\n            unit: UNIT_SYSTEMS.si[baseDim].unit,\n            prefix: UNIT_SYSTEMS.si[baseDim].prefix,\n            power: ret.dimensions[i] || 0\n          });\n        } else {\n          throw new Error('Cannot express custom unit ' + baseDim + ' in SI units');\n        }\n      }\n    } // Replace this unit list with the proposed list\n\n\n    ret.units = proposedUnitList;\n    ret.fixPrefix = true;\n    ret.skipAutomaticSimplification = true;\n    return ret;\n  };\n  /**\n   * Get a string representation of the units of this Unit, without the value. The unit list is formatted as-is without first being simplified.\n   * @memberof Unit\n   * @return {string}\n   */\n\n\n  Unit.prototype.formatUnits = function () {\n    var strNum = '';\n    var strDen = '';\n    var nNum = 0;\n    var nDen = 0;\n\n    for (var i = 0; i < this.units.length; i++) {\n      if (this.units[i].power > 0) {\n        nNum++;\n        strNum += ' ' + this.units[i].prefix.name + this.units[i].unit.name;\n\n        if (Math.abs(this.units[i].power - 1.0) > 1e-15) {\n          strNum += '^' + this.units[i].power;\n        }\n      } else if (this.units[i].power < 0) {\n        nDen++;\n      }\n    }\n\n    if (nDen > 0) {\n      for (var _i4 = 0; _i4 < this.units.length; _i4++) {\n        if (this.units[_i4].power < 0) {\n          if (nNum > 0) {\n            strDen += ' ' + this.units[_i4].prefix.name + this.units[_i4].unit.name;\n\n            if (Math.abs(this.units[_i4].power + 1.0) > 1e-15) {\n              strDen += '^' + -this.units[_i4].power;\n            }\n          } else {\n            strDen += ' ' + this.units[_i4].prefix.name + this.units[_i4].unit.name;\n            strDen += '^' + this.units[_i4].power;\n          }\n        }\n      }\n    } // Remove leading \" \"\n\n\n    strNum = strNum.substr(1);\n    strDen = strDen.substr(1); // Add parans for better copy/paste back into evaluate, for example, or for better pretty print formatting\n\n    if (nNum > 1 && nDen > 0) {\n      strNum = '(' + strNum + ')';\n    }\n\n    if (nDen > 1 && nNum > 0) {\n      strDen = '(' + strDen + ')';\n    }\n\n    var str = strNum;\n\n    if (nNum > 0 && nDen > 0) {\n      str += ' / ';\n    }\n\n    str += strDen;\n    return str;\n  };\n  /**\n   * Get a string representation of the Unit, with optional formatting options.\n   * @memberof Unit\n   * @param {Object | number | Function} [options]  Formatting options. See\n   *                                                lib/utils/number:format for a\n   *                                                description of the available\n   *                                                options.\n   * @return {string}\n   */\n\n\n  Unit.prototype.format = function (options) {\n    // Simplfy the unit list, unless it is valueless or was created directly in the\n    // constructor or as the result of to or toSI\n    var simp = this.skipAutomaticSimplification || this.value === null ? this.clone() : this.simplify(); // Apply some custom logic for handling VA and VAR. The goal is to express the value of the unit as a real value, if possible. Otherwise, use a real-valued unit instead of a complex-valued one.\n\n    var isImaginary = false;\n\n    if (typeof simp.value !== 'undefined' && simp.value !== null && isComplex(simp.value)) {\n      // TODO: Make this better, for example, use relative magnitude of re and im rather than absolute\n      isImaginary = Math.abs(simp.value.re) < 1e-14;\n    }\n\n    for (var i in simp.units) {\n      if (hasOwnProperty(simp.units, i)) {\n        if (simp.units[i].unit) {\n          if (simp.units[i].unit.name === 'VA' && isImaginary) {\n            simp.units[i].unit = UNITS.VAR;\n          } else if (simp.units[i].unit.name === 'VAR' && !isImaginary) {\n            simp.units[i].unit = UNITS.VA;\n          }\n        }\n      }\n    } // Now apply the best prefix\n    // Units must have only one unit and not have the fixPrefix flag set\n\n\n    if (simp.units.length === 1 && !simp.fixPrefix) {\n      // Units must have integer powers, otherwise the prefix will change the\n      // outputted value by not-an-integer-power-of-ten\n      if (Math.abs(simp.units[0].power - Math.round(simp.units[0].power)) < 1e-14) {\n        // Apply the best prefix\n        simp.units[0].prefix = simp._bestPrefix();\n      }\n    }\n\n    var value = simp._denormalize(simp.value);\n\n    var str = simp.value !== null ? format(value, options || {}) : '';\n    var unitStr = simp.formatUnits();\n\n    if (simp.value && isComplex(simp.value)) {\n      str = '(' + str + ')'; // Surround complex values with ( ) to enable better parsing\n    }\n\n    if (unitStr.length > 0 && str.length > 0) {\n      str += ' ';\n    }\n\n    str += unitStr;\n    return str;\n  };\n  /**\n   * Calculate the best prefix using current value.\n   * @memberof Unit\n   * @returns {Object} prefix\n   * @private\n   */\n\n\n  Unit.prototype._bestPrefix = function () {\n    if (this.units.length !== 1) {\n      throw new Error('Can only compute the best prefix for single units with integer powers, like kg, s^2, N^-1, and so forth!');\n    }\n\n    if (Math.abs(this.units[0].power - Math.round(this.units[0].power)) >= 1e-14) {\n      throw new Error('Can only compute the best prefix for single units with integer powers, like kg, s^2, N^-1, and so forth!');\n    } // find the best prefix value (resulting in the value of which\n    // the absolute value of the log10 is closest to zero,\n    // though with a little offset of 1.2 for nicer values: you get a\n    // sequence 1mm 100mm 500mm 0.6m 1m 10m 100m 500m 0.6km 1km ...\n    // Note: the units value can be any numeric type, but to find the best\n    // prefix it's enough to work with limited precision of a regular number\n    // Update: using mathjs abs since we also allow complex numbers\n\n\n    var absValue = this.value !== null ? abs(this.value) : 0;\n    var absUnitValue = abs(this.units[0].unit.value);\n    var bestPrefix = this.units[0].prefix;\n\n    if (absValue === 0) {\n      return bestPrefix;\n    }\n\n    var power = this.units[0].power;\n    var bestDiff = Math.log(absValue / Math.pow(bestPrefix.value * absUnitValue, power)) / Math.LN10 - 1.2;\n    if (bestDiff > -2.200001 && bestDiff < 1.800001) return bestPrefix; // Allow the original prefix\n\n    bestDiff = Math.abs(bestDiff);\n    var prefixes = this.units[0].unit.prefixes;\n\n    for (var p in prefixes) {\n      if (hasOwnProperty(prefixes, p)) {\n        var prefix = prefixes[p];\n\n        if (prefix.scientific) {\n          var diff = Math.abs(Math.log(absValue / Math.pow(prefix.value * absUnitValue, power)) / Math.LN10 - 1.2);\n\n          if (diff < bestDiff || diff === bestDiff && prefix.name.length < bestPrefix.name.length) {\n            // choose the prefix with the smallest diff, or if equal, choose the one\n            // with the shortest name (can happen with SHORTLONG for example)\n            bestPrefix = prefix;\n            bestDiff = diff;\n          }\n        }\n      }\n    }\n\n    return bestPrefix;\n  };\n  /**\n   * Returns an array of units whose sum is equal to this unit\n   * @memberof Unit\n   * @param {Array} [parts] An array of strings or valueless units.\n   *\n   *   Example:\n   *\n   *   const u = new Unit(1, 'm')\n   *   u.splitUnit(['feet', 'inch'])\n   *     [ 3 feet, 3.3700787401575 inch ]\n   *\n   * @return {Array} An array of units.\n   */\n\n\n  Unit.prototype.splitUnit = function (parts) {\n    var x = this.clone();\n    var ret = [];\n\n    for (var i = 0; i < parts.length; i++) {\n      // Convert x to the requested unit\n      x = x.to(parts[i]);\n      if (i === parts.length - 1) break; // Get the numeric value of this unit\n\n      var xNumeric = x.toNumeric(); // Check to see if xNumeric is nearly equal to an integer,\n      // since fix can incorrectly round down if there is round-off error\n\n      var xRounded = round(xNumeric);\n      var xFixed = void 0;\n      var isNearlyEqual = equal(xRounded, xNumeric);\n\n      if (isNearlyEqual) {\n        xFixed = xRounded;\n      } else {\n        xFixed = fix(x.toNumeric());\n      }\n\n      var y = new Unit(xFixed, parts[i].toString());\n      ret.push(y);\n      x = subtract(x, y);\n    } // This little bit fixes a bug where the remainder should be 0 but is a little bit off.\n    // But instead of comparing x, the remainder, with zero--we will compare the sum of\n    // all the parts so far with the original value. If they are nearly equal,\n    // we set the remainder to 0.\n\n\n    var testSum = 0;\n\n    for (var _i5 = 0; _i5 < ret.length; _i5++) {\n      testSum = addScalar(testSum, ret[_i5].value);\n    }\n\n    if (equal(testSum, this.value)) {\n      x.value = 0;\n    }\n\n    ret.push(x);\n    return ret;\n  };\n\n  var PREFIXES = {\n    NONE: {\n      '': {\n        name: '',\n        value: 1,\n        scientific: true\n      }\n    },\n    SHORT: {\n      '': {\n        name: '',\n        value: 1,\n        scientific: true\n      },\n      da: {\n        name: 'da',\n        value: 1e1,\n        scientific: false\n      },\n      h: {\n        name: 'h',\n        value: 1e2,\n        scientific: false\n      },\n      k: {\n        name: 'k',\n        value: 1e3,\n        scientific: true\n      },\n      M: {\n        name: 'M',\n        value: 1e6,\n        scientific: true\n      },\n      G: {\n        name: 'G',\n        value: 1e9,\n        scientific: true\n      },\n      T: {\n        name: 'T',\n        value: 1e12,\n        scientific: true\n      },\n      P: {\n        name: 'P',\n        value: 1e15,\n        scientific: true\n      },\n      E: {\n        name: 'E',\n        value: 1e18,\n        scientific: true\n      },\n      Z: {\n        name: 'Z',\n        value: 1e21,\n        scientific: true\n      },\n      Y: {\n        name: 'Y',\n        value: 1e24,\n        scientific: true\n      },\n      d: {\n        name: 'd',\n        value: 1e-1,\n        scientific: false\n      },\n      c: {\n        name: 'c',\n        value: 1e-2,\n        scientific: false\n      },\n      m: {\n        name: 'm',\n        value: 1e-3,\n        scientific: true\n      },\n      u: {\n        name: 'u',\n        value: 1e-6,\n        scientific: true\n      },\n      n: {\n        name: 'n',\n        value: 1e-9,\n        scientific: true\n      },\n      p: {\n        name: 'p',\n        value: 1e-12,\n        scientific: true\n      },\n      f: {\n        name: 'f',\n        value: 1e-15,\n        scientific: true\n      },\n      a: {\n        name: 'a',\n        value: 1e-18,\n        scientific: true\n      },\n      z: {\n        name: 'z',\n        value: 1e-21,\n        scientific: true\n      },\n      y: {\n        name: 'y',\n        value: 1e-24,\n        scientific: true\n      }\n    },\n    LONG: {\n      '': {\n        name: '',\n        value: 1,\n        scientific: true\n      },\n      deca: {\n        name: 'deca',\n        value: 1e1,\n        scientific: false\n      },\n      hecto: {\n        name: 'hecto',\n        value: 1e2,\n        scientific: false\n      },\n      kilo: {\n        name: 'kilo',\n        value: 1e3,\n        scientific: true\n      },\n      mega: {\n        name: 'mega',\n        value: 1e6,\n        scientific: true\n      },\n      giga: {\n        name: 'giga',\n        value: 1e9,\n        scientific: true\n      },\n      tera: {\n        name: 'tera',\n        value: 1e12,\n        scientific: true\n      },\n      peta: {\n        name: 'peta',\n        value: 1e15,\n        scientific: true\n      },\n      exa: {\n        name: 'exa',\n        value: 1e18,\n        scientific: true\n      },\n      zetta: {\n        name: 'zetta',\n        value: 1e21,\n        scientific: true\n      },\n      yotta: {\n        name: 'yotta',\n        value: 1e24,\n        scientific: true\n      },\n      deci: {\n        name: 'deci',\n        value: 1e-1,\n        scientific: false\n      },\n      centi: {\n        name: 'centi',\n        value: 1e-2,\n        scientific: false\n      },\n      milli: {\n        name: 'milli',\n        value: 1e-3,\n        scientific: true\n      },\n      micro: {\n        name: 'micro',\n        value: 1e-6,\n        scientific: true\n      },\n      nano: {\n        name: 'nano',\n        value: 1e-9,\n        scientific: true\n      },\n      pico: {\n        name: 'pico',\n        value: 1e-12,\n        scientific: true\n      },\n      femto: {\n        name: 'femto',\n        value: 1e-15,\n        scientific: true\n      },\n      atto: {\n        name: 'atto',\n        value: 1e-18,\n        scientific: true\n      },\n      zepto: {\n        name: 'zepto',\n        value: 1e-21,\n        scientific: true\n      },\n      yocto: {\n        name: 'yocto',\n        value: 1e-24,\n        scientific: true\n      }\n    },\n    SQUARED: {\n      '': {\n        name: '',\n        value: 1,\n        scientific: true\n      },\n      da: {\n        name: 'da',\n        value: 1e2,\n        scientific: false\n      },\n      h: {\n        name: 'h',\n        value: 1e4,\n        scientific: false\n      },\n      k: {\n        name: 'k',\n        value: 1e6,\n        scientific: true\n      },\n      M: {\n        name: 'M',\n        value: 1e12,\n        scientific: true\n      },\n      G: {\n        name: 'G',\n        value: 1e18,\n        scientific: true\n      },\n      T: {\n        name: 'T',\n        value: 1e24,\n        scientific: true\n      },\n      P: {\n        name: 'P',\n        value: 1e30,\n        scientific: true\n      },\n      E: {\n        name: 'E',\n        value: 1e36,\n        scientific: true\n      },\n      Z: {\n        name: 'Z',\n        value: 1e42,\n        scientific: true\n      },\n      Y: {\n        name: 'Y',\n        value: 1e48,\n        scientific: true\n      },\n      d: {\n        name: 'd',\n        value: 1e-2,\n        scientific: false\n      },\n      c: {\n        name: 'c',\n        value: 1e-4,\n        scientific: false\n      },\n      m: {\n        name: 'm',\n        value: 1e-6,\n        scientific: true\n      },\n      u: {\n        name: 'u',\n        value: 1e-12,\n        scientific: true\n      },\n      n: {\n        name: 'n',\n        value: 1e-18,\n        scientific: true\n      },\n      p: {\n        name: 'p',\n        value: 1e-24,\n        scientific: true\n      },\n      f: {\n        name: 'f',\n        value: 1e-30,\n        scientific: true\n      },\n      a: {\n        name: 'a',\n        value: 1e-36,\n        scientific: true\n      },\n      z: {\n        name: 'z',\n        value: 1e-42,\n        scientific: true\n      },\n      y: {\n        name: 'y',\n        value: 1e-48,\n        scientific: true\n      }\n    },\n    CUBIC: {\n      '': {\n        name: '',\n        value: 1,\n        scientific: true\n      },\n      da: {\n        name: 'da',\n        value: 1e3,\n        scientific: false\n      },\n      h: {\n        name: 'h',\n        value: 1e6,\n        scientific: false\n      },\n      k: {\n        name: 'k',\n        value: 1e9,\n        scientific: true\n      },\n      M: {\n        name: 'M',\n        value: 1e18,\n        scientific: true\n      },\n      G: {\n        name: 'G',\n        value: 1e27,\n        scientific: true\n      },\n      T: {\n        name: 'T',\n        value: 1e36,\n        scientific: true\n      },\n      P: {\n        name: 'P',\n        value: 1e45,\n        scientific: true\n      },\n      E: {\n        name: 'E',\n        value: 1e54,\n        scientific: true\n      },\n      Z: {\n        name: 'Z',\n        value: 1e63,\n        scientific: true\n      },\n      Y: {\n        name: 'Y',\n        value: 1e72,\n        scientific: true\n      },\n      d: {\n        name: 'd',\n        value: 1e-3,\n        scientific: false\n      },\n      c: {\n        name: 'c',\n        value: 1e-6,\n        scientific: false\n      },\n      m: {\n        name: 'm',\n        value: 1e-9,\n        scientific: true\n      },\n      u: {\n        name: 'u',\n        value: 1e-18,\n        scientific: true\n      },\n      n: {\n        name: 'n',\n        value: 1e-27,\n        scientific: true\n      },\n      p: {\n        name: 'p',\n        value: 1e-36,\n        scientific: true\n      },\n      f: {\n        name: 'f',\n        value: 1e-45,\n        scientific: true\n      },\n      a: {\n        name: 'a',\n        value: 1e-54,\n        scientific: true\n      },\n      z: {\n        name: 'z',\n        value: 1e-63,\n        scientific: true\n      },\n      y: {\n        name: 'y',\n        value: 1e-72,\n        scientific: true\n      }\n    },\n    BINARY_SHORT_SI: {\n      '': {\n        name: '',\n        value: 1,\n        scientific: true\n      },\n      k: {\n        name: 'k',\n        value: 1e3,\n        scientific: true\n      },\n      M: {\n        name: 'M',\n        value: 1e6,\n        scientific: true\n      },\n      G: {\n        name: 'G',\n        value: 1e9,\n        scientific: true\n      },\n      T: {\n        name: 'T',\n        value: 1e12,\n        scientific: true\n      },\n      P: {\n        name: 'P',\n        value: 1e15,\n        scientific: true\n      },\n      E: {\n        name: 'E',\n        value: 1e18,\n        scientific: true\n      },\n      Z: {\n        name: 'Z',\n        value: 1e21,\n        scientific: true\n      },\n      Y: {\n        name: 'Y',\n        value: 1e24,\n        scientific: true\n      }\n    },\n    BINARY_SHORT_IEC: {\n      '': {\n        name: '',\n        value: 1,\n        scientific: true\n      },\n      Ki: {\n        name: 'Ki',\n        value: 1024,\n        scientific: true\n      },\n      Mi: {\n        name: 'Mi',\n        value: Math.pow(1024, 2),\n        scientific: true\n      },\n      Gi: {\n        name: 'Gi',\n        value: Math.pow(1024, 3),\n        scientific: true\n      },\n      Ti: {\n        name: 'Ti',\n        value: Math.pow(1024, 4),\n        scientific: true\n      },\n      Pi: {\n        name: 'Pi',\n        value: Math.pow(1024, 5),\n        scientific: true\n      },\n      Ei: {\n        name: 'Ei',\n        value: Math.pow(1024, 6),\n        scientific: true\n      },\n      Zi: {\n        name: 'Zi',\n        value: Math.pow(1024, 7),\n        scientific: true\n      },\n      Yi: {\n        name: 'Yi',\n        value: Math.pow(1024, 8),\n        scientific: true\n      }\n    },\n    BINARY_LONG_SI: {\n      '': {\n        name: '',\n        value: 1,\n        scientific: true\n      },\n      kilo: {\n        name: 'kilo',\n        value: 1e3,\n        scientific: true\n      },\n      mega: {\n        name: 'mega',\n        value: 1e6,\n        scientific: true\n      },\n      giga: {\n        name: 'giga',\n        value: 1e9,\n        scientific: true\n      },\n      tera: {\n        name: 'tera',\n        value: 1e12,\n        scientific: true\n      },\n      peta: {\n        name: 'peta',\n        value: 1e15,\n        scientific: true\n      },\n      exa: {\n        name: 'exa',\n        value: 1e18,\n        scientific: true\n      },\n      zetta: {\n        name: 'zetta',\n        value: 1e21,\n        scientific: true\n      },\n      yotta: {\n        name: 'yotta',\n        value: 1e24,\n        scientific: true\n      }\n    },\n    BINARY_LONG_IEC: {\n      '': {\n        name: '',\n        value: 1,\n        scientific: true\n      },\n      kibi: {\n        name: 'kibi',\n        value: 1024,\n        scientific: true\n      },\n      mebi: {\n        name: 'mebi',\n        value: Math.pow(1024, 2),\n        scientific: true\n      },\n      gibi: {\n        name: 'gibi',\n        value: Math.pow(1024, 3),\n        scientific: true\n      },\n      tebi: {\n        name: 'tebi',\n        value: Math.pow(1024, 4),\n        scientific: true\n      },\n      pebi: {\n        name: 'pebi',\n        value: Math.pow(1024, 5),\n        scientific: true\n      },\n      exi: {\n        name: 'exi',\n        value: Math.pow(1024, 6),\n        scientific: true\n      },\n      zebi: {\n        name: 'zebi',\n        value: Math.pow(1024, 7),\n        scientific: true\n      },\n      yobi: {\n        name: 'yobi',\n        value: Math.pow(1024, 8),\n        scientific: true\n      }\n    },\n    BTU: {\n      '': {\n        name: '',\n        value: 1,\n        scientific: true\n      },\n      MM: {\n        name: 'MM',\n        value: 1e6,\n        scientific: true\n      }\n    }\n  };\n  PREFIXES.SHORTLONG = _extends({}, PREFIXES.SHORT, PREFIXES.LONG);\n  PREFIXES.BINARY_SHORT = _extends({}, PREFIXES.BINARY_SHORT_SI, PREFIXES.BINARY_SHORT_IEC);\n  PREFIXES.BINARY_LONG = _extends({}, PREFIXES.BINARY_LONG_SI, PREFIXES.BINARY_LONG_IEC);\n  /* Internally, each unit is represented by a value and a dimension array. The elements of the dimensions array have the following meaning:\n   * Index  Dimension\n   * -----  ---------\n   *   0    Length\n   *   1    Mass\n   *   2    Time\n   *   3    Current\n   *   4    Temperature\n   *   5    Luminous intensity\n   *   6    Amount of substance\n   *   7    Angle\n   *   8    Bit (digital)\n   * For example, the unit \"298.15 K\" is a pure temperature and would have a value of 298.15 and a dimension array of [0, 0, 0, 0, 1, 0, 0, 0, 0]. The unit \"1 cal / (gm °C)\" can be written in terms of the 9 fundamental dimensions as [length^2] / ([time^2] * [temperature]), and would a value of (after conversion to SI) 4184.0 and a dimensions array of [2, 0, -2, 0, -1, 0, 0, 0, 0].\n   *\n   */\n\n  var BASE_DIMENSIONS = ['MASS', 'LENGTH', 'TIME', 'CURRENT', 'TEMPERATURE', 'LUMINOUS_INTENSITY', 'AMOUNT_OF_SUBSTANCE', 'ANGLE', 'BIT'];\n  var BASE_UNITS = {\n    NONE: {\n      dimensions: [0, 0, 0, 0, 0, 0, 0, 0, 0]\n    },\n    MASS: {\n      dimensions: [1, 0, 0, 0, 0, 0, 0, 0, 0]\n    },\n    LENGTH: {\n      dimensions: [0, 1, 0, 0, 0, 0, 0, 0, 0]\n    },\n    TIME: {\n      dimensions: [0, 0, 1, 0, 0, 0, 0, 0, 0]\n    },\n    CURRENT: {\n      dimensions: [0, 0, 0, 1, 0, 0, 0, 0, 0]\n    },\n    TEMPERATURE: {\n      dimensions: [0, 0, 0, 0, 1, 0, 0, 0, 0]\n    },\n    LUMINOUS_INTENSITY: {\n      dimensions: [0, 0, 0, 0, 0, 1, 0, 0, 0]\n    },\n    AMOUNT_OF_SUBSTANCE: {\n      dimensions: [0, 0, 0, 0, 0, 0, 1, 0, 0]\n    },\n    FORCE: {\n      dimensions: [1, 1, -2, 0, 0, 0, 0, 0, 0]\n    },\n    SURFACE: {\n      dimensions: [0, 2, 0, 0, 0, 0, 0, 0, 0]\n    },\n    VOLUME: {\n      dimensions: [0, 3, 0, 0, 0, 0, 0, 0, 0]\n    },\n    ENERGY: {\n      dimensions: [1, 2, -2, 0, 0, 0, 0, 0, 0]\n    },\n    POWER: {\n      dimensions: [1, 2, -3, 0, 0, 0, 0, 0, 0]\n    },\n    PRESSURE: {\n      dimensions: [1, -1, -2, 0, 0, 0, 0, 0, 0]\n    },\n    ELECTRIC_CHARGE: {\n      dimensions: [0, 0, 1, 1, 0, 0, 0, 0, 0]\n    },\n    ELECTRIC_CAPACITANCE: {\n      dimensions: [-1, -2, 4, 2, 0, 0, 0, 0, 0]\n    },\n    ELECTRIC_POTENTIAL: {\n      dimensions: [1, 2, -3, -1, 0, 0, 0, 0, 0]\n    },\n    ELECTRIC_RESISTANCE: {\n      dimensions: [1, 2, -3, -2, 0, 0, 0, 0, 0]\n    },\n    ELECTRIC_INDUCTANCE: {\n      dimensions: [1, 2, -2, -2, 0, 0, 0, 0, 0]\n    },\n    ELECTRIC_CONDUCTANCE: {\n      dimensions: [-1, -2, 3, 2, 0, 0, 0, 0, 0]\n    },\n    MAGNETIC_FLUX: {\n      dimensions: [1, 2, -2, -1, 0, 0, 0, 0, 0]\n    },\n    MAGNETIC_FLUX_DENSITY: {\n      dimensions: [1, 0, -2, -1, 0, 0, 0, 0, 0]\n    },\n    FREQUENCY: {\n      dimensions: [0, 0, -1, 0, 0, 0, 0, 0, 0]\n    },\n    ANGLE: {\n      dimensions: [0, 0, 0, 0, 0, 0, 0, 1, 0]\n    },\n    BIT: {\n      dimensions: [0, 0, 0, 0, 0, 0, 0, 0, 1]\n    }\n  };\n\n  for (var key in BASE_UNITS) {\n    if (hasOwnProperty(BASE_UNITS, key)) {\n      BASE_UNITS[key].key = key;\n    }\n  }\n\n  var BASE_UNIT_NONE = {};\n  var UNIT_NONE = {\n    name: '',\n    base: BASE_UNIT_NONE,\n    value: 1,\n    offset: 0,\n    dimensions: BASE_DIMENSIONS.map(x => 0)\n  };\n  var UNITS = {\n    // length\n    meter: {\n      name: 'meter',\n      base: BASE_UNITS.LENGTH,\n      prefixes: PREFIXES.LONG,\n      value: 1,\n      offset: 0\n    },\n    inch: {\n      name: 'inch',\n      base: BASE_UNITS.LENGTH,\n      prefixes: PREFIXES.NONE,\n      value: 0.0254,\n      offset: 0\n    },\n    foot: {\n      name: 'foot',\n      base: BASE_UNITS.LENGTH,\n      prefixes: PREFIXES.NONE,\n      value: 0.3048,\n      offset: 0\n    },\n    yard: {\n      name: 'yard',\n      base: BASE_UNITS.LENGTH,\n      prefixes: PREFIXES.NONE,\n      value: 0.9144,\n      offset: 0\n    },\n    mile: {\n      name: 'mile',\n      base: BASE_UNITS.LENGTH,\n      prefixes: PREFIXES.NONE,\n      value: 1609.344,\n      offset: 0\n    },\n    link: {\n      name: 'link',\n      base: BASE_UNITS.LENGTH,\n      prefixes: PREFIXES.NONE,\n      value: 0.201168,\n      offset: 0\n    },\n    rod: {\n      name: 'rod',\n      base: BASE_UNITS.LENGTH,\n      prefixes: PREFIXES.NONE,\n      value: 5.0292,\n      offset: 0\n    },\n    chain: {\n      name: 'chain',\n      base: BASE_UNITS.LENGTH,\n      prefixes: PREFIXES.NONE,\n      value: 20.1168,\n      offset: 0\n    },\n    angstrom: {\n      name: 'angstrom',\n      base: BASE_UNITS.LENGTH,\n      prefixes: PREFIXES.NONE,\n      value: 1e-10,\n      offset: 0\n    },\n    m: {\n      name: 'm',\n      base: BASE_UNITS.LENGTH,\n      prefixes: PREFIXES.SHORT,\n      value: 1,\n      offset: 0\n    },\n    in: {\n      name: 'in',\n      base: BASE_UNITS.LENGTH,\n      prefixes: PREFIXES.NONE,\n      value: 0.0254,\n      offset: 0\n    },\n    ft: {\n      name: 'ft',\n      base: BASE_UNITS.LENGTH,\n      prefixes: PREFIXES.NONE,\n      value: 0.3048,\n      offset: 0\n    },\n    yd: {\n      name: 'yd',\n      base: BASE_UNITS.LENGTH,\n      prefixes: PREFIXES.NONE,\n      value: 0.9144,\n      offset: 0\n    },\n    mi: {\n      name: 'mi',\n      base: BASE_UNITS.LENGTH,\n      prefixes: PREFIXES.NONE,\n      value: 1609.344,\n      offset: 0\n    },\n    li: {\n      name: 'li',\n      base: BASE_UNITS.LENGTH,\n      prefixes: PREFIXES.NONE,\n      value: 0.201168,\n      offset: 0\n    },\n    rd: {\n      name: 'rd',\n      base: BASE_UNITS.LENGTH,\n      prefixes: PREFIXES.NONE,\n      value: 5.029210,\n      offset: 0\n    },\n    ch: {\n      name: 'ch',\n      base: BASE_UNITS.LENGTH,\n      prefixes: PREFIXES.NONE,\n      value: 20.1168,\n      offset: 0\n    },\n    mil: {\n      name: 'mil',\n      base: BASE_UNITS.LENGTH,\n      prefixes: PREFIXES.NONE,\n      value: 0.0000254,\n      offset: 0\n    },\n    // 1/1000 inch\n    // Surface\n    m2: {\n      name: 'm2',\n      base: BASE_UNITS.SURFACE,\n      prefixes: PREFIXES.SQUARED,\n      value: 1,\n      offset: 0\n    },\n    sqin: {\n      name: 'sqin',\n      base: BASE_UNITS.SURFACE,\n      prefixes: PREFIXES.NONE,\n      value: 0.00064516,\n      offset: 0\n    },\n    // 645.16 mm2\n    sqft: {\n      name: 'sqft',\n      base: BASE_UNITS.SURFACE,\n      prefixes: PREFIXES.NONE,\n      value: 0.09290304,\n      offset: 0\n    },\n    // 0.09290304 m2\n    sqyd: {\n      name: 'sqyd',\n      base: BASE_UNITS.SURFACE,\n      prefixes: PREFIXES.NONE,\n      value: 0.83612736,\n      offset: 0\n    },\n    // 0.83612736 m2\n    sqmi: {\n      name: 'sqmi',\n      base: BASE_UNITS.SURFACE,\n      prefixes: PREFIXES.NONE,\n      value: 2589988.110336,\n      offset: 0\n    },\n    // 2.589988110336 km2\n    sqrd: {\n      name: 'sqrd',\n      base: BASE_UNITS.SURFACE,\n      prefixes: PREFIXES.NONE,\n      value: 25.29295,\n      offset: 0\n    },\n    // 25.29295 m2\n    sqch: {\n      name: 'sqch',\n      base: BASE_UNITS.SURFACE,\n      prefixes: PREFIXES.NONE,\n      value: 404.6873,\n      offset: 0\n    },\n    // 404.6873 m2\n    sqmil: {\n      name: 'sqmil',\n      base: BASE_UNITS.SURFACE,\n      prefixes: PREFIXES.NONE,\n      value: 6.4516e-10,\n      offset: 0\n    },\n    // 6.4516 * 10^-10 m2\n    acre: {\n      name: 'acre',\n      base: BASE_UNITS.SURFACE,\n      prefixes: PREFIXES.NONE,\n      value: 4046.86,\n      offset: 0\n    },\n    // 4046.86 m2\n    hectare: {\n      name: 'hectare',\n      base: BASE_UNITS.SURFACE,\n      prefixes: PREFIXES.NONE,\n      value: 10000,\n      offset: 0\n    },\n    // 10000 m2\n    // Volume\n    m3: {\n      name: 'm3',\n      base: BASE_UNITS.VOLUME,\n      prefixes: PREFIXES.CUBIC,\n      value: 1,\n      offset: 0\n    },\n    L: {\n      name: 'L',\n      base: BASE_UNITS.VOLUME,\n      prefixes: PREFIXES.SHORT,\n      value: 0.001,\n      offset: 0\n    },\n    // litre\n    l: {\n      name: 'l',\n      base: BASE_UNITS.VOLUME,\n      prefixes: PREFIXES.SHORT,\n      value: 0.001,\n      offset: 0\n    },\n    // litre\n    litre: {\n      name: 'litre',\n      base: BASE_UNITS.VOLUME,\n      prefixes: PREFIXES.LONG,\n      value: 0.001,\n      offset: 0\n    },\n    cuin: {\n      name: 'cuin',\n      base: BASE_UNITS.VOLUME,\n      prefixes: PREFIXES.NONE,\n      value: 1.6387064e-5,\n      offset: 0\n    },\n    // 1.6387064e-5 m3\n    cuft: {\n      name: 'cuft',\n      base: BASE_UNITS.VOLUME,\n      prefixes: PREFIXES.NONE,\n      value: 0.028316846592,\n      offset: 0\n    },\n    // 28.316 846 592 L\n    cuyd: {\n      name: 'cuyd',\n      base: BASE_UNITS.VOLUME,\n      prefixes: PREFIXES.NONE,\n      value: 0.764554857984,\n      offset: 0\n    },\n    // 764.554 857 984 L\n    teaspoon: {\n      name: 'teaspoon',\n      base: BASE_UNITS.VOLUME,\n      prefixes: PREFIXES.NONE,\n      value: 0.000005,\n      offset: 0\n    },\n    // 5 mL\n    tablespoon: {\n      name: 'tablespoon',\n      base: BASE_UNITS.VOLUME,\n      prefixes: PREFIXES.NONE,\n      value: 0.000015,\n      offset: 0\n    },\n    // 15 mL\n    // {name: 'cup', base: BASE_UNITS.VOLUME, prefixes: PREFIXES.NONE, value: 0.000240, offset: 0}, // 240 mL  // not possible, we have already another cup\n    drop: {\n      name: 'drop',\n      base: BASE_UNITS.VOLUME,\n      prefixes: PREFIXES.NONE,\n      value: 5e-8,\n      offset: 0\n    },\n    // 0.05 mL = 5e-8 m3\n    gtt: {\n      name: 'gtt',\n      base: BASE_UNITS.VOLUME,\n      prefixes: PREFIXES.NONE,\n      value: 5e-8,\n      offset: 0\n    },\n    // 0.05 mL = 5e-8 m3\n    // Liquid volume\n    minim: {\n      name: 'minim',\n      base: BASE_UNITS.VOLUME,\n      prefixes: PREFIXES.NONE,\n      value: 0.00000006161152,\n      offset: 0\n    },\n    // 0.06161152 mL\n    fluiddram: {\n      name: 'fluiddram',\n      base: BASE_UNITS.VOLUME,\n      prefixes: PREFIXES.NONE,\n      value: 0.0000036966911,\n      offset: 0\n    },\n    // 3.696691 mL\n    fluidounce: {\n      name: 'fluidounce',\n      base: BASE_UNITS.VOLUME,\n      prefixes: PREFIXES.NONE,\n      value: 0.00002957353,\n      offset: 0\n    },\n    // 29.57353 mL\n    gill: {\n      name: 'gill',\n      base: BASE_UNITS.VOLUME,\n      prefixes: PREFIXES.NONE,\n      value: 0.0001182941,\n      offset: 0\n    },\n    // 118.2941 mL\n    cc: {\n      name: 'cc',\n      base: BASE_UNITS.VOLUME,\n      prefixes: PREFIXES.NONE,\n      value: 1e-6,\n      offset: 0\n    },\n    // 1e-6 L\n    cup: {\n      name: 'cup',\n      base: BASE_UNITS.VOLUME,\n      prefixes: PREFIXES.NONE,\n      value: 0.0002365882,\n      offset: 0\n    },\n    // 236.5882 mL\n    pint: {\n      name: 'pint',\n      base: BASE_UNITS.VOLUME,\n      prefixes: PREFIXES.NONE,\n      value: 0.0004731765,\n      offset: 0\n    },\n    // 473.1765 mL\n    quart: {\n      name: 'quart',\n      base: BASE_UNITS.VOLUME,\n      prefixes: PREFIXES.NONE,\n      value: 0.0009463529,\n      offset: 0\n    },\n    // 946.3529 mL\n    gallon: {\n      name: 'gallon',\n      base: BASE_UNITS.VOLUME,\n      prefixes: PREFIXES.NONE,\n      value: 0.003785412,\n      offset: 0\n    },\n    // 3.785412 L\n    beerbarrel: {\n      name: 'beerbarrel',\n      base: BASE_UNITS.VOLUME,\n      prefixes: PREFIXES.NONE,\n      value: 0.1173478,\n      offset: 0\n    },\n    // 117.3478 L\n    oilbarrel: {\n      name: 'oilbarrel',\n      base: BASE_UNITS.VOLUME,\n      prefixes: PREFIXES.NONE,\n      value: 0.1589873,\n      offset: 0\n    },\n    // 158.9873 L\n    hogshead: {\n      name: 'hogshead',\n      base: BASE_UNITS.VOLUME,\n      prefixes: PREFIXES.NONE,\n      value: 0.2384810,\n      offset: 0\n    },\n    // 238.4810 L\n    // {name: 'min', base: BASE_UNITS.VOLUME, prefixes: PREFIXES.NONE, value: 0.00000006161152, offset: 0}, // 0.06161152 mL // min is already in use as minute\n    fldr: {\n      name: 'fldr',\n      base: BASE_UNITS.VOLUME,\n      prefixes: PREFIXES.NONE,\n      value: 0.0000036966911,\n      offset: 0\n    },\n    // 3.696691 mL\n    floz: {\n      name: 'floz',\n      base: BASE_UNITS.VOLUME,\n      prefixes: PREFIXES.NONE,\n      value: 0.00002957353,\n      offset: 0\n    },\n    // 29.57353 mL\n    gi: {\n      name: 'gi',\n      base: BASE_UNITS.VOLUME,\n      prefixes: PREFIXES.NONE,\n      value: 0.0001182941,\n      offset: 0\n    },\n    // 118.2941 mL\n    cp: {\n      name: 'cp',\n      base: BASE_UNITS.VOLUME,\n      prefixes: PREFIXES.NONE,\n      value: 0.0002365882,\n      offset: 0\n    },\n    // 236.5882 mL\n    pt: {\n      name: 'pt',\n      base: BASE_UNITS.VOLUME,\n      prefixes: PREFIXES.NONE,\n      value: 0.0004731765,\n      offset: 0\n    },\n    // 473.1765 mL\n    qt: {\n      name: 'qt',\n      base: BASE_UNITS.VOLUME,\n      prefixes: PREFIXES.NONE,\n      value: 0.0009463529,\n      offset: 0\n    },\n    // 946.3529 mL\n    gal: {\n      name: 'gal',\n      base: BASE_UNITS.VOLUME,\n      prefixes: PREFIXES.NONE,\n      value: 0.003785412,\n      offset: 0\n    },\n    // 3.785412 L\n    bbl: {\n      name: 'bbl',\n      base: BASE_UNITS.VOLUME,\n      prefixes: PREFIXES.NONE,\n      value: 0.1173478,\n      offset: 0\n    },\n    // 117.3478 L\n    obl: {\n      name: 'obl',\n      base: BASE_UNITS.VOLUME,\n      prefixes: PREFIXES.NONE,\n      value: 0.1589873,\n      offset: 0\n    },\n    // 158.9873 L\n    // {name: 'hogshead', base: BASE_UNITS.VOLUME, prefixes: PREFIXES.NONE, value: 0.2384810, offset: 0}, // 238.4810 L // TODO: hh?\n    // Mass\n    g: {\n      name: 'g',\n      base: BASE_UNITS.MASS,\n      prefixes: PREFIXES.SHORT,\n      value: 0.001,\n      offset: 0\n    },\n    gram: {\n      name: 'gram',\n      base: BASE_UNITS.MASS,\n      prefixes: PREFIXES.LONG,\n      value: 0.001,\n      offset: 0\n    },\n    ton: {\n      name: 'ton',\n      base: BASE_UNITS.MASS,\n      prefixes: PREFIXES.SHORT,\n      value: 907.18474,\n      offset: 0\n    },\n    t: {\n      name: 't',\n      base: BASE_UNITS.MASS,\n      prefixes: PREFIXES.SHORT,\n      value: 1000,\n      offset: 0\n    },\n    tonne: {\n      name: 'tonne',\n      base: BASE_UNITS.MASS,\n      prefixes: PREFIXES.LONG,\n      value: 1000,\n      offset: 0\n    },\n    grain: {\n      name: 'grain',\n      base: BASE_UNITS.MASS,\n      prefixes: PREFIXES.NONE,\n      value: 64.79891e-6,\n      offset: 0\n    },\n    dram: {\n      name: 'dram',\n      base: BASE_UNITS.MASS,\n      prefixes: PREFIXES.NONE,\n      value: 1.7718451953125e-3,\n      offset: 0\n    },\n    ounce: {\n      name: 'ounce',\n      base: BASE_UNITS.MASS,\n      prefixes: PREFIXES.NONE,\n      value: 28.349523125e-3,\n      offset: 0\n    },\n    poundmass: {\n      name: 'poundmass',\n      base: BASE_UNITS.MASS,\n      prefixes: PREFIXES.NONE,\n      value: 453.59237e-3,\n      offset: 0\n    },\n    hundredweight: {\n      name: 'hundredweight',\n      base: BASE_UNITS.MASS,\n      prefixes: PREFIXES.NONE,\n      value: 45.359237,\n      offset: 0\n    },\n    stick: {\n      name: 'stick',\n      base: BASE_UNITS.MASS,\n      prefixes: PREFIXES.NONE,\n      value: 115e-3,\n      offset: 0\n    },\n    stone: {\n      name: 'stone',\n      base: BASE_UNITS.MASS,\n      prefixes: PREFIXES.NONE,\n      value: 6.35029318,\n      offset: 0\n    },\n    gr: {\n      name: 'gr',\n      base: BASE_UNITS.MASS,\n      prefixes: PREFIXES.NONE,\n      value: 64.79891e-6,\n      offset: 0\n    },\n    dr: {\n      name: 'dr',\n      base: BASE_UNITS.MASS,\n      prefixes: PREFIXES.NONE,\n      value: 1.7718451953125e-3,\n      offset: 0\n    },\n    oz: {\n      name: 'oz',\n      base: BASE_UNITS.MASS,\n      prefixes: PREFIXES.NONE,\n      value: 28.349523125e-3,\n      offset: 0\n    },\n    lbm: {\n      name: 'lbm',\n      base: BASE_UNITS.MASS,\n      prefixes: PREFIXES.NONE,\n      value: 453.59237e-3,\n      offset: 0\n    },\n    cwt: {\n      name: 'cwt',\n      base: BASE_UNITS.MASS,\n      prefixes: PREFIXES.NONE,\n      value: 45.359237,\n      offset: 0\n    },\n    // Time\n    s: {\n      name: 's',\n      base: BASE_UNITS.TIME,\n      prefixes: PREFIXES.SHORT,\n      value: 1,\n      offset: 0\n    },\n    min: {\n      name: 'min',\n      base: BASE_UNITS.TIME,\n      prefixes: PREFIXES.NONE,\n      value: 60,\n      offset: 0\n    },\n    h: {\n      name: 'h',\n      base: BASE_UNITS.TIME,\n      prefixes: PREFIXES.NONE,\n      value: 3600,\n      offset: 0\n    },\n    second: {\n      name: 'second',\n      base: BASE_UNITS.TIME,\n      prefixes: PREFIXES.LONG,\n      value: 1,\n      offset: 0\n    },\n    sec: {\n      name: 'sec',\n      base: BASE_UNITS.TIME,\n      prefixes: PREFIXES.LONG,\n      value: 1,\n      offset: 0\n    },\n    minute: {\n      name: 'minute',\n      base: BASE_UNITS.TIME,\n      prefixes: PREFIXES.NONE,\n      value: 60,\n      offset: 0\n    },\n    hour: {\n      name: 'hour',\n      base: BASE_UNITS.TIME,\n      prefixes: PREFIXES.NONE,\n      value: 3600,\n      offset: 0\n    },\n    day: {\n      name: 'day',\n      base: BASE_UNITS.TIME,\n      prefixes: PREFIXES.NONE,\n      value: 86400,\n      offset: 0\n    },\n    week: {\n      name: 'week',\n      base: BASE_UNITS.TIME,\n      prefixes: PREFIXES.NONE,\n      value: 7 * 86400,\n      offset: 0\n    },\n    month: {\n      name: 'month',\n      base: BASE_UNITS.TIME,\n      prefixes: PREFIXES.NONE,\n      value: 2629800,\n      // 1/12th of Julian year\n      offset: 0\n    },\n    year: {\n      name: 'year',\n      base: BASE_UNITS.TIME,\n      prefixes: PREFIXES.NONE,\n      value: 31557600,\n      // Julian year\n      offset: 0\n    },\n    decade: {\n      name: 'decade',\n      base: BASE_UNITS.TIME,\n      prefixes: PREFIXES.NONE,\n      value: 315576000,\n      // Julian decade\n      offset: 0\n    },\n    century: {\n      name: 'century',\n      base: BASE_UNITS.TIME,\n      prefixes: PREFIXES.NONE,\n      value: 3155760000,\n      // Julian century\n      offset: 0\n    },\n    millennium: {\n      name: 'millennium',\n      base: BASE_UNITS.TIME,\n      prefixes: PREFIXES.NONE,\n      value: 31557600000,\n      // Julian millennium\n      offset: 0\n    },\n    // Frequency\n    hertz: {\n      name: 'Hertz',\n      base: BASE_UNITS.FREQUENCY,\n      prefixes: PREFIXES.LONG,\n      value: 1,\n      offset: 0,\n      reciprocal: true\n    },\n    Hz: {\n      name: 'Hz',\n      base: BASE_UNITS.FREQUENCY,\n      prefixes: PREFIXES.SHORT,\n      value: 1,\n      offset: 0,\n      reciprocal: true\n    },\n    // Angle\n    rad: {\n      name: 'rad',\n      base: BASE_UNITS.ANGLE,\n      prefixes: PREFIXES.SHORT,\n      value: 1,\n      offset: 0\n    },\n    radian: {\n      name: 'radian',\n      base: BASE_UNITS.ANGLE,\n      prefixes: PREFIXES.LONG,\n      value: 1,\n      offset: 0\n    },\n    // deg = rad / (2*pi) * 360 = rad / 0.017453292519943295769236907684888\n    deg: {\n      name: 'deg',\n      base: BASE_UNITS.ANGLE,\n      prefixes: PREFIXES.SHORT,\n      value: null,\n      // will be filled in by calculateAngleValues()\n      offset: 0\n    },\n    degree: {\n      name: 'degree',\n      base: BASE_UNITS.ANGLE,\n      prefixes: PREFIXES.LONG,\n      value: null,\n      // will be filled in by calculateAngleValues()\n      offset: 0\n    },\n    // grad = rad / (2*pi) * 400  = rad / 0.015707963267948966192313216916399\n    grad: {\n      name: 'grad',\n      base: BASE_UNITS.ANGLE,\n      prefixes: PREFIXES.SHORT,\n      value: null,\n      // will be filled in by calculateAngleValues()\n      offset: 0\n    },\n    gradian: {\n      name: 'gradian',\n      base: BASE_UNITS.ANGLE,\n      prefixes: PREFIXES.LONG,\n      value: null,\n      // will be filled in by calculateAngleValues()\n      offset: 0\n    },\n    // cycle = rad / (2*pi) = rad / 6.2831853071795864769252867665793\n    cycle: {\n      name: 'cycle',\n      base: BASE_UNITS.ANGLE,\n      prefixes: PREFIXES.NONE,\n      value: null,\n      // will be filled in by calculateAngleValues()\n      offset: 0\n    },\n    // arcsec = rad / (3600 * (360 / 2 * pi)) = rad / 0.0000048481368110953599358991410235795\n    arcsec: {\n      name: 'arcsec',\n      base: BASE_UNITS.ANGLE,\n      prefixes: PREFIXES.NONE,\n      value: null,\n      // will be filled in by calculateAngleValues()\n      offset: 0\n    },\n    // arcmin = rad / (60 * (360 / 2 * pi)) = rad / 0.00029088820866572159615394846141477\n    arcmin: {\n      name: 'arcmin',\n      base: BASE_UNITS.ANGLE,\n      prefixes: PREFIXES.NONE,\n      value: null,\n      // will be filled in by calculateAngleValues()\n      offset: 0\n    },\n    // Electric current\n    A: {\n      name: 'A',\n      base: BASE_UNITS.CURRENT,\n      prefixes: PREFIXES.SHORT,\n      value: 1,\n      offset: 0\n    },\n    ampere: {\n      name: 'ampere',\n      base: BASE_UNITS.CURRENT,\n      prefixes: PREFIXES.LONG,\n      value: 1,\n      offset: 0\n    },\n    // Temperature\n    // K(C) = °C + 273.15\n    // K(F) = (°F + 459.67) / 1.8\n    // K(R) = °R / 1.8\n    K: {\n      name: 'K',\n      base: BASE_UNITS.TEMPERATURE,\n      prefixes: PREFIXES.NONE,\n      value: 1,\n      offset: 0\n    },\n    degC: {\n      name: 'degC',\n      base: BASE_UNITS.TEMPERATURE,\n      prefixes: PREFIXES.NONE,\n      value: 1,\n      offset: 273.15\n    },\n    degF: {\n      name: 'degF',\n      base: BASE_UNITS.TEMPERATURE,\n      prefixes: PREFIXES.NONE,\n      value: 1 / 1.8,\n      offset: 459.67\n    },\n    degR: {\n      name: 'degR',\n      base: BASE_UNITS.TEMPERATURE,\n      prefixes: PREFIXES.NONE,\n      value: 1 / 1.8,\n      offset: 0\n    },\n    kelvin: {\n      name: 'kelvin',\n      base: BASE_UNITS.TEMPERATURE,\n      prefixes: PREFIXES.NONE,\n      value: 1,\n      offset: 0\n    },\n    celsius: {\n      name: 'celsius',\n      base: BASE_UNITS.TEMPERATURE,\n      prefixes: PREFIXES.NONE,\n      value: 1,\n      offset: 273.15\n    },\n    fahrenheit: {\n      name: 'fahrenheit',\n      base: BASE_UNITS.TEMPERATURE,\n      prefixes: PREFIXES.NONE,\n      value: 1 / 1.8,\n      offset: 459.67\n    },\n    rankine: {\n      name: 'rankine',\n      base: BASE_UNITS.TEMPERATURE,\n      prefixes: PREFIXES.NONE,\n      value: 1 / 1.8,\n      offset: 0\n    },\n    // amount of substance\n    mol: {\n      name: 'mol',\n      base: BASE_UNITS.AMOUNT_OF_SUBSTANCE,\n      prefixes: PREFIXES.SHORT,\n      value: 1,\n      offset: 0\n    },\n    mole: {\n      name: 'mole',\n      base: BASE_UNITS.AMOUNT_OF_SUBSTANCE,\n      prefixes: PREFIXES.LONG,\n      value: 1,\n      offset: 0\n    },\n    // luminous intensity\n    cd: {\n      name: 'cd',\n      base: BASE_UNITS.LUMINOUS_INTENSITY,\n      prefixes: PREFIXES.SHORT,\n      value: 1,\n      offset: 0\n    },\n    candela: {\n      name: 'candela',\n      base: BASE_UNITS.LUMINOUS_INTENSITY,\n      prefixes: PREFIXES.LONG,\n      value: 1,\n      offset: 0\n    },\n    // TODO: units STERADIAN\n    // {name: 'sr', base: BASE_UNITS.STERADIAN, prefixes: PREFIXES.NONE, value: 1, offset: 0},\n    // {name: 'steradian', base: BASE_UNITS.STERADIAN, prefixes: PREFIXES.NONE, value: 1, offset: 0},\n    // Force\n    N: {\n      name: 'N',\n      base: BASE_UNITS.FORCE,\n      prefixes: PREFIXES.SHORT,\n      value: 1,\n      offset: 0\n    },\n    newton: {\n      name: 'newton',\n      base: BASE_UNITS.FORCE,\n      prefixes: PREFIXES.LONG,\n      value: 1,\n      offset: 0\n    },\n    dyn: {\n      name: 'dyn',\n      base: BASE_UNITS.FORCE,\n      prefixes: PREFIXES.SHORT,\n      value: 0.00001,\n      offset: 0\n    },\n    dyne: {\n      name: 'dyne',\n      base: BASE_UNITS.FORCE,\n      prefixes: PREFIXES.LONG,\n      value: 0.00001,\n      offset: 0\n    },\n    lbf: {\n      name: 'lbf',\n      base: BASE_UNITS.FORCE,\n      prefixes: PREFIXES.NONE,\n      value: 4.4482216152605,\n      offset: 0\n    },\n    poundforce: {\n      name: 'poundforce',\n      base: BASE_UNITS.FORCE,\n      prefixes: PREFIXES.NONE,\n      value: 4.4482216152605,\n      offset: 0\n    },\n    kip: {\n      name: 'kip',\n      base: BASE_UNITS.FORCE,\n      prefixes: PREFIXES.LONG,\n      value: 4448.2216,\n      offset: 0\n    },\n    kilogramforce: {\n      name: 'kilogramforce',\n      base: BASE_UNITS.FORCE,\n      prefixes: PREFIXES.NONE,\n      value: 9.80665,\n      offset: 0\n    },\n    // Energy\n    J: {\n      name: 'J',\n      base: BASE_UNITS.ENERGY,\n      prefixes: PREFIXES.SHORT,\n      value: 1,\n      offset: 0\n    },\n    joule: {\n      name: 'joule',\n      base: BASE_UNITS.ENERGY,\n      prefixes: PREFIXES.SHORT,\n      value: 1,\n      offset: 0\n    },\n    erg: {\n      name: 'erg',\n      base: BASE_UNITS.ENERGY,\n      prefixes: PREFIXES.NONE,\n      value: 1e-7,\n      offset: 0\n    },\n    Wh: {\n      name: 'Wh',\n      base: BASE_UNITS.ENERGY,\n      prefixes: PREFIXES.SHORT,\n      value: 3600,\n      offset: 0\n    },\n    BTU: {\n      name: 'BTU',\n      base: BASE_UNITS.ENERGY,\n      prefixes: PREFIXES.BTU,\n      value: 1055.05585262,\n      offset: 0\n    },\n    eV: {\n      name: 'eV',\n      base: BASE_UNITS.ENERGY,\n      prefixes: PREFIXES.SHORT,\n      value: 1.602176565e-19,\n      offset: 0\n    },\n    electronvolt: {\n      name: 'electronvolt',\n      base: BASE_UNITS.ENERGY,\n      prefixes: PREFIXES.LONG,\n      value: 1.602176565e-19,\n      offset: 0\n    },\n    // Power\n    W: {\n      name: 'W',\n      base: BASE_UNITS.POWER,\n      prefixes: PREFIXES.SHORT,\n      value: 1,\n      offset: 0\n    },\n    watt: {\n      name: 'watt',\n      base: BASE_UNITS.POWER,\n      prefixes: PREFIXES.LONG,\n      value: 1,\n      offset: 0\n    },\n    hp: {\n      name: 'hp',\n      base: BASE_UNITS.POWER,\n      prefixes: PREFIXES.NONE,\n      value: 745.6998715386,\n      offset: 0\n    },\n    // Electrical power units\n    VAR: {\n      name: 'VAR',\n      base: BASE_UNITS.POWER,\n      prefixes: PREFIXES.SHORT,\n      value: Complex.I,\n      offset: 0\n    },\n    VA: {\n      name: 'VA',\n      base: BASE_UNITS.POWER,\n      prefixes: PREFIXES.SHORT,\n      value: 1,\n      offset: 0\n    },\n    // Pressure\n    Pa: {\n      name: 'Pa',\n      base: BASE_UNITS.PRESSURE,\n      prefixes: PREFIXES.SHORT,\n      value: 1,\n      offset: 0\n    },\n    psi: {\n      name: 'psi',\n      base: BASE_UNITS.PRESSURE,\n      prefixes: PREFIXES.NONE,\n      value: 6894.75729276459,\n      offset: 0\n    },\n    atm: {\n      name: 'atm',\n      base: BASE_UNITS.PRESSURE,\n      prefixes: PREFIXES.NONE,\n      value: 101325,\n      offset: 0\n    },\n    bar: {\n      name: 'bar',\n      base: BASE_UNITS.PRESSURE,\n      prefixes: PREFIXES.SHORTLONG,\n      value: 100000,\n      offset: 0\n    },\n    torr: {\n      name: 'torr',\n      base: BASE_UNITS.PRESSURE,\n      prefixes: PREFIXES.NONE,\n      value: 133.322,\n      offset: 0\n    },\n    mmHg: {\n      name: 'mmHg',\n      base: BASE_UNITS.PRESSURE,\n      prefixes: PREFIXES.NONE,\n      value: 133.322,\n      offset: 0\n    },\n    mmH2O: {\n      name: 'mmH2O',\n      base: BASE_UNITS.PRESSURE,\n      prefixes: PREFIXES.NONE,\n      value: 9.80665,\n      offset: 0\n    },\n    cmH2O: {\n      name: 'cmH2O',\n      base: BASE_UNITS.PRESSURE,\n      prefixes: PREFIXES.NONE,\n      value: 98.0665,\n      offset: 0\n    },\n    // Electric charge\n    coulomb: {\n      name: 'coulomb',\n      base: BASE_UNITS.ELECTRIC_CHARGE,\n      prefixes: PREFIXES.LONG,\n      value: 1,\n      offset: 0\n    },\n    C: {\n      name: 'C',\n      base: BASE_UNITS.ELECTRIC_CHARGE,\n      prefixes: PREFIXES.SHORT,\n      value: 1,\n      offset: 0\n    },\n    // Electric capacitance\n    farad: {\n      name: 'farad',\n      base: BASE_UNITS.ELECTRIC_CAPACITANCE,\n      prefixes: PREFIXES.LONG,\n      value: 1,\n      offset: 0\n    },\n    F: {\n      name: 'F',\n      base: BASE_UNITS.ELECTRIC_CAPACITANCE,\n      prefixes: PREFIXES.SHORT,\n      value: 1,\n      offset: 0\n    },\n    // Electric potential\n    volt: {\n      name: 'volt',\n      base: BASE_UNITS.ELECTRIC_POTENTIAL,\n      prefixes: PREFIXES.LONG,\n      value: 1,\n      offset: 0\n    },\n    V: {\n      name: 'V',\n      base: BASE_UNITS.ELECTRIC_POTENTIAL,\n      prefixes: PREFIXES.SHORT,\n      value: 1,\n      offset: 0\n    },\n    // Electric resistance\n    ohm: {\n      name: 'ohm',\n      base: BASE_UNITS.ELECTRIC_RESISTANCE,\n      prefixes: PREFIXES.SHORTLONG,\n      // Both Mohm and megaohm are acceptable\n      value: 1,\n      offset: 0\n    },\n\n    /*\n     * Unicode breaks in browsers if charset is not specified\n    Ω: {\n      name: 'Ω',\n      base: BASE_UNITS.ELECTRIC_RESISTANCE,\n      prefixes: PREFIXES.SHORT,\n      value: 1,\n      offset: 0\n    },\n    */\n    // Electric inductance\n    henry: {\n      name: 'henry',\n      base: BASE_UNITS.ELECTRIC_INDUCTANCE,\n      prefixes: PREFIXES.LONG,\n      value: 1,\n      offset: 0\n    },\n    H: {\n      name: 'H',\n      base: BASE_UNITS.ELECTRIC_INDUCTANCE,\n      prefixes: PREFIXES.SHORT,\n      value: 1,\n      offset: 0\n    },\n    // Electric conductance\n    siemens: {\n      name: 'siemens',\n      base: BASE_UNITS.ELECTRIC_CONDUCTANCE,\n      prefixes: PREFIXES.LONG,\n      value: 1,\n      offset: 0\n    },\n    S: {\n      name: 'S',\n      base: BASE_UNITS.ELECTRIC_CONDUCTANCE,\n      prefixes: PREFIXES.SHORT,\n      value: 1,\n      offset: 0\n    },\n    // Magnetic flux\n    weber: {\n      name: 'weber',\n      base: BASE_UNITS.MAGNETIC_FLUX,\n      prefixes: PREFIXES.LONG,\n      value: 1,\n      offset: 0\n    },\n    Wb: {\n      name: 'Wb',\n      base: BASE_UNITS.MAGNETIC_FLUX,\n      prefixes: PREFIXES.SHORT,\n      value: 1,\n      offset: 0\n    },\n    // Magnetic flux density\n    tesla: {\n      name: 'tesla',\n      base: BASE_UNITS.MAGNETIC_FLUX_DENSITY,\n      prefixes: PREFIXES.LONG,\n      value: 1,\n      offset: 0\n    },\n    T: {\n      name: 'T',\n      base: BASE_UNITS.MAGNETIC_FLUX_DENSITY,\n      prefixes: PREFIXES.SHORT,\n      value: 1,\n      offset: 0\n    },\n    // Binary\n    b: {\n      name: 'b',\n      base: BASE_UNITS.BIT,\n      prefixes: PREFIXES.BINARY_SHORT,\n      value: 1,\n      offset: 0\n    },\n    bits: {\n      name: 'bits',\n      base: BASE_UNITS.BIT,\n      prefixes: PREFIXES.BINARY_LONG,\n      value: 1,\n      offset: 0\n    },\n    B: {\n      name: 'B',\n      base: BASE_UNITS.BIT,\n      prefixes: PREFIXES.BINARY_SHORT,\n      value: 8,\n      offset: 0\n    },\n    bytes: {\n      name: 'bytes',\n      base: BASE_UNITS.BIT,\n      prefixes: PREFIXES.BINARY_LONG,\n      value: 8,\n      offset: 0\n    }\n  }; // aliases (formerly plurals)\n\n  var ALIASES = {\n    meters: 'meter',\n    inches: 'inch',\n    feet: 'foot',\n    yards: 'yard',\n    miles: 'mile',\n    links: 'link',\n    rods: 'rod',\n    chains: 'chain',\n    angstroms: 'angstrom',\n    lt: 'l',\n    litres: 'litre',\n    liter: 'litre',\n    liters: 'litre',\n    teaspoons: 'teaspoon',\n    tablespoons: 'tablespoon',\n    minims: 'minim',\n    fluiddrams: 'fluiddram',\n    fluidounces: 'fluidounce',\n    gills: 'gill',\n    cups: 'cup',\n    pints: 'pint',\n    quarts: 'quart',\n    gallons: 'gallon',\n    beerbarrels: 'beerbarrel',\n    oilbarrels: 'oilbarrel',\n    hogsheads: 'hogshead',\n    gtts: 'gtt',\n    grams: 'gram',\n    tons: 'ton',\n    tonnes: 'tonne',\n    grains: 'grain',\n    drams: 'dram',\n    ounces: 'ounce',\n    poundmasses: 'poundmass',\n    hundredweights: 'hundredweight',\n    sticks: 'stick',\n    lb: 'lbm',\n    lbs: 'lbm',\n    kips: 'kip',\n    kgf: 'kilogramforce',\n    acres: 'acre',\n    hectares: 'hectare',\n    sqfeet: 'sqft',\n    sqyard: 'sqyd',\n    sqmile: 'sqmi',\n    sqmiles: 'sqmi',\n    mmhg: 'mmHg',\n    mmh2o: 'mmH2O',\n    cmh2o: 'cmH2O',\n    seconds: 'second',\n    secs: 'second',\n    minutes: 'minute',\n    mins: 'minute',\n    hours: 'hour',\n    hr: 'hour',\n    hrs: 'hour',\n    days: 'day',\n    weeks: 'week',\n    months: 'month',\n    years: 'year',\n    decades: 'decade',\n    centuries: 'century',\n    millennia: 'millennium',\n    hertz: 'hertz',\n    radians: 'radian',\n    degrees: 'degree',\n    gradians: 'gradian',\n    cycles: 'cycle',\n    arcsecond: 'arcsec',\n    arcseconds: 'arcsec',\n    arcminute: 'arcmin',\n    arcminutes: 'arcmin',\n    BTUs: 'BTU',\n    watts: 'watt',\n    joules: 'joule',\n    amperes: 'ampere',\n    coulombs: 'coulomb',\n    volts: 'volt',\n    ohms: 'ohm',\n    farads: 'farad',\n    webers: 'weber',\n    teslas: 'tesla',\n    electronvolts: 'electronvolt',\n    moles: 'mole',\n    bit: 'bits',\n    byte: 'bytes'\n  };\n  /**\n   * Calculate the values for the angle units.\n   * Value is calculated as number or BigNumber depending on the configuration\n   * @param {{number: 'number' | 'BigNumber'}} config\n   */\n\n  function calculateAngleValues(config) {\n    if (config.number === 'BigNumber') {\n      var pi = createPi(_BigNumber);\n      UNITS.rad.value = new _BigNumber(1);\n      UNITS.deg.value = pi.div(180); // 2 * pi / 360\n\n      UNITS.grad.value = pi.div(200); // 2 * pi / 400\n\n      UNITS.cycle.value = pi.times(2); // 2 * pi\n\n      UNITS.arcsec.value = pi.div(648000); // 2 * pi / 360 / 3600\n\n      UNITS.arcmin.value = pi.div(10800); // 2 * pi / 360 / 60\n    } else {\n      // number\n      UNITS.rad.value = 1;\n      UNITS.deg.value = Math.PI / 180; // 2 * pi / 360\n\n      UNITS.grad.value = Math.PI / 200; // 2 * pi / 400\n\n      UNITS.cycle.value = Math.PI * 2; // 2 * pi\n\n      UNITS.arcsec.value = Math.PI / 648000; // 2 * pi / 360 / 3600\n\n      UNITS.arcmin.value = Math.PI / 10800; // 2 * pi / 360 / 60\n    } // copy to the full names of the angles\n\n\n    UNITS.radian.value = UNITS.rad.value;\n    UNITS.degree.value = UNITS.deg.value;\n    UNITS.gradian.value = UNITS.grad.value;\n  } // apply the angle values now\n\n\n  calculateAngleValues(config);\n\n  if (on) {\n    // recalculate the values on change of configuration\n    on('config', function (curr, prev) {\n      if (curr.number !== prev.number) {\n        calculateAngleValues(curr);\n      }\n    });\n  }\n  /**\n   * A unit system is a set of dimensionally independent base units plus a set of derived units, formed by multiplication and division of the base units, that are by convention used with the unit system.\n   * A user perhaps could issue a command to select a preferred unit system, or use the default (see below).\n   * Auto unit system: The default unit system is updated on the fly anytime a unit is parsed. The corresponding unit in the default unit system is updated, so that answers are given in the same units the user supplies.\n   */\n\n\n  var UNIT_SYSTEMS = {\n    si: {\n      // Base units\n      NONE: {\n        unit: UNIT_NONE,\n        prefix: PREFIXES.NONE['']\n      },\n      LENGTH: {\n        unit: UNITS.m,\n        prefix: PREFIXES.SHORT['']\n      },\n      MASS: {\n        unit: UNITS.g,\n        prefix: PREFIXES.SHORT.k\n      },\n      TIME: {\n        unit: UNITS.s,\n        prefix: PREFIXES.SHORT['']\n      },\n      CURRENT: {\n        unit: UNITS.A,\n        prefix: PREFIXES.SHORT['']\n      },\n      TEMPERATURE: {\n        unit: UNITS.K,\n        prefix: PREFIXES.SHORT['']\n      },\n      LUMINOUS_INTENSITY: {\n        unit: UNITS.cd,\n        prefix: PREFIXES.SHORT['']\n      },\n      AMOUNT_OF_SUBSTANCE: {\n        unit: UNITS.mol,\n        prefix: PREFIXES.SHORT['']\n      },\n      ANGLE: {\n        unit: UNITS.rad,\n        prefix: PREFIXES.SHORT['']\n      },\n      BIT: {\n        unit: UNITS.bits,\n        prefix: PREFIXES.SHORT['']\n      },\n      // Derived units\n      FORCE: {\n        unit: UNITS.N,\n        prefix: PREFIXES.SHORT['']\n      },\n      ENERGY: {\n        unit: UNITS.J,\n        prefix: PREFIXES.SHORT['']\n      },\n      POWER: {\n        unit: UNITS.W,\n        prefix: PREFIXES.SHORT['']\n      },\n      PRESSURE: {\n        unit: UNITS.Pa,\n        prefix: PREFIXES.SHORT['']\n      },\n      ELECTRIC_CHARGE: {\n        unit: UNITS.C,\n        prefix: PREFIXES.SHORT['']\n      },\n      ELECTRIC_CAPACITANCE: {\n        unit: UNITS.F,\n        prefix: PREFIXES.SHORT['']\n      },\n      ELECTRIC_POTENTIAL: {\n        unit: UNITS.V,\n        prefix: PREFIXES.SHORT['']\n      },\n      ELECTRIC_RESISTANCE: {\n        unit: UNITS.ohm,\n        prefix: PREFIXES.SHORT['']\n      },\n      ELECTRIC_INDUCTANCE: {\n        unit: UNITS.H,\n        prefix: PREFIXES.SHORT['']\n      },\n      ELECTRIC_CONDUCTANCE: {\n        unit: UNITS.S,\n        prefix: PREFIXES.SHORT['']\n      },\n      MAGNETIC_FLUX: {\n        unit: UNITS.Wb,\n        prefix: PREFIXES.SHORT['']\n      },\n      MAGNETIC_FLUX_DENSITY: {\n        unit: UNITS.T,\n        prefix: PREFIXES.SHORT['']\n      },\n      FREQUENCY: {\n        unit: UNITS.Hz,\n        prefix: PREFIXES.SHORT['']\n      }\n    }\n  }; // Clone to create the other unit systems\n\n  UNIT_SYSTEMS.cgs = JSON.parse(JSON.stringify(UNIT_SYSTEMS.si));\n  UNIT_SYSTEMS.cgs.LENGTH = {\n    unit: UNITS.m,\n    prefix: PREFIXES.SHORT.c\n  };\n  UNIT_SYSTEMS.cgs.MASS = {\n    unit: UNITS.g,\n    prefix: PREFIXES.SHORT['']\n  };\n  UNIT_SYSTEMS.cgs.FORCE = {\n    unit: UNITS.dyn,\n    prefix: PREFIXES.SHORT['']\n  };\n  UNIT_SYSTEMS.cgs.ENERGY = {\n    unit: UNITS.erg,\n    prefix: PREFIXES.NONE['']\n  }; // there are wholly 4 unique cgs systems for electricity and magnetism,\n  // so let's not worry about it unless somebody complains\n\n  UNIT_SYSTEMS.us = JSON.parse(JSON.stringify(UNIT_SYSTEMS.si));\n  UNIT_SYSTEMS.us.LENGTH = {\n    unit: UNITS.ft,\n    prefix: PREFIXES.NONE['']\n  };\n  UNIT_SYSTEMS.us.MASS = {\n    unit: UNITS.lbm,\n    prefix: PREFIXES.NONE['']\n  };\n  UNIT_SYSTEMS.us.TEMPERATURE = {\n    unit: UNITS.degF,\n    prefix: PREFIXES.NONE['']\n  };\n  UNIT_SYSTEMS.us.FORCE = {\n    unit: UNITS.lbf,\n    prefix: PREFIXES.NONE['']\n  };\n  UNIT_SYSTEMS.us.ENERGY = {\n    unit: UNITS.BTU,\n    prefix: PREFIXES.BTU['']\n  };\n  UNIT_SYSTEMS.us.POWER = {\n    unit: UNITS.hp,\n    prefix: PREFIXES.NONE['']\n  };\n  UNIT_SYSTEMS.us.PRESSURE = {\n    unit: UNITS.psi,\n    prefix: PREFIXES.NONE['']\n  }; // Add additional unit systems here.\n  // Choose a unit system to seed the auto unit system.\n\n  UNIT_SYSTEMS.auto = JSON.parse(JSON.stringify(UNIT_SYSTEMS.si)); // Set the current unit system\n\n  var currentUnitSystem = UNIT_SYSTEMS.auto;\n  /**\n   * Set a unit system for formatting derived units.\n   * @param {string} [name] The name of the unit system.\n   */\n\n  Unit.setUnitSystem = function (name) {\n    if (hasOwnProperty(UNIT_SYSTEMS, name)) {\n      currentUnitSystem = UNIT_SYSTEMS[name];\n    } else {\n      throw new Error('Unit system ' + name + ' does not exist. Choices are: ' + Object.keys(UNIT_SYSTEMS).join(', '));\n    }\n  };\n  /**\n   * Return the current unit system.\n   * @return {string} The current unit system.\n   */\n\n\n  Unit.getUnitSystem = function () {\n    for (var _key in UNIT_SYSTEMS) {\n      if (hasOwnProperty(UNIT_SYSTEMS, _key)) {\n        if (UNIT_SYSTEMS[_key] === currentUnitSystem) {\n          return _key;\n        }\n      }\n    }\n  };\n  /**\n   * Converters to convert from number to an other numeric type like BigNumber\n   * or Fraction\n   */\n\n\n  Unit.typeConverters = {\n    BigNumber: function BigNumber(x) {\n      return new _BigNumber(x + ''); // stringify to prevent constructor error\n    },\n    Fraction: function Fraction(x) {\n      return new _Fraction(x);\n    },\n    Complex: function Complex(x) {\n      return x;\n    },\n    number: function number(x) {\n      return x;\n    }\n  };\n  /**\n   * Retrieve the right converter function corresponding with this unit's\n   * value\n   *\n   * @memberof Unit\n   * @return {Function}\n   */\n\n  Unit.prototype._numberConverter = function () {\n    var convert = Unit.typeConverters[this.valueType()];\n\n    if (convert) {\n      return convert;\n    }\n\n    throw new TypeError('Unsupported Unit value type \"' + this.valueType() + '\"');\n  };\n  /**\n   * Retrieve the right convertor function corresponding with the type\n   * of provided exampleValue.\n   *\n   * @param {string} type   A string 'number', 'BigNumber', or 'Fraction'\n   *                        In case of an unknown type,\n   * @return {Function}\n   */\n\n\n  Unit._getNumberConverter = function (type) {\n    if (!Unit.typeConverters[type]) {\n      throw new TypeError('Unsupported type \"' + type + '\"');\n    }\n\n    return Unit.typeConverters[type];\n  }; // Add dimensions to each built-in unit\n\n\n  for (var _key2 in UNITS) {\n    if (hasOwnProperty(UNITS, _key2)) {\n      var unit = UNITS[_key2];\n      unit.dimensions = unit.base.dimensions;\n    }\n  } // Create aliases\n\n\n  for (var _name2 in ALIASES) {\n    if (hasOwnProperty(ALIASES, _name2)) {\n      var _unit2 = UNITS[ALIASES[_name2]];\n      var alias = {};\n\n      for (var _key3 in _unit2) {\n        if (hasOwnProperty(_unit2, _key3)) {\n          alias[_key3] = _unit2[_key3];\n        }\n      }\n\n      alias.name = _name2;\n      UNITS[_name2] = alias;\n    }\n  }\n  /**\n   * Checks if a character is a valid latin letter (upper or lower case).\n   * Note that this function can be overridden, for example to allow support of other alphabets.\n   * @param {string} c Tested character\n   */\n\n\n  Unit.isValidAlpha = function isValidAlpha(c) {\n    return /^[a-zA-Z]$/.test(c);\n  };\n\n  function assertUnitNameIsValid(name) {\n    for (var i = 0; i < name.length; i++) {\n      c = name.charAt(i);\n\n      if (i === 0 && !Unit.isValidAlpha(c)) {\n        throw new Error('Invalid unit name (must begin with alpha character): \"' + name + '\"');\n      }\n\n      if (i > 0 && !(Unit.isValidAlpha(c) || isDigit(c))) {\n        throw new Error('Invalid unit name (only alphanumeric characters are allowed): \"' + name + '\"');\n      }\n    }\n  }\n  /**\n   * Wrapper around createUnitSingle.\n   * Example:\n   *  createUnit({\n   *    foo: { },\n   *    bar: {\n   *      definition: 'kg/foo',\n   *      aliases: ['ba', 'barr', 'bars'],\n   *      offset: 200\n   *    },\n   *    baz: '4 bar'\n   *  },\n   *  {\n   *    override: true\n   *  })\n   * @param {object} obj      Object map. Each key becomes a unit which is defined by its value.\n   * @param {object} options\n   */\n\n\n  Unit.createUnit = function (obj, options) {\n    if (typeof obj !== 'object') {\n      throw new TypeError(\"createUnit expects first parameter to be of type 'Object'\");\n    } // Remove all units and aliases we are overriding\n\n\n    if (options && options.override) {\n      for (var _key4 in obj) {\n        if (hasOwnProperty(obj, _key4)) {\n          Unit.deleteUnit(_key4);\n        }\n\n        if (obj[_key4].aliases) {\n          for (var i = 0; i < obj[_key4].aliases.length; i++) {\n            Unit.deleteUnit(obj[_key4].aliases[i]);\n          }\n        }\n      }\n    } // TODO: traverse multiple times until all units have been added\n\n\n    var lastUnit;\n\n    for (var _key5 in obj) {\n      if (hasOwnProperty(obj, _key5)) {\n        lastUnit = Unit.createUnitSingle(_key5, obj[_key5]);\n      }\n    }\n\n    return lastUnit;\n  };\n  /**\n   * Create a user-defined unit and register it with the Unit type.\n   * Example:\n   *  createUnitSingle('knot', '0.514444444 m/s')\n   *  createUnitSingle('acre', new Unit(43560, 'ft^2'))\n   *\n   * @param {string} name      The name of the new unit. Must be unique. Example: 'knot'\n   * @param {string, Unit, Object} definition      Definition of the unit in terms\n   * of existing units. For example, '0.514444444 m / s'. Can be a Unit, a string,\n   * or an Object. If an Object, may have the following properties:\n   *   - definition {string|Unit} The definition of this unit.\n   *   - prefixes {string} \"none\", \"short\", \"long\", \"binary_short\", or \"binary_long\".\n   *     The default is \"none\".\n   *   - aliases {Array} Array of strings. Example: ['knots', 'kt', 'kts']\n   *   - offset {Numeric} An offset to apply when converting from the unit. For\n   *     example, the offset for celsius is 273.15 and the offset for farhenheit\n   *     is 459.67. Default is 0.\n   *   - baseName {string} If the unit's dimension does not match that of any other\n   *     base unit, the name of the newly create base unit. Otherwise, this property\n   *     has no effect.\n   *\n   * @param {Object} options   (optional) An object containing any of the following\n   * properties:\n   *   - override {boolean} Whether this unit should be allowed to override existing\n   *     units.\n   *\n   * @return {Unit}\n   */\n\n\n  Unit.createUnitSingle = function (name, obj, options) {\n    if (typeof obj === 'undefined' || obj === null) {\n      obj = {};\n    }\n\n    if (typeof name !== 'string') {\n      throw new TypeError(\"createUnitSingle expects first parameter to be of type 'string'\");\n    } // Check collisions with existing units\n\n\n    if (hasOwnProperty(UNITS, name)) {\n      throw new Error('Cannot create unit \"' + name + '\": a unit with that name already exists');\n    } // TODO: Validate name for collisions with other built-in functions (like abs or cos, for example), and for acceptable variable names. For example, '42' is probably not a valid unit. Nor is '%', since it is also an operator.\n\n\n    assertUnitNameIsValid(name);\n    var defUnit = null; // The Unit from which the new unit will be created.\n\n    var aliases = [];\n    var offset = 0;\n    var definition;\n    var prefixes;\n    var baseName;\n\n    if (obj && obj.type === 'Unit') {\n      defUnit = obj.clone();\n    } else if (typeof obj === 'string') {\n      if (obj !== '') {\n        definition = obj;\n      }\n    } else if (typeof obj === 'object') {\n      definition = obj.definition;\n      prefixes = obj.prefixes;\n      offset = obj.offset;\n      baseName = obj.baseName;\n\n      if (obj.aliases) {\n        aliases = obj.aliases.valueOf(); // aliases could be a Matrix, so convert to Array\n      }\n    } else {\n      throw new TypeError('Cannot create unit \"' + name + '\" from \"' + obj.toString() + '\": expecting \"string\" or \"Unit\" or \"Object\"');\n    }\n\n    if (aliases) {\n      for (var i = 0; i < aliases.length; i++) {\n        if (hasOwnProperty(UNITS, aliases[i])) {\n          throw new Error('Cannot create alias \"' + aliases[i] + '\": a unit with that name already exists');\n        }\n      }\n    }\n\n    if (definition && typeof definition === 'string' && !defUnit) {\n      try {\n        defUnit = Unit.parse(definition, {\n          allowNoUnits: true\n        });\n      } catch (ex) {\n        ex.message = 'Could not create unit \"' + name + '\" from \"' + definition + '\": ' + ex.message;\n        throw ex;\n      }\n    } else if (definition && definition.type === 'Unit') {\n      defUnit = definition.clone();\n    }\n\n    aliases = aliases || [];\n    offset = offset || 0;\n\n    if (prefixes && prefixes.toUpperCase) {\n      prefixes = PREFIXES[prefixes.toUpperCase()] || PREFIXES.NONE;\n    } else {\n      prefixes = PREFIXES.NONE;\n    } // If defUnit is null, it is because the user did not\n    // specify a defintion. So create a new base dimension.\n\n\n    var newUnit = {};\n\n    if (!defUnit) {\n      // Add a new base dimension\n      baseName = baseName || name + '_STUFF'; // foo --> foo_STUFF, or the essence of foo\n\n      if (BASE_DIMENSIONS.indexOf(baseName) >= 0) {\n        throw new Error('Cannot create new base unit \"' + name + '\": a base unit with that name already exists (and cannot be overridden)');\n      }\n\n      BASE_DIMENSIONS.push(baseName); // Push 0 onto existing base units\n\n      for (var b in BASE_UNITS) {\n        if (hasOwnProperty(BASE_UNITS, b)) {\n          BASE_UNITS[b].dimensions[BASE_DIMENSIONS.length - 1] = 0;\n        }\n      } // Add the new base unit\n\n\n      var newBaseUnit = {\n        dimensions: []\n      };\n\n      for (var _i6 = 0; _i6 < BASE_DIMENSIONS.length; _i6++) {\n        newBaseUnit.dimensions[_i6] = 0;\n      }\n\n      newBaseUnit.dimensions[BASE_DIMENSIONS.length - 1] = 1;\n      newBaseUnit.key = baseName;\n      BASE_UNITS[baseName] = newBaseUnit;\n      newUnit = {\n        name,\n        value: 1,\n        dimensions: BASE_UNITS[baseName].dimensions.slice(0),\n        prefixes,\n        offset,\n        base: BASE_UNITS[baseName]\n      };\n      currentUnitSystem[baseName] = {\n        unit: newUnit,\n        prefix: PREFIXES.NONE['']\n      };\n    } else {\n      newUnit = {\n        name,\n        value: defUnit.value,\n        dimensions: defUnit.dimensions.slice(0),\n        prefixes,\n        offset\n      }; // Create a new base if no matching base exists\n\n      var anyMatch = false;\n\n      for (var _i7 in BASE_UNITS) {\n        if (hasOwnProperty(BASE_UNITS, _i7)) {\n          var match = true;\n\n          for (var j = 0; j < BASE_DIMENSIONS.length; j++) {\n            if (Math.abs((newUnit.dimensions[j] || 0) - (BASE_UNITS[_i7].dimensions[j] || 0)) > 1e-12) {\n              match = false;\n              break;\n            }\n          }\n\n          if (match) {\n            anyMatch = true;\n            newUnit.base = BASE_UNITS[_i7];\n            break;\n          }\n        }\n      }\n\n      if (!anyMatch) {\n        baseName = baseName || name + '_STUFF'; // foo --> foo_STUFF, or the essence of foo\n        // Add the new base unit\n\n        var _newBaseUnit = {\n          dimensions: defUnit.dimensions.slice(0)\n        };\n        _newBaseUnit.key = baseName;\n        BASE_UNITS[baseName] = _newBaseUnit;\n        currentUnitSystem[baseName] = {\n          unit: newUnit,\n          prefix: PREFIXES.NONE['']\n        };\n        newUnit.base = BASE_UNITS[baseName];\n      }\n    }\n\n    Unit.UNITS[name] = newUnit;\n\n    for (var _i8 = 0; _i8 < aliases.length; _i8++) {\n      var aliasName = aliases[_i8];\n      var _alias = {};\n\n      for (var _key6 in newUnit) {\n        if (hasOwnProperty(newUnit, _key6)) {\n          _alias[_key6] = newUnit[_key6];\n        }\n      }\n\n      _alias.name = aliasName;\n      Unit.UNITS[aliasName] = _alias;\n    } // delete the memoization cache, since adding a new unit to the array\n    // invalidates all old results\n\n\n    delete _findUnit.cache;\n    return new Unit(null, name);\n  };\n\n  Unit.deleteUnit = function (name) {\n    delete Unit.UNITS[name];\n  }; // expose arrays with prefixes, dimensions, units, systems\n\n\n  Unit.PREFIXES = PREFIXES;\n  Unit.BASE_DIMENSIONS = BASE_DIMENSIONS;\n  Unit.BASE_UNITS = BASE_UNITS;\n  Unit.UNIT_SYSTEMS = UNIT_SYSTEMS;\n  Unit.UNITS = UNITS;\n  return Unit;\n}, {\n  isClass: true\n});"],"mappings":"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"},"metadata":{},"sourceType":"module"}
{"ast":null,"code":"/**\n * typed-function\n *\n * Type checking for JavaScript functions\n *\n * https://github.com/josdejong/typed-function\n */\n'use strict';\n\n(function (root, factory) {\n  if (typeof define === 'function' && define.amd) {\n    // AMD. Register as an anonymous module.\n    define([], factory);\n  } else if (typeof exports === 'object') {\n    // OldNode. Does not work with strict CommonJS, but\n    // only CommonJS-like environments that support module.exports,\n    // like OldNode.\n    module.exports = factory();\n  } else {\n    // Browser globals (root is window)\n    root.typed = factory();\n  }\n})(this, function () {\n  function ok() {\n    return true;\n  }\n\n  function notOk() {\n    return false;\n  }\n\n  function undef() {\n    return undefined;\n  }\n\n  const NOT_TYPED_FUNCTION = 'Argument is not a typed-function.';\n  /**\n   * @typedef {{\n   *   params: Param[],\n   *   fn: function,\n   *   test: function,\n   *   implementation: function\n   * }} Signature\n   *\n   * @typedef {{\n   *   types: Type[],\n   *   hasAny: boolean,\n   *   hasConversion: boolean,\n   *   restParam: boolean\n   * }} Param\n   *\n   * @typedef {{\n   *   name: string,\n   *   typeIndex: number,\n   *   test: function,\n   *   isAny: boolean,\n   *   conversion?: ConversionDef,\n   *   conversionIndex: number,\n   * }} Type\n   *\n   * @typedef {{\n   *   from: string,\n   *   to: string,\n   *   convert: function (*) : *\n   * }} ConversionDef\n   *\n   * @typedef {{\n   *   name: string,\n   *   test: function(*) : boolean,\n   *   isAny?: boolean\n   * }} TypeDef\n   */\n  // create a new instance of typed-function\n\n  function create() {\n    // data type tests\n\n    /**\n     * Returns true if the argument is a non-null \"plain\" object\n     */\n    function isPlainObject(x) {\n      return typeof x === 'object' && x !== null && x.constructor === Object;\n    }\n\n    const _types = [{\n      name: 'number',\n      test: function (x) {\n        return typeof x === 'number';\n      }\n    }, {\n      name: 'string',\n      test: function (x) {\n        return typeof x === 'string';\n      }\n    }, {\n      name: 'boolean',\n      test: function (x) {\n        return typeof x === 'boolean';\n      }\n    }, {\n      name: 'Function',\n      test: function (x) {\n        return typeof x === 'function';\n      }\n    }, {\n      name: 'Array',\n      test: Array.isArray\n    }, {\n      name: 'Date',\n      test: function (x) {\n        return x instanceof Date;\n      }\n    }, {\n      name: 'RegExp',\n      test: function (x) {\n        return x instanceof RegExp;\n      }\n    }, {\n      name: 'Object',\n      test: isPlainObject\n    }, {\n      name: 'null',\n      test: function (x) {\n        return x === null;\n      }\n    }, {\n      name: 'undefined',\n      test: function (x) {\n        return x === undefined;\n      }\n    }];\n    const anyType = {\n      name: 'any',\n      test: ok,\n      isAny: true\n    }; // Data structures to track the types. As these are local variables in\n    // create(), each typed universe will get its own copy, but the variables\n    // will only be accessible through the (closures of the) functions supplied\n    // as properties of the typed object, not directly.\n    // These will be initialized in clear() below\n\n    let typeMap; // primary store of all types\n\n    let typeList; // Array of just type names, for the sake of ordering\n    // And similar data structures for the type conversions:\n\n    let nConversions = 0; // the actual conversions are stored on a property of the destination types\n    // This is a temporary object, will be replaced with a function at the end\n\n    let typed = {\n      createCount: 0\n    };\n    /**\n     * Takes a type name and returns the corresponding official type object\n     * for that type.\n     *\n     * @param {string} typeSpec\n     * @returns {TypeDef} type\n     */\n\n    function findType(typeName) {\n      const type = typeMap.get(typeName);\n\n      if (type) {\n        return type;\n      } // Remainder is error handling\n\n\n      let message = 'Unknown type \"' + typeName + '\"';\n      const name = typeName.toLowerCase();\n      let otherName;\n\n      for (otherName of typeList) {\n        if (otherName.toLowerCase() === name) {\n          message += '. Did you mean \"' + otherName + '\" ?';\n          break;\n        }\n      }\n\n      throw new TypeError(message);\n    }\n    /**\n     * Adds an array `types` of type definitions to this typed instance.\n     * Each type definition should be an object with properties:\n     * 'name' - a string giving the name of the type; 'test' - function\n     * returning a boolean that tests membership in the type; and optionally\n     * 'isAny' - true only for the 'any' type.\n     *\n     * The second optional argument, `before`, gives the name of a type that\n     * these types should be added before. The new types are added in the\n     * order specified.\n     * @param {TypeDef[]} types\n     * @param {string} ['any'] before\n     */\n\n\n    function addTypes(types) {\n      let beforeSpec = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 'any';\n      const beforeIndex = beforeSpec ? findType(beforeSpec).index : typeList.length;\n      const newTypes = [];\n\n      for (var i = 0; i < types.length; ++i) {\n        if (!types[i] || typeof types[i].name !== 'string' || typeof types[i].test !== 'function') {\n          throw new TypeError('Object with properties {name: string, test: function} expected');\n        }\n\n        const typeName = types[i].name;\n\n        if (typeMap.has(typeName)) {\n          throw new TypeError('Duplicate type name \"' + typeName + '\"');\n        }\n\n        newTypes.push(typeName);\n        typeMap.set(typeName, {\n          name: typeName,\n          test: types[i].test,\n          isAny: types[i].isAny,\n          index: beforeIndex + i,\n          conversionsTo: [] // Newly added type can't have any conversions to it\n\n        });\n      } // update the typeList\n\n\n      const affectedTypes = typeList.slice(beforeIndex);\n      typeList = typeList.slice(0, beforeIndex).concat(newTypes).concat(affectedTypes); // Fix the indices\n\n      for (var i = beforeIndex + newTypes.length; i < typeList.length; ++i) {\n        typeMap.get(typeList[i]).index = i;\n      }\n    }\n    /**\n     * Removes all types and conversions from this typed instance.\n     * May cause previously constructed typed-functions to throw\n     * strange errors when they are called with types that do not\n     * match any of their signatures.\n     */\n\n\n    function clear() {\n      typeMap = new Map();\n      typeList = [];\n      nConversions = 0;\n      addTypes([anyType], false);\n    } // initialize the types to the default list\n\n\n    clear();\n    addTypes(_types);\n    /**\n     * Removes all conversions, leaving the types alone.\n     */\n\n    function clearConversions() {\n      let typeName;\n\n      for (typeName of typeList) {\n        typeMap.get(typeName).conversionsTo = [];\n      }\n\n      nConversions = 0;\n    }\n    /**\n     * Find the type names that match a value.\n     * @param {*} value\n     * @return {string[]} Array of names of types for which\n     *                  the type test matches the value.\n     */\n\n\n    function findTypeNames(value) {\n      const matches = typeList.filter(name => {\n        const type = typeMap.get(name);\n        return !type.isAny && type.test(value);\n      });\n\n      if (matches.length) {\n        return matches;\n      }\n\n      return ['any'];\n    }\n    /**\n     * Check if an entity is a typed function created by any instance\n     * @param {any} entity\n     * @returns {boolean}\n     */\n\n\n    function isTypedFunction(entity) {\n      return entity && typeof entity === 'function' && '_typedFunctionData' in entity;\n    }\n    /**\n     * Find a specific signature from a (composed) typed function, for example:\n     *\n     *   typed.findSignature(fn, ['number', 'string'])\n     *   typed.findSignature(fn, 'number, string')\n     *   typed.findSignature(fn, 'number,string', {exact: true})\n     *\n     * This function findSignature will by default return the best match to\n     * the given signature, possibly employing type conversions.\n     *\n     * The (optional) third argument is a plain object giving options\n     * controlling the signature search. Currently the only implemented\n     * option is `exact`: if specified as true (default is false), only\n     * exact matches will be returned (i.e. signatures for which `fn` was\n     * directly defined). Note that a (possibly different) type matching\n     * `any`, or one or more instances of TYPE matching `...TYPE` are\n     * considered exact matches in this regard, as no conversions are used.\n     *\n     * This function returns a \"signature\" object, as does `typed.resolve()`,\n     * which is a plain object with four keys: `params` (the array of parameters\n     * for this signature), `fn` (the originally supplied function for this\n     * signature), `test` (a generated function that determines if an argument\n     * list matches this signature, and `implementation` (the function to call\n     * on a matching argument list, that performs conversions if necessary and\n     * then calls the originally supplied function).\n     *\n     * @param {Function} fn                   A typed-function\n     * @param {string | string[]} signature\n     *     Signature to be found, can be an array or a comma separated string.\n     * @param {object} options  Controls the signature search as documented\n     * @return {{ params: Param[], fn: function, test: function, implementation: function }}\n     *     Returns the matching signature, or throws an error when no signature\n     *     is found.\n     */\n\n\n    function findSignature(fn, signature, exactSpec) {\n      if (!isTypedFunction(fn)) {\n        throw new TypeError(NOT_TYPED_FUNCTION);\n      } // Canonicalize input\n\n\n      const exact = exactSpec && exactSpec.exact;\n      const stringSignature = Array.isArray(signature) ? signature.join(',') : signature;\n      const params = parseSignature(stringSignature);\n      const canonicalSignature = stringifyParams(params); // First hope we get lucky and exactly match a signature\n\n      if (!exact || canonicalSignature in fn.signatures) {\n        // OK, we can check the internal signatures\n        const match = fn._typedFunctionData.signatureMap.get(canonicalSignature);\n\n        if (match) {\n          return match;\n        }\n      } // Oh well, we did not; so we have to go back and check the parameters\n      // one by one, in order to catch things like `any` and rest params.\n      // Note here we can assume there is at least one parameter, because\n      // the empty signature would have matched successfully above.\n\n\n      const nParams = params.length;\n      let remainingSignatures;\n\n      if (exact) {\n        remainingSignatures = [];\n        let name;\n\n        for (name in fn.signatures) {\n          remainingSignatures.push(fn._typedFunctionData.signatureMap.get(name));\n        }\n      } else {\n        remainingSignatures = fn._typedFunctionData.signatures;\n      }\n\n      for (var i = 0; i < nParams; ++i) {\n        const want = params[i];\n        const filteredSignatures = [];\n        let possibility;\n\n        for (possibility of remainingSignatures) {\n          const have = getParamAtIndex(possibility.params, i);\n\n          if (!have || want.restParam && !have.restParam) {\n            continue;\n          }\n\n          if (!have.hasAny) {\n            // have to check all of the wanted types are available\n            const haveTypes = paramTypeSet(have);\n\n            if (want.types.some(wtype => !haveTypes.has(wtype.name))) {\n              continue;\n            }\n          } // OK, this looks good\n\n\n          filteredSignatures.push(possibility);\n        }\n\n        remainingSignatures = filteredSignatures;\n        if (remainingSignatures.length === 0) break;\n      } // Return the first remaining signature that was totally matched:\n\n\n      let candidate;\n\n      for (candidate of remainingSignatures) {\n        if (candidate.params.length <= nParams) {\n          return candidate;\n        }\n      }\n\n      throw new TypeError('Signature not found (signature: ' + (fn.name || 'unnamed') + '(' + stringifyParams(params, ', ') + '))');\n    }\n    /**\n     * Find the proper function to call for a specific signature from\n     * a (composed) typed function, for example:\n     *\n     *   typed.find(fn, ['number', 'string'])\n     *   typed.find(fn, 'number, string')\n     *   typed.find(fn, 'number,string', {exact: true})\n     *\n     * This function find will by default return the best match to\n     * the given signature, possibly employing type conversions (and returning\n     * a function that will perform those conversions as needed). The\n     * (optional) third argument is a plain object giving options contolling\n     * the signature search. Currently only the option `exact` is implemented,\n     * which defaults to \"false\". If `exact` is specified as true, then only\n     * exact matches will be returned (i.e. signatures for which `fn` was\n     * directly defined). Uses of `any` and `...TYPE` are considered exact if\n     * no conversions are necessary to apply the corresponding function.\n     *\n     * @param {Function} fn                   A typed-function\n     * @param {string | string[]} signature\n     *     Signature to be found, can be an array or a comma separated string.\n     * @param {object} options  Controls the signature match as documented\n     * @return {function}\n     *     Returns the function to call for the given signature, or throws an\n     *     error if no match is found.\n     */\n\n\n    function find(fn, signature, exact) {\n      return findSignature(fn, signature, exact).implementation;\n    }\n    /**\n     * Convert a given value to another data type, specified by type name.\n     *\n     * @param {*} value\n     * @param {string} type\n     */\n\n\n    function convert(value, typeName) {\n      // check conversion is needed\n      const type = findType(typeName);\n\n      if (type.test(value)) {\n        return value;\n      }\n\n      const conversions = type.conversionsTo;\n\n      if (conversions.length === 0) {\n        throw new Error('There are no conversions to ' + typeName + ' defined.');\n      }\n\n      for (var i = 0; i < conversions.length; i++) {\n        const fromType = findType(conversions[i].from);\n\n        if (fromType.test(value)) {\n          return conversions[i].convert(value);\n        }\n      }\n\n      throw new Error('Cannot convert ' + value + ' to ' + typeName);\n    }\n    /**\n     * Stringify parameters in a normalized way\n     * @param {Param[]} params\n     * @param {string} [','] separator\n     * @return {string}\n     */\n\n\n    function stringifyParams(params) {\n      let separator = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : ',';\n      return params.map(p => p.name).join(separator);\n    }\n    /**\n     * Parse a parameter, like \"...number | boolean\"\n     * @param {string} param\n     * @return {Param} param\n     */\n\n\n    function parseParam(param) {\n      const restParam = param.indexOf('...') === 0;\n      const types = !restParam ? param : param.length > 3 ? param.slice(3) : 'any';\n      const typeDefs = types.split('|').map(s => findType(s.trim()));\n      let hasAny = false;\n      let paramName = restParam ? '...' : '';\n      const exactTypes = typeDefs.map(function (type) {\n        hasAny = type.isAny || hasAny;\n        paramName += type.name + '|';\n        return {\n          name: type.name,\n          typeIndex: type.index,\n          test: type.test,\n          isAny: type.isAny,\n          conversion: null,\n          conversionIndex: -1\n        };\n      });\n      return {\n        types: exactTypes,\n        name: paramName.slice(0, -1),\n        // remove trailing '|' from above\n        hasAny: hasAny,\n        hasConversion: false,\n        restParam: restParam\n      };\n    }\n    /**\n     * Expands a parsed parameter with the types available from currently\n     * defined conversions.\n     * @param {Param} param\n     * @return {Param} param\n     */\n\n\n    function expandParam(param) {\n      const typeNames = param.types.map(t => t.name);\n      const matchingConversions = availableConversions(typeNames);\n      let hasAny = param.hasAny;\n      let newName = param.name;\n      const convertibleTypes = matchingConversions.map(function (conversion) {\n        const type = findType(conversion.from);\n        hasAny = type.isAny || hasAny;\n        newName += '|' + conversion.from;\n        return {\n          name: conversion.from,\n          typeIndex: type.index,\n          test: type.test,\n          isAny: type.isAny,\n          conversion: conversion,\n          conversionIndex: conversion.index\n        };\n      });\n      return {\n        types: param.types.concat(convertibleTypes),\n        name: newName,\n        hasAny: hasAny,\n        hasConversion: convertibleTypes.length > 0,\n        restParam: param.restParam\n      };\n    }\n    /**\n     * Return the set of type names in a parameter.\n     * Caches the result for efficiency\n     *\n     * @param {Param} param\n     * @return {Set<string>} typenames\n     */\n\n\n    function paramTypeSet(param) {\n      if (!param.typeSet) {\n        param.typeSet = new Set();\n        param.types.forEach(type => param.typeSet.add(type.name));\n      }\n\n      return param.typeSet;\n    }\n    /**\n     * Parse a signature with comma separated parameters,\n     * like \"number | boolean, ...string\"\n     *\n     * @param {string} signature\n     * @return {Param[]} params\n     */\n\n\n    function parseSignature(rawSignature) {\n      const params = [];\n\n      if (typeof rawSignature !== 'string') {\n        throw new TypeError('Signatures must be strings');\n      }\n\n      const signature = rawSignature.trim();\n\n      if (signature === '') {\n        return params;\n      }\n\n      const rawParams = signature.split(',');\n\n      for (var i = 0; i < rawParams.length; ++i) {\n        const parsedParam = parseParam(rawParams[i].trim());\n\n        if (parsedParam.restParam && i !== rawParams.length - 1) {\n          throw new SyntaxError('Unexpected rest parameter \"' + rawParams[i] + '\": ' + 'only allowed for the last parameter');\n        } // if invalid, short-circuit (all of the types may have been filtered)\n\n\n        if (parsedParam.types.length == 0) {\n          return null;\n        }\n\n        params.push(parsedParam);\n      }\n\n      return params;\n    }\n    /**\n     * Test whether a set of params contains a restParam\n     * @param {Param[]} params\n     * @return {boolean} Returns true when the last parameter is a restParam\n     */\n\n\n    function hasRestParam(params) {\n      const param = last(params);\n      return param ? param.restParam : false;\n    }\n    /**\n     * Create a type test for a single parameter, which can have one or multiple\n     * types.\n     * @param {Param} param\n     * @return {function(x: *) : boolean} Returns a test function\n     */\n\n\n    function compileTest(param) {\n      if (!param || param.types.length === 0) {\n        // nothing to do\n        return ok;\n      } else if (param.types.length === 1) {\n        return findType(param.types[0].name).test;\n      } else if (param.types.length === 2) {\n        const test0 = findType(param.types[0].name).test;\n        const test1 = findType(param.types[1].name).test;\n        return function or(x) {\n          return test0(x) || test1(x);\n        };\n      } else {\n        // param.types.length > 2\n        const tests = param.types.map(function (type) {\n          return findType(type.name).test;\n        });\n        return function or(x) {\n          for (var i = 0; i < tests.length; i++) {\n            if (tests[i](x)) {\n              return true;\n            }\n          }\n\n          return false;\n        };\n      }\n    }\n    /**\n     * Create a test for all parameters of a signature\n     * @param {Param[]} params\n     * @return {function(args: Array<*>) : boolean}\n     */\n\n\n    function compileTests(params) {\n      let tests, test0, test1;\n\n      if (hasRestParam(params)) {\n        // variable arguments like '...number'\n        tests = initial(params).map(compileTest);\n        const varIndex = tests.length;\n        const lastTest = compileTest(last(params));\n\n        const testRestParam = function (args) {\n          for (var i = varIndex; i < args.length; i++) {\n            if (!lastTest(args[i])) {\n              return false;\n            }\n          }\n\n          return true;\n        };\n\n        return function testArgs(args) {\n          for (var i = 0; i < tests.length; i++) {\n            if (!tests[i](args[i])) {\n              return false;\n            }\n          }\n\n          return testRestParam(args) && args.length >= varIndex + 1;\n        };\n      } else {\n        // no variable arguments\n        if (params.length === 0) {\n          return function testArgs(args) {\n            return args.length === 0;\n          };\n        } else if (params.length === 1) {\n          test0 = compileTest(params[0]);\n          return function testArgs(args) {\n            return test0(args[0]) && args.length === 1;\n          };\n        } else if (params.length === 2) {\n          test0 = compileTest(params[0]);\n          test1 = compileTest(params[1]);\n          return function testArgs(args) {\n            return test0(args[0]) && test1(args[1]) && args.length === 2;\n          };\n        } else {\n          // arguments.length > 2\n          tests = params.map(compileTest);\n          return function testArgs(args) {\n            for (var i = 0; i < tests.length; i++) {\n              if (!tests[i](args[i])) {\n                return false;\n              }\n            }\n\n            return args.length === tests.length;\n          };\n        }\n      }\n    }\n    /**\n     * Find the parameter at a specific index of a Params list.\n     * Handles rest parameters.\n     * @param {Param[]} params\n     * @param {number} index\n     * @return {Param | null} Returns the matching parameter when found,\n     *                        null otherwise.\n     */\n\n\n    function getParamAtIndex(params, index) {\n      return index < params.length ? params[index] : hasRestParam(params) ? last(params) : null;\n    }\n    /**\n     * Get all type names of a parameter\n     * @param {Params[]} params\n     * @param {number} index\n     * @return {string[]} Returns an array with type names\n     */\n\n\n    function getTypeSetAtIndex(params, index) {\n      const param = getParamAtIndex(params, index);\n\n      if (!param) {\n        return new Set();\n      }\n\n      return paramTypeSet(param);\n    }\n    /**\n     * Returns the name of a type\n     * @param {Type} type\n     * @return {string} Returns the type name\n     */\n\n\n    function getTypeName(type) {\n      return type.name;\n    }\n    /**\n     * Test whether a type is an exact type or conversion\n     * @param {Type} type\n     * @return {boolean} Returns true when\n     */\n\n\n    function isExactType(type) {\n      return type.conversion === null || type.conversion === undefined;\n    }\n    /**\n     * Helper function for creating error messages: create an array with\n     * all available types on a specific argument index.\n     * @param {Signature[]} signatures\n     * @param {number} index\n     * @return {string[]} Returns an array with available types\n     */\n\n\n    function mergeExpectedParams(signatures, index) {\n      const typeSet = new Set();\n      signatures.forEach(signature => {\n        const paramSet = getTypeSetAtIndex(signature.params, index);\n        let name;\n\n        for (name of paramSet) {\n          typeSet.add(name);\n        }\n      });\n      return typeSet.has('any') ? ['any'] : Array.from(typeSet);\n    }\n    /**\n     * Create\n     * @param {string} name             The name of the function\n     * @param {array.<*>} args          The actual arguments passed to the function\n     * @param {Signature[]} signatures  A list with available signatures\n     * @return {TypeError} Returns a type error with additional data\n     *                     attached to it in the property `data`\n     */\n\n\n    function createError(name, args, signatures) {\n      let err, expected;\n\n      const _name = name || 'unnamed'; // test for wrong type at some index\n\n\n      let matchingSignatures = signatures;\n\n      for (var index = 0; index < args.length; index++) {\n        const nextMatchingDefs = [];\n        matchingSignatures.forEach(signature => {\n          const param = getParamAtIndex(signature.params, index);\n          const test = compileTest(param);\n\n          if ((index < signature.params.length || hasRestParam(signature.params)) && test(args[index])) {\n            nextMatchingDefs.push(signature);\n          }\n        });\n\n        if (nextMatchingDefs.length === 0) {\n          // no matching signatures anymore, throw error \"wrong type\"\n          expected = mergeExpectedParams(matchingSignatures, index);\n\n          if (expected.length > 0) {\n            const actualTypes = findTypeNames(args[index]);\n            err = new TypeError('Unexpected type of argument in function ' + _name + ' (expected: ' + expected.join(' or ') + ', actual: ' + actualTypes.join(' | ') + ', index: ' + index + ')');\n            err.data = {\n              category: 'wrongType',\n              fn: _name,\n              index: index,\n              actual: actualTypes,\n              expected: expected\n            };\n            return err;\n          }\n        } else {\n          matchingSignatures = nextMatchingDefs;\n        }\n      } // test for too few arguments\n\n\n      const lengths = matchingSignatures.map(function (signature) {\n        return hasRestParam(signature.params) ? Infinity : signature.params.length;\n      });\n\n      if (args.length < Math.min.apply(null, lengths)) {\n        expected = mergeExpectedParams(matchingSignatures, index);\n        err = new TypeError('Too few arguments in function ' + _name + ' (expected: ' + expected.join(' or ') + ', index: ' + args.length + ')');\n        err.data = {\n          category: 'tooFewArgs',\n          fn: _name,\n          index: args.length,\n          expected: expected\n        };\n        return err;\n      } // test for too many arguments\n\n\n      const maxLength = Math.max.apply(null, lengths);\n\n      if (args.length > maxLength) {\n        err = new TypeError('Too many arguments in function ' + _name + ' (expected: ' + maxLength + ', actual: ' + args.length + ')');\n        err.data = {\n          category: 'tooManyArgs',\n          fn: _name,\n          index: args.length,\n          expectedLength: maxLength\n        };\n        return err;\n      } // Generic error\n\n\n      const argTypes = [];\n\n      for (var i = 0; i < args.length; ++i) {\n        argTypes.push(findTypeNames(args[i]).join('|'));\n      }\n\n      err = new TypeError('Arguments of type \"' + argTypes.join(', ') + '\" do not match any of the defined signatures of function ' + _name + '.');\n      err.data = {\n        category: 'mismatch',\n        actual: argTypes\n      };\n      return err;\n    }\n    /**\n     * Find the lowest index of all exact types of a parameter (no conversions)\n     * @param {Param} param\n     * @return {number} Returns the index of the lowest type in typed.types\n     */\n\n\n    function getLowestTypeIndex(param) {\n      let min = typeList.length + 1;\n\n      for (var i = 0; i < param.types.length; i++) {\n        if (isExactType(param.types[i])) {\n          min = Math.min(min, param.types[i].typeIndex);\n        }\n      }\n\n      return min;\n    }\n    /**\n     * Find the lowest index of the conversion of all types of the parameter\n     * having a conversion\n     * @param {Param} param\n     * @return {number} Returns the lowest index of the conversions of this type\n     */\n\n\n    function getLowestConversionIndex(param) {\n      let min = nConversions + 1;\n\n      for (var i = 0; i < param.types.length; i++) {\n        if (!isExactType(param.types[i])) {\n          min = Math.min(min, param.types[i].conversionIndex);\n        }\n      }\n\n      return min;\n    }\n    /**\n     * Compare two params\n     * @param {Param} param1\n     * @param {Param} param2\n     * @return {number} returns -1 when param1 must get a lower\n     *                  index than param2, 1 when the opposite,\n     *                  or zero when both are equal\n     */\n\n\n    function compareParams(param1, param2) {\n      // We compare a number of metrics on a param in turn:\n      // 1) 'any' parameters are the least preferred\n      if (param1.hasAny) {\n        if (!param2.hasAny) {\n          return 1;\n        }\n      } else if (param2.hasAny) {\n        return -1;\n      } // 2) Prefer non-rest to rest parameters\n\n\n      if (param1.restParam) {\n        if (!param2.restParam) {\n          return 1;\n        }\n      } else if (param2.restParam) {\n        return -1;\n      } // 3) Prefer exact type match to conversions\n\n\n      if (param1.hasConversion) {\n        if (!param2.hasConversion) {\n          return 1;\n        }\n      } else if (param2.hasConversion) {\n        return -1;\n      } // 4) Prefer lower type index:\n\n\n      const typeDiff = getLowestTypeIndex(param1) - getLowestTypeIndex(param2);\n\n      if (typeDiff < 0) {\n        return -1;\n      }\n\n      if (typeDiff > 0) {\n        return 1;\n      } // 5) Prefer lower conversion index\n\n\n      const convDiff = getLowestConversionIndex(param1) - getLowestConversionIndex(param2);\n\n      if (convDiff < 0) {\n        return -1;\n      }\n\n      if (convDiff > 0) {\n        return 1;\n      } // Don't have a basis for preference\n\n\n      return 0;\n    }\n    /**\n     * Compare two signatures\n     * @param {Signature} signature1\n     * @param {Signature} signature2\n     * @return {number} returns a negative number when param1 must get a lower\n     *                  index than param2, a positive number when the opposite,\n     *                  or zero when both are equal\n     */\n\n\n    function compareSignatures(signature1, signature2) {\n      const pars1 = signature1.params;\n      const pars2 = signature2.params;\n      const last1 = last(pars1);\n      const last2 = last(pars2);\n      const hasRest1 = hasRestParam(pars1);\n      const hasRest2 = hasRestParam(pars2); // We compare a number of metrics on signatures in turn:\n      // 1) An \"any rest param\" is least preferred\n\n      if (hasRest1 && last1.hasAny) {\n        if (!hasRest2 || !last2.hasAny) {\n          return 1;\n        }\n      } else if (hasRest2 && last2.hasAny) {\n        return -1;\n      } // 2) Minimize the number of 'any' parameters\n\n\n      let any1 = 0;\n      let conv1 = 0;\n      let par;\n\n      for (par of pars1) {\n        if (par.hasAny) ++any1;\n        if (par.hasConversion) ++conv1;\n      }\n\n      let any2 = 0;\n      let conv2 = 0;\n\n      for (par of pars2) {\n        if (par.hasAny) ++any2;\n        if (par.hasConversion) ++conv2;\n      }\n\n      if (any1 !== any2) {\n        return any1 - any2;\n      } // 3) A conversion rest param is less preferred\n\n\n      if (hasRest1 && last1.hasConversion) {\n        if (!hasRest2 || !last2.hasConversion) {\n          return 1;\n        }\n      } else if (hasRest2 && last2.hasConversion) {\n        return -1;\n      } // 4) Minimize the number of conversions\n\n\n      if (conv1 !== conv2) {\n        return conv1 - conv2;\n      } // 5) Prefer no rest param\n\n\n      if (hasRest1) {\n        if (!hasRest2) {\n          return 1;\n        }\n      } else if (hasRest2) {\n        return -1;\n      } // 6) Prefer shorter with rest param, longer without\n\n\n      const lengthCriterion = (pars1.length - pars2.length) * (hasRest1 ? -1 : 1);\n\n      if (lengthCriterion !== 0) {\n        return lengthCriterion;\n      } // Signatures are identical in each of the above metrics.\n      // In particular, they are the same length.\n      // We can therefore compare the parameters one by one.\n      // First we count which signature has more preferred parameters.\n\n\n      const comparisons = [];\n      let tc = 0;\n\n      for (let i = 0; i < pars1.length; ++i) {\n        const thisComparison = compareParams(pars1[i], pars2[i]);\n        comparisons.push(thisComparison);\n        tc += thisComparison;\n      }\n\n      if (tc !== 0) {\n        return tc;\n      } // They have the same number of preferred parameters, so go by the\n      // earliest parameter in which we have a preference.\n      // In other words, dispatch is driven somewhat more by earlier\n      // parameters than later ones.\n\n\n      let c;\n\n      for (c of comparisons) {\n        if (c !== 0) {\n          return c;\n        }\n      } // It's a tossup:\n\n\n      return 0;\n    }\n    /**\n     * Produce a list of all conversions from distinct types to one of\n     * the given types.\n     *\n     * @param {string[]} typeNames\n     * @return {ConversionDef[]} Returns the conversions that are available\n     *                        resulting in any given type (if any)\n     */\n\n\n    function availableConversions(typeNames) {\n      if (typeNames.length === 0) {\n        return [];\n      }\n\n      const types = typeNames.map(findType);\n\n      if (typeNames.length > 1) {\n        types.sort((t1, t2) => t1.index - t2.index);\n      }\n\n      let matches = types[0].conversionsTo;\n\n      if (typeNames.length === 1) {\n        return matches;\n      }\n\n      matches = matches.concat([]); // shallow copy the matches\n      // Since the types are now in index order, we just want the first\n      // occurrence of any from type:\n\n      const knownTypes = new Set(typeNames);\n\n      for (var i = 1; i < types.length; ++i) {\n        let newMatch;\n\n        for (newMatch of types[i].conversionsTo) {\n          if (!knownTypes.has(newMatch.from)) {\n            matches.push(newMatch);\n            knownTypes.add(newMatch.from);\n          }\n        }\n      }\n\n      return matches;\n    }\n    /**\n     * Preprocess arguments before calling the original function:\n     * - if needed convert the parameters\n     * - in case of rest parameters, move the rest parameters into an Array\n     * @param {Param[]} params\n     * @param {function} fn\n     * @return {function} Returns a wrapped function\n     */\n\n\n    function compileArgsPreprocessing(params, fn) {\n      let fnConvert = fn; // TODO: can we make this wrapper function smarter/simpler?\n\n      if (params.some(p => p.hasConversion)) {\n        const restParam = hasRestParam(params);\n        const compiledConversions = params.map(compileArgConversion);\n\n        fnConvert = function convertArgs() {\n          const args = [];\n          const last = restParam ? arguments.length - 1 : arguments.length;\n\n          for (var i = 0; i < last; i++) {\n            args[i] = compiledConversions[i](arguments[i]);\n          }\n\n          if (restParam) {\n            args[last] = arguments[last].map(compiledConversions[last]);\n          }\n\n          return fn.apply(this, args);\n        };\n      }\n\n      let fnPreprocess = fnConvert;\n\n      if (hasRestParam(params)) {\n        const offset = params.length - 1;\n\n        fnPreprocess = function preprocessRestParams() {\n          return fnConvert.apply(this, slice(arguments, 0, offset).concat([slice(arguments, offset)]));\n        };\n      }\n\n      return fnPreprocess;\n    }\n    /**\n     * Compile conversion for a parameter to the right type\n     * @param {Param} param\n     * @return {function} Returns the wrapped function that will convert arguments\n     *\n     */\n\n\n    function compileArgConversion(param) {\n      let test0, test1, conversion0, conversion1;\n      const tests = [];\n      const conversions = [];\n      param.types.forEach(function (type) {\n        if (type.conversion) {\n          tests.push(findType(type.conversion.from).test);\n          conversions.push(type.conversion.convert);\n        }\n      }); // create optimized conversion functions depending on the number of conversions\n\n      switch (conversions.length) {\n        case 0:\n          return function convertArg(arg) {\n            return arg;\n          };\n\n        case 1:\n          test0 = tests[0];\n          conversion0 = conversions[0];\n          return function convertArg(arg) {\n            if (test0(arg)) {\n              return conversion0(arg);\n            }\n\n            return arg;\n          };\n\n        case 2:\n          test0 = tests[0];\n          test1 = tests[1];\n          conversion0 = conversions[0];\n          conversion1 = conversions[1];\n          return function convertArg(arg) {\n            if (test0(arg)) {\n              return conversion0(arg);\n            }\n\n            if (test1(arg)) {\n              return conversion1(arg);\n            }\n\n            return arg;\n          };\n\n        default:\n          return function convertArg(arg) {\n            for (var i = 0; i < conversions.length; i++) {\n              if (tests[i](arg)) {\n                return conversions[i](arg);\n              }\n            }\n\n            return arg;\n          };\n      }\n    }\n    /**\n     * Split params with union types in to separate params.\n     *\n     * For example:\n     *\n     *     splitParams([['Array', 'Object'], ['string', 'RegExp'])\n     *     // returns:\n     *     // [\n     *     //   ['Array', 'string'],\n     *     //   ['Array', 'RegExp'],\n     *     //   ['Object', 'string'],\n     *     //   ['Object', 'RegExp']\n     *     // ]\n     *\n     * @param {Param[]} params\n     * @return {Param[]}\n     */\n\n\n    function splitParams(params) {\n      function _splitParams(params, index, paramsSoFar) {\n        if (index < params.length) {\n          const param = params[index];\n          let resultingParams = [];\n\n          if (param.restParam) {\n            // split the types of a rest parameter in two:\n            // one with only exact types, and one with exact types and conversions\n            const exactTypes = param.types.filter(isExactType);\n\n            if (exactTypes.length < param.types.length) {\n              resultingParams.push({\n                types: exactTypes,\n                name: '...' + exactTypes.map(t => t.name).join('|'),\n                hasAny: exactTypes.some(t => t.isAny),\n                hasConversion: false,\n                restParam: true\n              });\n            }\n\n            resultingParams.push(param);\n          } else {\n            // split all the types of a regular parameter into one type per param\n            resultingParams = param.types.map(function (type) {\n              return {\n                types: [type],\n                name: type.name,\n                hasAny: type.isAny,\n                hasConversion: type.conversion,\n                restParam: false\n              };\n            });\n          } // recurse over the groups with types\n\n\n          return flatMap(resultingParams, function (nextParam) {\n            return _splitParams(params, index + 1, paramsSoFar.concat([nextParam]));\n          });\n        } else {\n          // we've reached the end of the parameters.\n          return [paramsSoFar];\n        }\n      }\n\n      return _splitParams(params, 0, []);\n    }\n    /**\n     * Test whether two param lists represent conflicting signatures\n     * @param {Param[]} params1\n     * @param {Param[]} params2\n     * @return {boolean} Returns true when the signatures conflict, false otherwise.\n     */\n\n\n    function conflicting(params1, params2) {\n      const ii = Math.max(params1.length, params2.length);\n\n      for (var i = 0; i < ii; i++) {\n        const typeSet1 = getTypeSetAtIndex(params1, i);\n        const typeSet2 = getTypeSetAtIndex(params2, i);\n        let overlap = false;\n        let name;\n\n        for (name of typeSet2) {\n          if (typeSet1.has(name)) {\n            overlap = true;\n            break;\n          }\n        }\n\n        if (!overlap) {\n          return false;\n        }\n      }\n\n      const len1 = params1.length;\n      const len2 = params2.length;\n      const restParam1 = hasRestParam(params1);\n      const restParam2 = hasRestParam(params2);\n      return restParam1 ? restParam2 ? len1 === len2 : len2 >= len1 : restParam2 ? len1 >= len2 : len1 === len2;\n    }\n    /**\n     * Helper function for `resolveReferences` that returns a copy of\n     * functionList wihe any prior resolutions cleared out, in case we are\n     * recycling signatures from a prior typed function construction.\n     *\n     * @param {Array.<function|typed-reference>} functionList\n     * @return {Array.<function|typed-reference>}\n     */\n\n\n    function clearResolutions(functionList) {\n      return functionList.map(fn => {\n        if (isReferToSelf(fn)) {\n          return referToSelf(fn.referToSelf.callback);\n        }\n\n        if (isReferTo(fn)) {\n          return makeReferTo(fn.referTo.references, fn.referTo.callback);\n        }\n\n        return fn;\n      });\n    }\n    /**\n     * Take a list of references, a list of functions functionList, and a\n     * signatureMap indexing signatures into functionList, and return\n     * the list of resolutions, or a false-y value if they don't all\n     * resolve in a valid way (yet).\n     *\n     * @param {string[]} references\n     * @param {Array<function|typed-reference} functionList\n     * @param {Object.<string, integer>} signatureMap\n     * @return {function[] | false} resolutions\n     */\n\n\n    function collectResolutions(references, functionList, signatureMap) {\n      const resolvedReferences = [];\n      let reference;\n\n      for (reference of references) {\n        let resolution = signatureMap[reference];\n\n        if (typeof resolution !== 'number') {\n          throw new TypeError('No definition for referenced signature \"' + reference + '\"');\n        }\n\n        resolution = functionList[resolution];\n\n        if (typeof resolution !== 'function') {\n          return false;\n        }\n\n        resolvedReferences.push(resolution);\n      }\n\n      return resolvedReferences;\n    }\n    /**\n     * Resolve any references in the functionList for the typed function\n     * itself. The signatureMap tells which index in the functionList a\n     * given signature should be mapped to (for use in resolving typed.referTo)\n     * and self provides the destions of a typed.referToSelf.\n     *\n     * @param {Array<function | typed-reference-object>} functionList\n     * @param {Object.<string, function>} signatureMap\n     * @param {function} self  The typed-function itself\n     * @return {Array<function>} The list of resolved functions\n     */\n\n\n    function resolveReferences(functionList, signatureMap, self) {\n      let resolvedFunctions = clearResolutions(functionList);\n      let leftUnresolved = true;\n\n      while (leftUnresolved) {\n        leftUnresolved = false;\n        let nothingResolved = true;\n\n        for (var i = 0; i < resolvedFunctions.length; ++i) {\n          const fn = resolvedFunctions[i];\n\n          if (isReferToSelf(fn)) {\n            resolvedFunctions[i] = fn.referToSelf.callback(self); // Preserve reference in case signature is reused someday:\n\n            resolvedFunctions[i].referToSelf = fn.referToSelf;\n            nothingResolved = false;\n          } else if (isReferTo(fn)) {\n            const resolvedReferences = collectResolutions(fn.referTo.references, resolvedFunctions, signatureMap);\n\n            if (resolvedReferences) {\n              resolvedFunctions[i] = fn.referTo.callback.apply(this, resolvedReferences); // Preserve reference in case signature is reused someday:\n\n              resolvedFunctions[i].referTo = fn.referTo;\n              nothingResolved = false;\n            } else {\n              leftUnresolved = true;\n            }\n          }\n        }\n\n        if (nothingResolved && leftUnresolved) {\n          throw new SyntaxError('Circular reference detected in resolving typed.referTo');\n        }\n      }\n\n      return resolvedFunctions;\n    }\n    /**\n     * Validate whether any of the function bodies contains a self-reference\n     * usage like `this(...)` or `this.signatures`. This self-referencing is\n     * deprecated since typed-function v3. It has been replaced with\n     * the functions typed.referTo and typed.referToSelf.\n     * @param {Object.<string, function>} signaturesMap\n     */\n\n\n    function validateDeprecatedThis(signaturesMap) {\n      // TODO: remove this deprecation warning logic some day (it's introduced in v3)\n      // match occurrences like 'this(' and 'this.signatures'\n      var deprecatedThisRegex = /\\bthis(\\(|\\.signatures\\b)/;\n      Object.keys(signaturesMap).forEach(signature => {\n        var fn = signaturesMap[signature];\n\n        if (deprecatedThisRegex.test(fn.toString())) {\n          throw new SyntaxError('Using `this` to self-reference a function ' + 'is deprecated since typed-function@3. ' + 'Use typed.referTo and typed.referToSelf instead.');\n        }\n      });\n    }\n    /**\n     * Create a typed function\n     * @param {String} name               The name for the typed function\n     * @param {Object.<string, function>} signaturesMap\n     *                                    An object with one or\n     *                                    multiple signatures as key, and the\n     *                                    function corresponding to the\n     *                                    signature as value.\n     * @return {function}  Returns the created typed function.\n     */\n\n\n    function createTypedFunction(name, rawSignaturesMap) {\n      typed.createCount++;\n\n      if (Object.keys(rawSignaturesMap).length === 0) {\n        throw new SyntaxError('No signatures provided');\n      }\n\n      if (typed.warnAgainstDeprecatedThis) {\n        validateDeprecatedThis(rawSignaturesMap);\n      } // Main processing loop for signatures\n\n\n      const parsedParams = [];\n      const originalFunctions = [];\n      const signaturesMap = {};\n      const preliminarySignatures = []; // may have duplicates from conversions\n\n      let signature;\n\n      for (signature in rawSignaturesMap) {\n        // A) Protect against polluted Object prototype:\n        if (!Object.prototype.hasOwnProperty.call(rawSignaturesMap, signature)) {\n          continue;\n        } // B) Parse the signature\n\n\n        const params = parseSignature(signature);\n        if (!params) continue; // C) Check for conflicts\n\n        parsedParams.forEach(function (pp) {\n          if (conflicting(pp, params)) {\n            throw new TypeError('Conflicting signatures \"' + stringifyParams(pp) + '\" and \"' + stringifyParams(params) + '\".');\n          }\n        });\n        parsedParams.push(params); // D) Store the provided function and add conversions\n\n        const functionIndex = originalFunctions.length;\n        originalFunctions.push(rawSignaturesMap[signature]);\n        const conversionParams = params.map(expandParam); // E) Split the signatures and collect them up\n\n        let sp;\n\n        for (sp of splitParams(conversionParams)) {\n          const spName = stringifyParams(sp);\n          preliminarySignatures.push({\n            params: sp,\n            name: spName,\n            fn: functionIndex\n          });\n\n          if (sp.every(p => !p.hasConversion)) {\n            signaturesMap[spName] = functionIndex;\n          }\n        }\n      }\n\n      preliminarySignatures.sort(compareSignatures); // Note the forward reference to the_typed_fn\n\n      const resolvedFunctions = resolveReferences(originalFunctions, signaturesMap, the_typed_fn); // Fill in the proper function for each signature\n\n      let s;\n\n      for (s in signaturesMap) {\n        if (Object.prototype.hasOwnProperty.call(signaturesMap, s)) {\n          signaturesMap[s] = resolvedFunctions[signaturesMap[s]];\n        }\n      }\n\n      const signatures = [];\n      const internalSignatureMap = new Map(); // benchmarks faster than object\n\n      for (s of preliminarySignatures) {\n        // Note it's only safe to eliminate duplicates like this\n        // _after_ the signature sorting step above; otherwise we might\n        // remove the wrong one.\n        if (!internalSignatureMap.has(s.name)) {\n          s.fn = resolvedFunctions[s.fn];\n          signatures.push(s);\n          internalSignatureMap.set(s.name, s);\n        }\n      } // we create a highly optimized checks for the first couple of signatures with max 2 arguments\n\n\n      const ok0 = signatures[0] && signatures[0].params.length <= 2 && !hasRestParam(signatures[0].params);\n      const ok1 = signatures[1] && signatures[1].params.length <= 2 && !hasRestParam(signatures[1].params);\n      const ok2 = signatures[2] && signatures[2].params.length <= 2 && !hasRestParam(signatures[2].params);\n      const ok3 = signatures[3] && signatures[3].params.length <= 2 && !hasRestParam(signatures[3].params);\n      const ok4 = signatures[4] && signatures[4].params.length <= 2 && !hasRestParam(signatures[4].params);\n      const ok5 = signatures[5] && signatures[5].params.length <= 2 && !hasRestParam(signatures[5].params);\n      const allOk = ok0 && ok1 && ok2 && ok3 && ok4 && ok5; // compile the tests\n\n      for (var i = 0; i < signatures.length; ++i) {\n        signatures[i].test = compileTests(signatures[i].params);\n      }\n\n      const test00 = ok0 ? compileTest(signatures[0].params[0]) : notOk;\n      const test10 = ok1 ? compileTest(signatures[1].params[0]) : notOk;\n      const test20 = ok2 ? compileTest(signatures[2].params[0]) : notOk;\n      const test30 = ok3 ? compileTest(signatures[3].params[0]) : notOk;\n      const test40 = ok4 ? compileTest(signatures[4].params[0]) : notOk;\n      const test50 = ok5 ? compileTest(signatures[5].params[0]) : notOk;\n      const test01 = ok0 ? compileTest(signatures[0].params[1]) : notOk;\n      const test11 = ok1 ? compileTest(signatures[1].params[1]) : notOk;\n      const test21 = ok2 ? compileTest(signatures[2].params[1]) : notOk;\n      const test31 = ok3 ? compileTest(signatures[3].params[1]) : notOk;\n      const test41 = ok4 ? compileTest(signatures[4].params[1]) : notOk;\n      const test51 = ok5 ? compileTest(signatures[5].params[1]) : notOk; // compile the functions\n\n      for (var i = 0; i < signatures.length; ++i) {\n        signatures[i].implementation = compileArgsPreprocessing(signatures[i].params, signatures[i].fn);\n      }\n\n      const fn0 = ok0 ? signatures[0].implementation : undef;\n      const fn1 = ok1 ? signatures[1].implementation : undef;\n      const fn2 = ok2 ? signatures[2].implementation : undef;\n      const fn3 = ok3 ? signatures[3].implementation : undef;\n      const fn4 = ok4 ? signatures[4].implementation : undef;\n      const fn5 = ok5 ? signatures[5].implementation : undef;\n      const len0 = ok0 ? signatures[0].params.length : -1;\n      const len1 = ok1 ? signatures[1].params.length : -1;\n      const len2 = ok2 ? signatures[2].params.length : -1;\n      const len3 = ok3 ? signatures[3].params.length : -1;\n      const len4 = ok4 ? signatures[4].params.length : -1;\n      const len5 = ok5 ? signatures[5].params.length : -1; // simple and generic, but also slow\n\n      const iStart = allOk ? 6 : 0;\n      const iEnd = signatures.length; // de-reference ahead for execution speed:\n\n      const tests = signatures.map(s => s.test);\n      const fns = signatures.map(s => s.implementation);\n\n      const generic = function generic() {\n        'use strict';\n\n        for (var i = iStart; i < iEnd; i++) {\n          if (tests[i](arguments)) {\n            return fns[i].apply(this, arguments);\n          }\n        }\n\n        return typed.onMismatch(name, arguments, signatures);\n      }; // create the typed function\n      // fast, specialized version. Falls back to the slower, generic one if needed\n\n\n      function the_typed_fn(arg0, arg1) {\n        'use strict';\n\n        if (arguments.length === len0 && test00(arg0) && test01(arg1)) {\n          return fn0.apply(this, arguments);\n        }\n\n        if (arguments.length === len1 && test10(arg0) && test11(arg1)) {\n          return fn1.apply(this, arguments);\n        }\n\n        if (arguments.length === len2 && test20(arg0) && test21(arg1)) {\n          return fn2.apply(this, arguments);\n        }\n\n        if (arguments.length === len3 && test30(arg0) && test31(arg1)) {\n          return fn3.apply(this, arguments);\n        }\n\n        if (arguments.length === len4 && test40(arg0) && test41(arg1)) {\n          return fn4.apply(this, arguments);\n        }\n\n        if (arguments.length === len5 && test50(arg0) && test51(arg1)) {\n          return fn5.apply(this, arguments);\n        }\n\n        return generic.apply(this, arguments);\n      } // attach name the typed function\n\n\n      try {\n        Object.defineProperty(the_typed_fn, 'name', {\n          value: name\n        });\n      } catch (err) {// old browsers do not support Object.defineProperty and some don't support setting the name property\n        // the function name is not essential for the functioning, it's mostly useful for debugging,\n        // so it's fine to have unnamed functions.\n      } // attach signatures to the function.\n      // This property is close to the original collection of signatures\n      // used to create the typed-function, just with unions split:\n\n\n      the_typed_fn.signatures = signaturesMap; // Store internal data for functions like resolve, find, etc.\n      // Also serves as the flag that this is a typed-function\n\n      the_typed_fn._typedFunctionData = {\n        signatures: signatures,\n        signatureMap: internalSignatureMap\n      };\n      return the_typed_fn;\n    }\n    /**\n     * Action to take on mismatch\n     * @param {string} name      Name of function that was attempted to be called\n     * @param {Array} args       Actual arguments to the call\n     * @param {Array} signatures Known signatures of the named typed-function\n     */\n\n\n    function _onMismatch(name, args, signatures) {\n      throw createError(name, args, signatures);\n    }\n    /**\n     * Return all but the last items of an array or function Arguments\n     * @param {Array | Arguments} arr\n     * @return {Array}\n     */\n\n\n    function initial(arr) {\n      return slice(arr, 0, arr.length - 1);\n    }\n    /**\n     * return the last item of an array or function Arguments\n     * @param {Array | Arguments} arr\n     * @return {*}\n     */\n\n\n    function last(arr) {\n      return arr[arr.length - 1];\n    }\n    /**\n     * Slice an array or function Arguments\n     * @param {Array | Arguments | IArguments} arr\n     * @param {number} start\n     * @param {number} [end]\n     * @return {Array}\n     */\n\n\n    function slice(arr, start, end) {\n      return Array.prototype.slice.call(arr, start, end);\n    }\n    /**\n     * Return the first item from an array for which test(arr[i]) returns true\n     * @param {Array} arr\n     * @param {function} test\n     * @return {* | undefined} Returns the first matching item\n     *                         or undefined when there is no match\n     */\n\n\n    function findInArray(arr, test) {\n      for (var i = 0; i < arr.length; i++) {\n        if (test(arr[i])) {\n          return arr[i];\n        }\n      }\n\n      return undefined;\n    }\n    /**\n     * Flat map the result invoking a callback for every item in an array.\n     * https://gist.github.com/samgiles/762ee337dff48623e729\n     * @param {Array} arr\n     * @param {function} callback\n     * @return {Array}\n     */\n\n\n    function flatMap(arr, callback) {\n      return Array.prototype.concat.apply([], arr.map(callback));\n    }\n    /**\n     * Create a reference callback to one or multiple signatures\n     *\n     * Syntax:\n     *\n     *     typed.referTo(signature1, signature2, ..., function callback(fn1, fn2, ...) {\n     *       // ...\n     *     })\n     *\n     * @returns {{referTo: {references: string[], callback}}}\n     */\n\n\n    function referTo() {\n      let references = initial(arguments).map(s => stringifyParams(parseSignature(s)));\n      const callback = last(arguments);\n\n      if (typeof callback !== 'function') {\n        throw new TypeError('Callback function expected as last argument');\n      }\n\n      return makeReferTo(references, callback);\n    }\n\n    function makeReferTo(references, callback) {\n      return {\n        referTo: {\n          references: references,\n          callback: callback\n        }\n      };\n    }\n    /**\n     * Create a reference callback to the typed-function itself\n     *\n     * @param {(self: function) => function} callback\n     * @returns {{referToSelf: { callback: function }}}\n     */\n\n\n    function referToSelf(callback) {\n      if (typeof callback !== 'function') {\n        throw new TypeError('Callback function expected as first argument');\n      }\n\n      return {\n        referToSelf: {\n          callback: callback\n        }\n      };\n    }\n    /**\n     * Test whether something is a referTo object, holding a list with reference\n     * signatures and a callback.\n     *\n     * @param {Object | function} objectOrFn\n     * @returns {boolean}\n     */\n\n\n    function isReferTo(objectOrFn) {\n      return objectOrFn && typeof objectOrFn.referTo === 'object' && Array.isArray(objectOrFn.referTo.references) && typeof objectOrFn.referTo.callback === 'function';\n    }\n    /**\n     * Test whether something is a referToSelf object, holding a callback where\n     * to pass `self`.\n     *\n     * @param {Object | function} objectOrFn\n     * @returns {boolean}\n     */\n\n\n    function isReferToSelf(objectOrFn) {\n      return objectOrFn && typeof objectOrFn.referToSelf === 'object' && typeof objectOrFn.referToSelf.callback === 'function';\n    }\n    /**\n     * Check if name is (A) new, (B) a match, or (C) a mismatch; and throw\n     * an error in case (C).\n     *\n     * @param { string | undefined } nameSoFar\n     * @param { string | undefined } newName\n     * @returns { string } updated name\n     */\n\n\n    function checkName(nameSoFar, newName) {\n      if (!nameSoFar) {\n        return newName;\n      }\n\n      if (newName && newName != nameSoFar) {\n        const err = new Error('Function names do not match (expected: ' + nameSoFar + ', actual: ' + newName + ')');\n        err.data = {\n          actual: newName,\n          expected: nameSoFar\n        };\n        throw err;\n      }\n\n      return nameSoFar;\n    }\n    /**\n     * Retrieve the implied name from an object with signature keys\n     * and function values, checking whether all value names match\n     *\n     * @param { {string: function} } obj\n     */\n\n\n    function getObjectName(obj) {\n      let name;\n\n      for (let key in obj) {\n        // Only pay attention to own properties, and only if their values\n        // are typed functions or functions with a signature property\n        if (obj.hasOwnProperty(key) && (isTypedFunction(obj[key]) || typeof obj[key].signature === 'string')) {\n          name = checkName(name, obj[key].name);\n        }\n      }\n\n      return name;\n    }\n    /**\n     * Copy all of the signatures from the second argument into the first,\n     * which is modified by side effect, checking for conflicts\n     *\n     * @param {Object.<string, function|typed-reference} destination\n     * @param {Object.<string, function|typed-reference} source\n     */\n\n\n    function mergeSignatures(dest, source) {\n      let key;\n\n      for (key in source) {\n        if (source.hasOwnProperty(key)) {\n          if (key in dest) {\n            if (source[key] !== dest[key]) {\n              const err = new Error('Signature \"' + key + '\" is defined twice');\n              err.data = {\n                signature: key,\n                sourceFunction: source[key],\n                destFunction: dest[key]\n              };\n              throw err;\n            } // else: both signatures point to the same function, that's fine\n\n          }\n\n          dest[key] = source[key];\n        }\n      }\n    }\n\n    const saveTyped = typed;\n    /**\n     * Originally the main function was a typed function itself, but then\n     * it might not be able to generate error messages if the client\n     * replaced the type system with different names.\n     *\n     * Main entry: typed([name], functions/objects with signatures...)\n     *\n     * Assembles and returns a new typed-function from the given items\n     * that provide signatures and implementations, each of which may be\n     * * a plain object mapping (string) signatures to implementing functions,\n     * * a previously constructed typed function, or\n     * * any other single function with a string-valued property `signature`.\n      * The name of the resulting typed-function will be given by the\n     * string-valued name argument if present, or if not, by the name\n     * of any of the arguments that have one, as long as any that do are\n     * consistent with each other. If no name is specified, the name will be\n     * an empty string.\n     *\n     * @param {string} name [optional]\n     * @param {(function|object)[]} signature providers\n     * @returns {typed-function}\n     */\n\n    typed = function (maybeName) {\n      const named = typeof maybeName === 'string';\n      const start = named ? 1 : 0;\n      let name = named ? maybeName : '';\n      const allSignatures = {};\n\n      for (let i = start; i < arguments.length; ++i) {\n        const item = arguments[i];\n        let theseSignatures = {};\n        let thisName;\n\n        if (typeof item === 'function') {\n          thisName = item.name;\n\n          if (typeof item.signature === 'string') {\n            // Case 1: Ordinary function with a string 'signature' property\n            theseSignatures[item.signature] = item;\n          } else if (isTypedFunction(item)) {\n            // Case 2: Existing typed function\n            theseSignatures = item.signatures;\n          }\n        } else if (isPlainObject(item)) {\n          // Case 3: Plain object, assume keys = signatures, values = functions\n          theseSignatures = item;\n\n          if (!named) {\n            thisName = getObjectName(item);\n          }\n        }\n\n        if (Object.keys(theseSignatures).length === 0) {\n          const err = new TypeError('Argument to \\'typed\\' at index ' + i + ' is not a (typed) function, ' + 'nor an object with signatures as keys and functions as values.');\n          err.data = {\n            index: i,\n            argument: item\n          };\n          throw err;\n        }\n\n        if (!named) {\n          name = checkName(name, thisName);\n        }\n\n        mergeSignatures(allSignatures, theseSignatures);\n      }\n\n      return createTypedFunction(name || '', allSignatures);\n    };\n\n    typed.create = create;\n    typed.createCount = saveTyped.createCount;\n    typed.onMismatch = _onMismatch;\n    typed.throwMismatchError = _onMismatch;\n    typed.createError = createError;\n    typed.clear = clear;\n    typed.clearConversions = clearConversions;\n    typed.addTypes = addTypes;\n    typed._findType = findType; // For unit testing only\n\n    typed.referTo = referTo;\n    typed.referToSelf = referToSelf;\n    typed.convert = convert;\n    typed.findSignature = findSignature;\n    typed.find = find;\n    typed.isTypedFunction = isTypedFunction;\n    typed.warnAgainstDeprecatedThis = true;\n    /**\n     * add a type (convenience wrapper for typed.addTypes)\n     * @param {{name: string, test: function}} type\n     * @param {boolean} [beforeObjectTest=true]\n     *                          If true, the new test will be inserted before\n     *                          the test with name 'Object' (if any), since\n     *                          tests for Object match Array and classes too.\n     */\n\n    typed.addType = function (type, beforeObjectTest) {\n      let before = 'any';\n\n      if (beforeObjectTest !== false) {\n        before = 'Object';\n      }\n\n      typed.addTypes([type], before);\n    };\n    /**\n     * Verify that the ConversionDef conversion has a valid format.\n     *\n     * @param {conversionDef} conversion\n     * @return {void}\n     * @throws {TypeError|SyntaxError}\n     */\n\n\n    function _validateConversion(conversion) {\n      if (!conversion || typeof conversion.from !== 'string' || typeof conversion.to !== 'string' || typeof conversion.convert !== 'function') {\n        throw new TypeError('Object with properties {from: string, to: string, convert: function} expected');\n      }\n\n      if (conversion.to === conversion.from) {\n        throw new SyntaxError('Illegal to define conversion from \"' + conversion.from + '\" to itself.');\n      }\n    }\n    /**\n     * Add a conversion\n     *\n     * @param {ConversionDef} conversion\n     * @returns {void}\n     * @throws {TypeError}\n     */\n\n\n    typed.addConversion = function (conversion) {\n      _validateConversion(conversion);\n\n      const to = findType(conversion.to);\n\n      if (to.conversionsTo.every(function (other) {\n        return other.from !== conversion.from;\n      })) {\n        to.conversionsTo.push({\n          from: conversion.from,\n          convert: conversion.convert,\n          index: nConversions++\n        });\n      } else {\n        throw new Error('There is already a conversion from \"' + conversion.from + '\" to \"' + to.name + '\"');\n      }\n    };\n    /**\n     * Convenience wrapper to call addConversion on each conversion in a list.\n     *\n     @param {ConversionDef[]} conversions\n     @returns {void}\n     @throws {TypeError}\n     */\n\n\n    typed.addConversions = function (conversions) {\n      conversions.forEach(typed.addConversion);\n    };\n    /**\n     * Remove the specified conversion. The format is the same as for\n     * addConversion, and the convert function must match or an error\n     * is thrown.\n     *\n     * @param {{from: string, to: string, convert: function}} conversion\n     * @returns {void}\n     * @throws {TypeError|SyntaxError|Error}\n     */\n\n\n    typed.removeConversion = function (conversion) {\n      _validateConversion(conversion);\n\n      const to = findType(conversion.to);\n      const existingConversion = findInArray(to.conversionsTo, c => c.from === conversion.from);\n\n      if (!existingConversion) {\n        throw new Error('Attempt to remove nonexistent conversion from ' + conversion.from + ' to ' + conversion.to);\n      }\n\n      if (existingConversion.convert !== conversion.convert) {\n        throw new Error('Conversion to remove does not match existing conversion');\n      }\n\n      const index = to.conversionsTo.indexOf(existingConversion);\n      to.conversionsTo.splice(index, 1);\n    };\n    /**\n     * Produce the specific signature that a typed function\n     * will execute on the given arguments. Here, a \"signature\" is an\n     * object with properties 'params', 'test', 'fn', and 'implementation'.\n     * This last property is a function that converts params as necessary\n     * and then calls 'fn'. Returns null if there is no matching signature.\n     * @param {typed-function} tf\n     * @param {any[]} argList\n     * @returns {{params: string, test: function, fn: function, implementation: function}}\n     */\n\n\n    typed.resolve = function (tf, argList) {\n      if (!isTypedFunction(tf)) {\n        throw new TypeError(NOT_TYPED_FUNCTION);\n      }\n\n      const sigs = tf._typedFunctionData.signatures;\n\n      for (var i = 0; i < sigs.length; ++i) {\n        if (sigs[i].test(argList)) {\n          return sigs[i];\n        }\n      }\n\n      return null;\n    };\n\n    return typed;\n  }\n\n  return create();\n});","map":{"version":3,"names":["root","factory","define","amd","exports","module","typed","ok","notOk","undef","undefined","NOT_TYPED_FUNCTION","create","isPlainObject","x","constructor","Object","_types","name","test","Array","isArray","Date","RegExp","anyType","isAny","typeMap","typeList","nConversions","createCount","findType","typeName","type","get","message","toLowerCase","otherName","TypeError","addTypes","types","beforeSpec","beforeIndex","index","length","newTypes","i","has","push","set","conversionsTo","affectedTypes","slice","concat","clear","Map","clearConversions","findTypeNames","value","matches","filter","isTypedFunction","entity","findSignature","fn","signature","exactSpec","exact","stringSignature","join","params","parseSignature","canonicalSignature","stringifyParams","signatures","match","_typedFunctionData","signatureMap","nParams","remainingSignatures","want","filteredSignatures","possibility","have","getParamAtIndex","restParam","hasAny","haveTypes","paramTypeSet","some","wtype","candidate","find","implementation","convert","conversions","Error","fromType","from","separator","map","p","parseParam","param","indexOf","typeDefs","split","s","trim","paramName","exactTypes","typeIndex","conversion","conversionIndex","hasConversion","expandParam","typeNames","t","matchingConversions","availableConversions","newName","convertibleTypes","typeSet","Set","forEach","add","rawSignature","rawParams","parsedParam","SyntaxError","hasRestParam","last","compileTest","test0","test1","or","tests","compileTests","initial","varIndex","lastTest","testRestParam","args","testArgs","getTypeSetAtIndex","getTypeName","isExactType","mergeExpectedParams","paramSet","createError","err","expected","_name","matchingSignatures","nextMatchingDefs","actualTypes","data","category","actual","lengths","Infinity","Math","min","apply","maxLength","max","expectedLength","argTypes","getLowestTypeIndex","getLowestConversionIndex","compareParams","param1","param2","typeDiff","convDiff","compareSignatures","signature1","signature2","pars1","pars2","last1","last2","hasRest1","hasRest2","any1","conv1","par","any2","conv2","lengthCriterion","comparisons","tc","thisComparison","c","sort","t1","t2","knownTypes","newMatch","compileArgsPreprocessing","fnConvert","compiledConversions","compileArgConversion","convertArgs","arguments","fnPreprocess","offset","preprocessRestParams","conversion0","conversion1","convertArg","arg","splitParams","_splitParams","paramsSoFar","resultingParams","flatMap","nextParam","conflicting","params1","params2","ii","typeSet1","typeSet2","overlap","len1","len2","restParam1","restParam2","clearResolutions","functionList","isReferToSelf","referToSelf","callback","isReferTo","makeReferTo","referTo","references","collectResolutions","resolvedReferences","reference","resolution","resolveReferences","self","resolvedFunctions","leftUnresolved","nothingResolved","validateDeprecatedThis","signaturesMap","deprecatedThisRegex","keys","toString","createTypedFunction","rawSignaturesMap","warnAgainstDeprecatedThis","parsedParams","originalFunctions","preliminarySignatures","prototype","hasOwnProperty","call","pp","functionIndex","conversionParams","sp","spName","every","the_typed_fn","internalSignatureMap","ok0","ok1","ok2","ok3","ok4","ok5","allOk","test00","test10","test20","test30","test40","test50","test01","test11","test21","test31","test41","test51","fn0","fn1","fn2","fn3","fn4","fn5","len0","len3","len4","len5","iStart","iEnd","fns","generic","onMismatch","arg0","arg1","defineProperty","_onMismatch","arr","start","end","findInArray","objectOrFn","checkName","nameSoFar","getObjectName","obj","key","mergeSignatures","dest","source","sourceFunction","destFunction","saveTyped","maybeName","named","allSignatures","item","theseSignatures","thisName","argument","throwMismatchError","_findType","addType","beforeObjectTest","before","_validateConversion","to","addConversion","other","addConversions","removeConversion","existingConversion","splice","resolve","tf","argList","sigs"],"sources":["C:/Users/User/Documents/PROYECTOS PROGRAMACION/calculadora/node_modules/typed-function/typed-function.js"],"sourcesContent":["/**\n * typed-function\n *\n * Type checking for JavaScript functions\n *\n * https://github.com/josdejong/typed-function\n */\n'use strict';\n\n(function (root, factory) {\n  if (typeof define === 'function' && define.amd) {\n    // AMD. Register as an anonymous module.\n    define([], factory);\n  } else if (typeof exports === 'object') {\n    // OldNode. Does not work with strict CommonJS, but\n    // only CommonJS-like environments that support module.exports,\n    // like OldNode.\n    module.exports = factory();\n  } else {\n    // Browser globals (root is window)\n    root.typed = factory();\n  }\n}(this, function () {\n\n  function ok () {\n    return true;\n  }\n\n  function notOk () {\n    return false;\n  }\n\n  function undef () {\n    return undefined;\n  }\n\n  const NOT_TYPED_FUNCTION = 'Argument is not a typed-function.'\n\n  /**\n   * @typedef {{\n   *   params: Param[],\n   *   fn: function,\n   *   test: function,\n   *   implementation: function\n   * }} Signature\n   *\n   * @typedef {{\n   *   types: Type[],\n   *   hasAny: boolean,\n   *   hasConversion: boolean,\n   *   restParam: boolean\n   * }} Param\n   *\n   * @typedef {{\n   *   name: string,\n   *   typeIndex: number,\n   *   test: function,\n   *   isAny: boolean,\n   *   conversion?: ConversionDef,\n   *   conversionIndex: number,\n   * }} Type\n   *\n   * @typedef {{\n   *   from: string,\n   *   to: string,\n   *   convert: function (*) : *\n   * }} ConversionDef\n   *\n   * @typedef {{\n   *   name: string,\n   *   test: function(*) : boolean,\n   *   isAny?: boolean\n   * }} TypeDef\n   */\n\n  // create a new instance of typed-function\n  function create () {\n    // data type tests\n\n    /**\n     * Returns true if the argument is a non-null \"plain\" object\n     */\n    function isPlainObject (x) {\n      return typeof x === 'object' && x !== null && x.constructor === Object\n    }\n\n    const _types = [\n      { name: 'number',    test: function (x) { return typeof x === 'number' } },\n      { name: 'string',    test: function (x) { return typeof x === 'string' } },\n      { name: 'boolean',   test: function (x) { return typeof x === 'boolean' } },\n      { name: 'Function',  test: function (x) { return typeof x === 'function'} },\n      { name: 'Array',     test: Array.isArray },\n      { name: 'Date',      test: function (x) { return x instanceof Date } },\n      { name: 'RegExp',    test: function (x) { return x instanceof RegExp } },\n      { name: 'Object',    test: isPlainObject },\n      { name: 'null',      test: function (x) { return x === null } },\n      { name: 'undefined', test: function (x) { return x === undefined } }\n    ];\n\n    const anyType = {\n      name: 'any',\n      test: ok,\n      isAny: true\n    }\n\n    // Data structures to track the types. As these are local variables in\n    // create(), each typed universe will get its own copy, but the variables\n    // will only be accessible through the (closures of the) functions supplied\n    // as properties of the typed object, not directly.\n    // These will be initialized in clear() below\n    let typeMap; // primary store of all types\n    let typeList; // Array of just type names, for the sake of ordering\n\n    // And similar data structures for the type conversions:\n    let nConversions = 0;\n    // the actual conversions are stored on a property of the destination types\n\n    // This is a temporary object, will be replaced with a function at the end\n    let typed = { createCount: 0 };\n\n    /**\n     * Takes a type name and returns the corresponding official type object\n     * for that type.\n     *\n     * @param {string} typeSpec\n     * @returns {TypeDef} type\n     */\n    function findType (typeName) {\n      const type = typeMap.get(typeName)\n      if (type) {\n        return type;\n      }\n      // Remainder is error handling\n      let message = 'Unknown type \"' + typeName + '\"';\n      const name = typeName.toLowerCase();\n      let otherName;\n      for (otherName of typeList) {\n        if (otherName.toLowerCase() === name) {\n          message += '. Did you mean \"' + otherName + '\" ?';\n          break;\n        }\n      }\n      throw new TypeError(message);\n    }\n\n    /**\n     * Adds an array `types` of type definitions to this typed instance.\n     * Each type definition should be an object with properties:\n     * 'name' - a string giving the name of the type; 'test' - function\n     * returning a boolean that tests membership in the type; and optionally\n     * 'isAny' - true only for the 'any' type.\n     *\n     * The second optional argument, `before`, gives the name of a type that\n     * these types should be added before. The new types are added in the\n     * order specified.\n     * @param {TypeDef[]} types\n     * @param {string} ['any'] before\n     */\n    function addTypes (types, beforeSpec = 'any') {\n      const beforeIndex = beforeSpec\n        ? findType(beforeSpec).index\n        : typeList.length;\n      const newTypes = [];\n      for (var i = 0; i < types.length; ++i) {\n        if (!types[i] || typeof types[i].name !== 'string' ||\n            typeof types[i].test !== 'function') {\n          throw new TypeError('Object with properties {name: string, test: function} expected');\n        }\n        const typeName = types[i].name;\n        if (typeMap.has(typeName)) {\n          throw new TypeError('Duplicate type name \"' + typeName + '\"');\n        }\n        newTypes.push(typeName);\n        typeMap.set(typeName, {\n          name: typeName,\n          test: types[i].test,\n          isAny: types[i].isAny,\n          index: beforeIndex + i,\n          conversionsTo: [] // Newly added type can't have any conversions to it\n        })\n      }\n      // update the typeList\n      const affectedTypes = typeList.slice(beforeIndex);\n      typeList =\n        typeList.slice(0,beforeIndex).concat(newTypes).concat(affectedTypes);\n      // Fix the indices\n      for (var i = beforeIndex + newTypes.length; i < typeList.length; ++i) {\n        typeMap.get(typeList[i]).index = i;\n      }\n    }\n\n    /**\n     * Removes all types and conversions from this typed instance.\n     * May cause previously constructed typed-functions to throw\n     * strange errors when they are called with types that do not\n     * match any of their signatures.\n     */\n    function clear () {\n      typeMap = new Map();\n      typeList = [];\n      nConversions = 0;\n      addTypes([anyType], false);\n    }\n\n    // initialize the types to the default list\n    clear();\n    addTypes(_types);\n\n    /**\n     * Removes all conversions, leaving the types alone.\n     */\n    function clearConversions() {\n      let typeName;\n      for (typeName of typeList) {\n        typeMap.get(typeName).conversionsTo = [];\n      }\n      nConversions = 0;\n    }\n\n    /**\n     * Find the type names that match a value.\n     * @param {*} value\n     * @return {string[]} Array of names of types for which\n     *                  the type test matches the value.\n     */\n    function findTypeNames(value) {\n      const matches = typeList.filter(name => {\n        const type = typeMap.get(name);\n        return !type.isAny && type.test(value);\n      });\n      if (matches.length) {\n        return matches;\n      }\n      return ['any'];\n    }\n\n    /**\n     * Check if an entity is a typed function created by any instance\n     * @param {any} entity\n     * @returns {boolean}\n     */\n    function isTypedFunction(entity) {\n      return entity && typeof entity === 'function' &&\n        '_typedFunctionData' in entity;\n    }\n\n    /**\n     * Find a specific signature from a (composed) typed function, for example:\n     *\n     *   typed.findSignature(fn, ['number', 'string'])\n     *   typed.findSignature(fn, 'number, string')\n     *   typed.findSignature(fn, 'number,string', {exact: true})\n     *\n     * This function findSignature will by default return the best match to\n     * the given signature, possibly employing type conversions.\n     *\n     * The (optional) third argument is a plain object giving options\n     * controlling the signature search. Currently the only implemented\n     * option is `exact`: if specified as true (default is false), only\n     * exact matches will be returned (i.e. signatures for which `fn` was\n     * directly defined). Note that a (possibly different) type matching\n     * `any`, or one or more instances of TYPE matching `...TYPE` are\n     * considered exact matches in this regard, as no conversions are used.\n     *\n     * This function returns a \"signature\" object, as does `typed.resolve()`,\n     * which is a plain object with four keys: `params` (the array of parameters\n     * for this signature), `fn` (the originally supplied function for this\n     * signature), `test` (a generated function that determines if an argument\n     * list matches this signature, and `implementation` (the function to call\n     * on a matching argument list, that performs conversions if necessary and\n     * then calls the originally supplied function).\n     *\n     * @param {Function} fn                   A typed-function\n     * @param {string | string[]} signature\n     *     Signature to be found, can be an array or a comma separated string.\n     * @param {object} options  Controls the signature search as documented\n     * @return {{ params: Param[], fn: function, test: function, implementation: function }}\n     *     Returns the matching signature, or throws an error when no signature\n     *     is found.\n     */\n    function findSignature (fn, signature, exactSpec) {\n      if (!isTypedFunction(fn)) {\n        throw new TypeError(NOT_TYPED_FUNCTION);\n      }\n\n      // Canonicalize input\n      const exact = exactSpec && exactSpec.exact;\n      const stringSignature = Array.isArray(signature)\n        ? signature.join(',')\n        : signature;\n      const params = parseSignature(stringSignature);\n      const canonicalSignature = stringifyParams(params);\n\n      // First hope we get lucky and exactly match a signature\n      if (!exact || canonicalSignature in fn.signatures) {\n        // OK, we can check the internal signatures\n        const match =\n          fn._typedFunctionData.signatureMap.get(canonicalSignature);\n        if (match) {\n          return match;\n        }\n      }\n\n      // Oh well, we did not; so we have to go back and check the parameters\n      // one by one, in order to catch things like `any` and rest params.\n      // Note here we can assume there is at least one parameter, because\n      // the empty signature would have matched successfully above.\n      const nParams = params.length;\n      let remainingSignatures;\n      if (exact) {\n        remainingSignatures = []\n        let name;\n        for (name in fn.signatures) {\n          remainingSignatures.push(fn._typedFunctionData.signatureMap.get(name))\n        }\n      } else {\n        remainingSignatures = fn._typedFunctionData.signatures\n      }\n      for (var i = 0; i < nParams; ++i) {\n        const want = params[i];\n        const filteredSignatures = [];\n        let possibility;\n        for (possibility of remainingSignatures) {\n          const have = getParamAtIndex(possibility.params, i);\n          if (!have || (want.restParam && !have.restParam)) {\n            continue;\n          }\n          if (!have.hasAny) {\n            // have to check all of the wanted types are available\n            const haveTypes = paramTypeSet(have);\n            if (want.types.some(wtype => !haveTypes.has(wtype.name))) {\n              continue;\n            }\n          }\n          // OK, this looks good\n          filteredSignatures.push(possibility);\n        }\n        remainingSignatures = filteredSignatures;\n        if (remainingSignatures.length === 0) break;\n      }\n      // Return the first remaining signature that was totally matched:\n      let candidate;\n      for (candidate of remainingSignatures) {\n        if (candidate.params.length <= nParams) {\n          return candidate;\n        }\n      }\n\n      throw new TypeError('Signature not found (signature: ' + (fn.name || 'unnamed') + '(' + stringifyParams(params, ', ') + '))');\n    }\n\n    /**\n     * Find the proper function to call for a specific signature from\n     * a (composed) typed function, for example:\n     *\n     *   typed.find(fn, ['number', 'string'])\n     *   typed.find(fn, 'number, string')\n     *   typed.find(fn, 'number,string', {exact: true})\n     *\n     * This function find will by default return the best match to\n     * the given signature, possibly employing type conversions (and returning\n     * a function that will perform those conversions as needed). The\n     * (optional) third argument is a plain object giving options contolling\n     * the signature search. Currently only the option `exact` is implemented,\n     * which defaults to \"false\". If `exact` is specified as true, then only\n     * exact matches will be returned (i.e. signatures for which `fn` was\n     * directly defined). Uses of `any` and `...TYPE` are considered exact if\n     * no conversions are necessary to apply the corresponding function.\n     *\n     * @param {Function} fn                   A typed-function\n     * @param {string | string[]} signature\n     *     Signature to be found, can be an array or a comma separated string.\n     * @param {object} options  Controls the signature match as documented\n     * @return {function}\n     *     Returns the function to call for the given signature, or throws an\n     *     error if no match is found.\n     */\n    function find (fn, signature, exact) {\n      return findSignature(fn, signature, exact).implementation;\n    }\n\n    /**\n     * Convert a given value to another data type, specified by type name.\n     *\n     * @param {*} value\n     * @param {string} type\n     */\n    function convert (value, typeName) {\n      // check conversion is needed\n      const type = findType(typeName);\n      if (type.test(value)) {\n        return value;\n      }\n      const conversions = type.conversionsTo;\n      if (conversions.length === 0) {\n        throw new Error(\n          'There are no conversions to ' + typeName + ' defined.');\n      }\n      for (var i = 0; i < conversions.length; i++) {\n        const fromType = findType(conversions[i].from);\n        if (fromType.test(value)) {\n          return conversions[i].convert(value);\n        }\n      }\n\n      throw new Error('Cannot convert ' + value + ' to ' + typeName);\n    }\n\n    /**\n     * Stringify parameters in a normalized way\n     * @param {Param[]} params\n     * @param {string} [','] separator\n     * @return {string}\n     */\n    function stringifyParams (params, separator = ',') {\n      return params.map(p => p.name).join(separator);\n    }\n\n    /**\n     * Parse a parameter, like \"...number | boolean\"\n     * @param {string} param\n     * @return {Param} param\n     */\n    function parseParam (param) {\n      const restParam = param.indexOf('...') === 0;\n      const types = (!restParam)\n          ? param\n          : (param.length > 3)\n              ? param.slice(3)\n              : 'any';\n\n      const typeDefs = types.split('|').map(s => findType(s.trim()))\n\n      let hasAny = false;\n      let paramName = restParam ? '...' : '';\n\n      const exactTypes = typeDefs.map(function (type) {\n        hasAny = type.isAny || hasAny;\n        paramName += type.name + '|'\n\n        return {\n          name: type.name,\n          typeIndex: type.index,\n          test: type.test,\n          isAny: type.isAny,\n          conversion: null,\n          conversionIndex: -1\n        };\n      });\n\n      return {\n        types: exactTypes,\n        name: paramName.slice(0, -1), // remove trailing '|' from above\n        hasAny: hasAny,\n        hasConversion: false,\n        restParam: restParam\n      };\n    }\n\n    /**\n     * Expands a parsed parameter with the types available from currently\n     * defined conversions.\n     * @param {Param} param\n     * @return {Param} param\n     */\n    function expandParam (param) {\n      const typeNames = param.types.map(t => t.name);\n      const matchingConversions = availableConversions(typeNames);\n      let hasAny = param.hasAny;\n      let newName = param.name;\n\n      const convertibleTypes = matchingConversions.map(function (conversion) {\n        const type = findType(conversion.from);\n        hasAny = type.isAny || hasAny;\n        newName += '|' + conversion.from;\n\n        return {\n          name: conversion.from,\n          typeIndex: type.index,\n          test: type.test,\n          isAny: type.isAny,\n          conversion: conversion,\n          conversionIndex: conversion.index\n        };\n      });\n\n      return {\n        types: param.types.concat(convertibleTypes),\n        name: newName,\n        hasAny: hasAny,\n        hasConversion: convertibleTypes.length > 0,\n        restParam: param.restParam\n      };\n    }\n\n    /**\n     * Return the set of type names in a parameter.\n     * Caches the result for efficiency\n     *\n     * @param {Param} param\n     * @return {Set<string>} typenames\n     */\n    function paramTypeSet (param) {\n      if (!param.typeSet) {\n        param.typeSet = new Set();\n        param.types.forEach(type => param.typeSet.add(type.name));\n      }\n      return param.typeSet;\n    }\n\n    /**\n     * Parse a signature with comma separated parameters,\n     * like \"number | boolean, ...string\"\n     *\n     * @param {string} signature\n     * @return {Param[]} params\n     */\n    function parseSignature (rawSignature) {\n      const params = [];\n      if (typeof rawSignature !== 'string') {\n        throw new TypeError('Signatures must be strings');\n      }\n      const signature = rawSignature.trim()\n      if (signature === '') {\n        return params;\n      }\n\n      const rawParams = signature.split(',');\n      for (var i = 0; i < rawParams.length; ++i) {\n        const parsedParam = parseParam(rawParams[i].trim());\n        if (parsedParam.restParam && (i !== rawParams.length - 1)) {\n          throw new SyntaxError(\n            'Unexpected rest parameter \"' + rawParams[i] + '\": ' +\n            'only allowed for the last parameter');\n        }\n        // if invalid, short-circuit (all of the types may have been filtered)\n        if (parsedParam.types.length == 0) {\n          return null;\n        }\n        params.push(parsedParam);\n      }\n\n      return params;\n    }\n\n    /**\n     * Test whether a set of params contains a restParam\n     * @param {Param[]} params\n     * @return {boolean} Returns true when the last parameter is a restParam\n     */\n    function hasRestParam(params) {\n      const param = last(params);\n      return param ? param.restParam : false;\n    }\n\n    /**\n     * Create a type test for a single parameter, which can have one or multiple\n     * types.\n     * @param {Param} param\n     * @return {function(x: *) : boolean} Returns a test function\n     */\n    function compileTest(param) {\n      if (!param || param.types.length === 0) {\n        // nothing to do\n        return ok;\n      }\n      else if (param.types.length === 1) {\n        return findType(param.types[0].name).test;\n      }\n      else if (param.types.length === 2) {\n        const test0 = findType(param.types[0].name).test;\n        const test1 = findType(param.types[1].name).test;\n        return function or(x) {\n          return test0(x) || test1(x);\n        }\n      }\n      else { // param.types.length > 2\n        const tests = param.types.map(function (type) {\n          return findType(type.name).test;\n        })\n        return function or(x) {\n          for (var i = 0; i < tests.length; i++) {\n            if (tests[i](x)) {\n              return true;\n            }\n          }\n          return false;\n        }\n      }\n    }\n\n    /**\n     * Create a test for all parameters of a signature\n     * @param {Param[]} params\n     * @return {function(args: Array<*>) : boolean}\n     */\n    function compileTests(params) {\n      let tests, test0, test1;\n\n      if (hasRestParam(params)) {\n        // variable arguments like '...number'\n        tests = initial(params).map(compileTest);\n        const varIndex = tests.length;\n        const lastTest = compileTest(last(params));\n        const testRestParam = function (args) {\n          for (var i = varIndex; i < args.length; i++) {\n            if (!lastTest(args[i])) {\n              return false;\n            }\n          }\n          return true;\n        }\n\n        return function testArgs(args) {\n          for (var i = 0; i < tests.length; i++) {\n            if (!tests[i](args[i])) {\n              return false;\n            }\n          }\n          return testRestParam(args) && (args.length >= varIndex + 1);\n        };\n      }\n      else {\n        // no variable arguments\n        if (params.length === 0) {\n          return function testArgs(args) {\n            return args.length === 0;\n          };\n        }\n        else if (params.length === 1) {\n          test0 = compileTest(params[0]);\n          return function testArgs(args) {\n            return test0(args[0]) && args.length === 1;\n          };\n        }\n        else if (params.length === 2) {\n          test0 = compileTest(params[0]);\n          test1 = compileTest(params[1]);\n          return function testArgs(args) {\n            return test0(args[0]) && test1(args[1]) && args.length === 2;\n          };\n        }\n        else { // arguments.length > 2\n          tests = params.map(compileTest);\n          return function testArgs(args) {\n            for (var i = 0; i < tests.length; i++) {\n              if (!tests[i](args[i])) {\n                return false;\n              }\n            }\n            return args.length === tests.length;\n          };\n        }\n      }\n    }\n\n    /**\n     * Find the parameter at a specific index of a Params list.\n     * Handles rest parameters.\n     * @param {Param[]} params\n     * @param {number} index\n     * @return {Param | null} Returns the matching parameter when found,\n     *                        null otherwise.\n     */\n    function getParamAtIndex(params, index) {\n      return index < params.length\n        ? params[index]\n        : hasRestParam(params) ? last(params) : null\n    }\n\n    /**\n     * Get all type names of a parameter\n     * @param {Params[]} params\n     * @param {number} index\n     * @return {string[]} Returns an array with type names\n     */\n    function getTypeSetAtIndex (params, index) {\n      const param = getParamAtIndex(params, index);\n      if (!param) {\n        return new Set();\n      }\n      return paramTypeSet(param);\n    }\n\n    /**\n     * Returns the name of a type\n     * @param {Type} type\n     * @return {string} Returns the type name\n     */\n    function getTypeName(type) {\n      return type.name;\n    }\n\n    /**\n     * Test whether a type is an exact type or conversion\n     * @param {Type} type\n     * @return {boolean} Returns true when\n     */\n    function isExactType(type) {\n      return type.conversion === null || type.conversion === undefined;\n    }\n\n    /**\n     * Helper function for creating error messages: create an array with\n     * all available types on a specific argument index.\n     * @param {Signature[]} signatures\n     * @param {number} index\n     * @return {string[]} Returns an array with available types\n     */\n    function mergeExpectedParams(signatures, index) {\n      const typeSet = new Set();\n      signatures.forEach(signature => {\n        const paramSet = getTypeSetAtIndex(signature.params, index);\n        let name;\n        for (name of paramSet) {\n          typeSet.add(name);\n        }\n      });\n\n      return typeSet.has('any') ? ['any'] : Array.from(typeSet);\n    }\n\n    /**\n     * Create\n     * @param {string} name             The name of the function\n     * @param {array.<*>} args          The actual arguments passed to the function\n     * @param {Signature[]} signatures  A list with available signatures\n     * @return {TypeError} Returns a type error with additional data\n     *                     attached to it in the property `data`\n     */\n    function createError(name, args, signatures) {\n      let err, expected;\n      const _name = name || 'unnamed';\n\n      // test for wrong type at some index\n      let matchingSignatures = signatures;\n      for (var index = 0; index < args.length; index++) {\n        const nextMatchingDefs = [];\n        matchingSignatures.forEach(signature => {\n          const param = getParamAtIndex(signature.params, index);\n          const test = compileTest(param);\n          if ((index < signature.params.length\n               || hasRestParam(signature.params)) &&\n              test(args[index])) {\n            nextMatchingDefs.push(signature);\n          }\n        });\n\n        if (nextMatchingDefs.length === 0) {\n          // no matching signatures anymore, throw error \"wrong type\"\n          expected = mergeExpectedParams(matchingSignatures, index);\n          if (expected.length > 0) {\n            const actualTypes = findTypeNames(args[index]);\n\n            err = new TypeError('Unexpected type of argument in function ' + _name +\n                ' (expected: ' + expected.join(' or ') +\n                ', actual: ' + actualTypes.join(' | ') + ', index: ' + index + ')');\n            err.data = {\n              category: 'wrongType',\n              fn: _name,\n              index: index,\n              actual: actualTypes,\n              expected: expected\n            }\n            return err;\n          }\n        }\n        else {\n          matchingSignatures = nextMatchingDefs;\n        }\n      }\n\n      // test for too few arguments\n      const lengths = matchingSignatures.map(function (signature) {\n        return hasRestParam(signature.params)\n          ? Infinity\n          : signature.params.length;\n      });\n      if (args.length < Math.min.apply(null, lengths)) {\n        expected = mergeExpectedParams(matchingSignatures, index);\n        err = new TypeError('Too few arguments in function ' + _name +\n            ' (expected: ' + expected.join(' or ') +\n            ', index: ' + args.length + ')');\n        err.data = {\n          category: 'tooFewArgs',\n          fn: _name,\n          index: args.length,\n          expected: expected\n        }\n        return err;\n      }\n\n      // test for too many arguments\n      const maxLength = Math.max.apply(null, lengths);\n      if (args.length > maxLength) {\n        err = new TypeError('Too many arguments in function ' + _name +\n            ' (expected: ' + maxLength + ', actual: ' + args.length + ')');\n        err.data = {\n          category: 'tooManyArgs',\n          fn: _name,\n          index: args.length,\n          expectedLength: maxLength\n        }\n        return err;\n      }\n\n      // Generic error\n      const argTypes = [];\n      for (var i = 0; i < args.length; ++i) {\n        argTypes.push(findTypeNames(args[i]).join('|'))\n      }\n      err = new TypeError('Arguments of type \"' + argTypes.join(', ') +\n          '\" do not match any of the defined signatures of function ' + _name + '.');\n      err.data = {\n        category: 'mismatch',\n        actual: argTypes\n      }\n      return err;\n    }\n\n    /**\n     * Find the lowest index of all exact types of a parameter (no conversions)\n     * @param {Param} param\n     * @return {number} Returns the index of the lowest type in typed.types\n     */\n    function getLowestTypeIndex (param) {\n      let min = typeList.length + 1;\n\n      for (var i = 0; i < param.types.length; i++) {\n        if (isExactType(param.types[i])) {\n          min = Math.min(min, param.types[i].typeIndex);\n        }\n      }\n\n      return min;\n    }\n\n    /**\n     * Find the lowest index of the conversion of all types of the parameter\n     * having a conversion\n     * @param {Param} param\n     * @return {number} Returns the lowest index of the conversions of this type\n     */\n    function getLowestConversionIndex (param) {\n      let min = nConversions + 1;\n\n      for (var i = 0; i < param.types.length; i++) {\n        if (!isExactType(param.types[i])) {\n          min = Math.min(min, param.types[i].conversionIndex);\n        }\n      }\n\n      return min;\n    }\n\n    /**\n     * Compare two params\n     * @param {Param} param1\n     * @param {Param} param2\n     * @return {number} returns -1 when param1 must get a lower\n     *                  index than param2, 1 when the opposite,\n     *                  or zero when both are equal\n     */\n    function compareParams (param1, param2) {\n      // We compare a number of metrics on a param in turn:\n      // 1) 'any' parameters are the least preferred\n      if (param1.hasAny) {\n        if (!param2.hasAny) {\n          return 1;\n        }\n      }\n      else if (param2.hasAny) {\n        return -1;\n      }\n\n      // 2) Prefer non-rest to rest parameters\n      if (param1.restParam) {\n        if (!param2.restParam) {\n          return 1;\n        }\n      } else if (param2.restParam) {\n        return -1;\n      }\n\n      // 3) Prefer exact type match to conversions\n      if (param1.hasConversion) {\n        if (!param2.hasConversion) {\n          return 1;\n        }\n      } else if (param2.hasConversion) {\n        return -1;\n      }\n\n      // 4) Prefer lower type index:\n      const typeDiff = getLowestTypeIndex(param1) - getLowestTypeIndex(param2)\n      if (typeDiff < 0) {\n        return -1;\n      }\n      if (typeDiff > 0) {\n        return 1;\n      }\n\n      // 5) Prefer lower conversion index\n      const convDiff =\n        getLowestConversionIndex(param1) - getLowestConversionIndex(param2)\n      if (convDiff < 0) {\n        return -1;\n      }\n      if (convDiff > 0) {\n        return 1;\n      }\n\n      // Don't have a basis for preference\n      return 0;\n    }\n\n    /**\n     * Compare two signatures\n     * @param {Signature} signature1\n     * @param {Signature} signature2\n     * @return {number} returns a negative number when param1 must get a lower\n     *                  index than param2, a positive number when the opposite,\n     *                  or zero when both are equal\n     */\n    function compareSignatures (signature1, signature2) {\n      const pars1 = signature1.params\n      const pars2 = signature2.params\n      const last1 = last(pars1)\n      const last2 = last(pars2)\n      const hasRest1 = hasRestParam(pars1)\n      const hasRest2 = hasRestParam(pars2)\n      // We compare a number of metrics on signatures in turn:\n      // 1) An \"any rest param\" is least preferred\n      if (hasRest1 && last1.hasAny) {\n        if (!hasRest2 || !last2.hasAny) {\n          return 1;\n        }\n      } else if (hasRest2 && last2.hasAny) {\n        return -1;\n      }\n\n      // 2) Minimize the number of 'any' parameters\n      let any1 = 0;\n      let conv1 = 0;\n      let par;\n      for (par of pars1) {\n        if (par.hasAny) ++any1;\n        if (par.hasConversion) ++conv1;\n      }\n      let any2 = 0;\n      let conv2 = 0;\n      for (par of pars2) {\n        if (par.hasAny) ++any2;\n        if (par.hasConversion) ++conv2;\n      }\n      if (any1 !== any2) {\n        return any1 - any2;\n      }\n\n      // 3) A conversion rest param is less preferred\n      if (hasRest1 && last1.hasConversion) {\n        if (!hasRest2 || !last2.hasConversion) {\n          return 1;\n        }\n      } else if (hasRest2 && last2.hasConversion) {\n        return -1;\n      }\n\n      // 4) Minimize the number of conversions\n      if (conv1 !== conv2) {\n        return conv1 - conv2;\n      }\n\n      // 5) Prefer no rest param\n      if (hasRest1) {\n        if (!hasRest2) {\n          return 1;\n        }\n      } else if (hasRest2) {\n        return -1;\n      }\n\n      // 6) Prefer shorter with rest param, longer without\n      const lengthCriterion =\n        (pars1.length - pars2.length) * (hasRest1 ? -1 : 1)\n      if (lengthCriterion !== 0) {\n        return lengthCriterion;\n      }\n\n      // Signatures are identical in each of the above metrics.\n      // In particular, they are the same length.\n      // We can therefore compare the parameters one by one.\n      // First we count which signature has more preferred parameters.\n      const comparisons = [];\n      let tc = 0;\n      for (let i = 0; i < pars1.length; ++i) {\n        const thisComparison = compareParams(pars1[i], pars2[i])\n        comparisons.push(thisComparison)\n        tc += thisComparison\n      }\n      if (tc !== 0) {\n        return tc;\n      }\n\n      // They have the same number of preferred parameters, so go by the\n      // earliest parameter in which we have a preference.\n      // In other words, dispatch is driven somewhat more by earlier\n      // parameters than later ones.\n      let c;\n      for (c of comparisons) {\n        if (c !== 0) {\n          return c;\n        }\n      }\n\n      // It's a tossup:\n      return 0;\n    }\n\n    /**\n     * Produce a list of all conversions from distinct types to one of\n     * the given types.\n     *\n     * @param {string[]} typeNames\n     * @return {ConversionDef[]} Returns the conversions that are available\n     *                        resulting in any given type (if any)\n     */\n    function availableConversions(typeNames) {\n      if (typeNames.length === 0) {\n        return [];\n      }\n      const types = typeNames.map(findType);\n      if (typeNames.length > 1) {\n        types.sort((t1, t2) => t1.index - t2.index);\n      }\n      let matches = types[0].conversionsTo;\n      if (typeNames.length === 1) {\n        return matches;\n      }\n\n      matches = matches.concat([]) // shallow copy the matches\n      // Since the types are now in index order, we just want the first\n      // occurrence of any from type:\n      const knownTypes = new Set(typeNames);\n      for (var i = 1; i < types.length; ++i) {\n        let newMatch;\n        for (newMatch of types[i].conversionsTo) {\n          if (!knownTypes.has(newMatch.from)) {\n            matches.push(newMatch);\n            knownTypes.add(newMatch.from);\n          }\n        }\n      }\n\n      return matches;\n    }\n\n    /**\n     * Preprocess arguments before calling the original function:\n     * - if needed convert the parameters\n     * - in case of rest parameters, move the rest parameters into an Array\n     * @param {Param[]} params\n     * @param {function} fn\n     * @return {function} Returns a wrapped function\n     */\n    function compileArgsPreprocessing(params, fn) {\n      let fnConvert = fn;\n\n      // TODO: can we make this wrapper function smarter/simpler?\n\n      if (params.some(p => p.hasConversion)) {\n        const restParam = hasRestParam(params);\n        const compiledConversions = params.map(compileArgConversion);\n\n        fnConvert = function convertArgs() {\n          const args = [];\n          const last = restParam ? arguments.length - 1 : arguments.length;\n          for (var i = 0; i < last; i++) {\n            args[i] = compiledConversions[i](arguments[i]);\n          }\n          if (restParam) {\n            args[last] = arguments[last].map(compiledConversions[last]);\n          }\n\n          return fn.apply(this, args);\n        }\n      }\n\n      let fnPreprocess = fnConvert;\n      if (hasRestParam(params)) {\n        const offset = params.length - 1;\n\n        fnPreprocess = function preprocessRestParams () {\n          return fnConvert.apply(this,\n              slice(arguments, 0, offset).concat([slice(arguments, offset)]));\n        }\n      }\n\n      return fnPreprocess;\n    }\n\n    /**\n     * Compile conversion for a parameter to the right type\n     * @param {Param} param\n     * @return {function} Returns the wrapped function that will convert arguments\n     *\n     */\n    function compileArgConversion(param) {\n      let test0, test1, conversion0, conversion1;\n      const tests = [];\n      const conversions = [];\n\n      param.types.forEach(function (type) {\n        if (type.conversion) {\n          tests.push(findType(type.conversion.from).test);\n          conversions.push(type.conversion.convert);\n        }\n      });\n\n      // create optimized conversion functions depending on the number of conversions\n      switch (conversions.length) {\n        case 0:\n          return function convertArg(arg) {\n            return arg;\n          }\n\n        case 1:\n          test0 = tests[0]\n          conversion0 = conversions[0];\n          return function convertArg(arg) {\n            if (test0(arg)) {\n              return conversion0(arg)\n            }\n            return arg;\n          }\n\n        case 2:\n          test0 = tests[0]\n          test1 = tests[1]\n          conversion0 = conversions[0];\n          conversion1 = conversions[1];\n          return function convertArg(arg) {\n            if (test0(arg)) {\n              return conversion0(arg)\n            }\n            if (test1(arg)) {\n              return conversion1(arg)\n            }\n            return arg;\n          }\n\n        default:\n          return function convertArg(arg) {\n            for (var i = 0; i < conversions.length; i++) {\n              if (tests[i](arg)) {\n                return conversions[i](arg);\n              }\n            }\n            return arg;\n          }\n      }\n    }\n\n    /**\n     * Split params with union types in to separate params.\n     *\n     * For example:\n     *\n     *     splitParams([['Array', 'Object'], ['string', 'RegExp'])\n     *     // returns:\n     *     // [\n     *     //   ['Array', 'string'],\n     *     //   ['Array', 'RegExp'],\n     *     //   ['Object', 'string'],\n     *     //   ['Object', 'RegExp']\n     *     // ]\n     *\n     * @param {Param[]} params\n     * @return {Param[]}\n     */\n    function splitParams(params) {\n      function _splitParams(params, index, paramsSoFar) {\n        if (index < params.length) {\n          const param = params[index];\n          let resultingParams = [];\n\n          if (param.restParam) {\n            // split the types of a rest parameter in two:\n            // one with only exact types, and one with exact types and conversions\n            const exactTypes = param.types.filter(isExactType);\n            if (exactTypes.length < param.types.length) {\n              resultingParams.push({\n                types: exactTypes,\n                name: '...' + exactTypes.map(t => t.name).join('|'),\n                hasAny: exactTypes.some(t => t.isAny),\n                hasConversion: false,\n                restParam: true\n              })\n            }\n            resultingParams.push(param);\n          }\n          else {\n            // split all the types of a regular parameter into one type per param\n            resultingParams = param.types.map(function (type) {\n              return {\n                types: [type],\n                name: type.name,\n                hasAny: type.isAny,\n                hasConversion: type.conversion,\n                restParam: false\n              }\n            })\n          }\n\n          // recurse over the groups with types\n          return flatMap(resultingParams, function (nextParam) {\n            return _splitParams(params, index + 1, paramsSoFar.concat([nextParam]));\n          });\n\n        }\n        else {\n          // we've reached the end of the parameters.\n          return [paramsSoFar];\n        }\n      }\n\n      return _splitParams(params, 0, []);\n    }\n\n    /**\n     * Test whether two param lists represent conflicting signatures\n     * @param {Param[]} params1\n     * @param {Param[]} params2\n     * @return {boolean} Returns true when the signatures conflict, false otherwise.\n     */\n    function conflicting(params1, params2) {\n      const ii = Math.max(params1.length, params2.length);\n\n      for (var i = 0; i < ii; i++) {\n        const typeSet1 = getTypeSetAtIndex(params1, i);\n        const typeSet2 = getTypeSetAtIndex(params2, i);\n        let overlap = false;\n        let name;\n        for (name of typeSet2) {\n          if (typeSet1.has(name)) {\n            overlap = true;\n            break;\n          }\n        }\n        if (!overlap) {\n          return false;\n        }\n      }\n\n      const len1 = params1.length;\n      const len2 = params2.length;\n      const restParam1 = hasRestParam(params1);\n      const restParam2 = hasRestParam(params2);\n\n      return restParam1\n          ? restParam2 ? (len1 === len2) : (len2 >= len1)\n          : restParam2 ? (len1 >= len2)  : (len1 === len2)\n    }\n\n    /**\n     * Helper function for `resolveReferences` that returns a copy of\n     * functionList wihe any prior resolutions cleared out, in case we are\n     * recycling signatures from a prior typed function construction.\n     *\n     * @param {Array.<function|typed-reference>} functionList\n     * @return {Array.<function|typed-reference>}\n     */\n    function clearResolutions(functionList) {\n      return functionList.map(fn => {\n        if (isReferToSelf(fn)) {\n          return referToSelf(fn.referToSelf.callback);\n        }\n        if (isReferTo(fn)) {\n          return makeReferTo(fn.referTo.references, fn.referTo.callback);\n        }\n        return fn;\n      });\n    }\n\n    /**\n     * Take a list of references, a list of functions functionList, and a\n     * signatureMap indexing signatures into functionList, and return\n     * the list of resolutions, or a false-y value if they don't all\n     * resolve in a valid way (yet).\n     *\n     * @param {string[]} references\n     * @param {Array<function|typed-reference} functionList\n     * @param {Object.<string, integer>} signatureMap\n     * @return {function[] | false} resolutions\n     */\n    function collectResolutions(references, functionList, signatureMap) {\n      const resolvedReferences = []\n      let reference;\n      for (reference of references) {\n        let resolution = signatureMap[reference];\n        if (typeof resolution !== 'number') {\n          throw new TypeError(\n            'No definition for referenced signature \"' + reference + '\"');\n        }\n        resolution = functionList[resolution];\n        if (typeof resolution !== 'function') {\n          return false;\n        }\n        resolvedReferences.push(resolution);\n      }\n      return resolvedReferences;\n    }\n\n    /**\n     * Resolve any references in the functionList for the typed function\n     * itself. The signatureMap tells which index in the functionList a\n     * given signature should be mapped to (for use in resolving typed.referTo)\n     * and self provides the destions of a typed.referToSelf.\n     *\n     * @param {Array<function | typed-reference-object>} functionList\n     * @param {Object.<string, function>} signatureMap\n     * @param {function} self  The typed-function itself\n     * @return {Array<function>} The list of resolved functions\n     */\n    function resolveReferences(functionList, signatureMap, self) {\n      let resolvedFunctions = clearResolutions(functionList);\n      let leftUnresolved = true;\n      while (leftUnresolved) {\n        leftUnresolved = false;\n        let nothingResolved = true;\n        for (var i = 0; i < resolvedFunctions.length; ++i) {\n          const fn = resolvedFunctions[i]\n\n          if (isReferToSelf(fn)) {\n            resolvedFunctions[i] = fn.referToSelf.callback(self);\n            // Preserve reference in case signature is reused someday:\n            resolvedFunctions[i].referToSelf = fn.referToSelf;\n            nothingResolved = false\n          } else if (isReferTo(fn)) {\n            const resolvedReferences = collectResolutions(\n              fn.referTo.references, resolvedFunctions, signatureMap);\n            if (resolvedReferences) {\n              resolvedFunctions[i] =\n                fn.referTo.callback.apply(this, resolvedReferences);\n              // Preserve reference in case signature is reused someday:\n              resolvedFunctions[i].referTo = fn.referTo;\n              nothingResolved = false;\n            } else {\n              leftUnresolved = true;\n            }\n          }\n        }\n\n        if (nothingResolved && leftUnresolved) {\n          throw new SyntaxError(\n            'Circular reference detected in resolving typed.referTo');\n        }\n      }\n\n      return resolvedFunctions;\n    }\n\n    /**\n     * Validate whether any of the function bodies contains a self-reference\n     * usage like `this(...)` or `this.signatures`. This self-referencing is\n     * deprecated since typed-function v3. It has been replaced with\n     * the functions typed.referTo and typed.referToSelf.\n     * @param {Object.<string, function>} signaturesMap\n     */\n    function validateDeprecatedThis(signaturesMap) {\n      // TODO: remove this deprecation warning logic some day (it's introduced in v3)\n\n      // match occurrences like 'this(' and 'this.signatures'\n      var deprecatedThisRegex = /\\bthis(\\(|\\.signatures\\b)/;\n\n      Object.keys(signaturesMap).forEach(signature => {\n        var fn = signaturesMap[signature];\n\n        if (deprecatedThisRegex.test(fn.toString())) {\n          throw new SyntaxError('Using `this` to self-reference a function ' +\n            'is deprecated since typed-function@3. ' +\n            'Use typed.referTo and typed.referToSelf instead.');\n        }\n      });\n    }\n\n    /**\n     * Create a typed function\n     * @param {String} name               The name for the typed function\n     * @param {Object.<string, function>} signaturesMap\n     *                                    An object with one or\n     *                                    multiple signatures as key, and the\n     *                                    function corresponding to the\n     *                                    signature as value.\n     * @return {function}  Returns the created typed function.\n     */\n    function createTypedFunction(name, rawSignaturesMap) {\n      typed.createCount++\n\n      if (Object.keys(rawSignaturesMap).length === 0) {\n        throw new SyntaxError('No signatures provided');\n      }\n\n      if (typed.warnAgainstDeprecatedThis) {\n        validateDeprecatedThis(rawSignaturesMap);\n      }\n\n      // Main processing loop for signatures\n      const parsedParams = [];\n      const originalFunctions = [];\n      const signaturesMap = {};\n      const preliminarySignatures = [] // may have duplicates from conversions\n      let signature;\n      for (signature in rawSignaturesMap) {\n        // A) Protect against polluted Object prototype:\n        if (!Object.prototype.hasOwnProperty.call(rawSignaturesMap, signature)) {\n          continue;\n        }\n        // B) Parse the signature\n        const params = parseSignature(signature);\n        if (!params) continue;\n        // C) Check for conflicts\n        parsedParams.forEach(function (pp) {\n          if (conflicting(pp, params)) {\n            throw new TypeError('Conflicting signatures \"' +\n              stringifyParams(pp) + '\" and \"' +\n              stringifyParams(params) + '\".');\n          }\n        })\n        parsedParams.push(params)\n        // D) Store the provided function and add conversions\n        const functionIndex = originalFunctions.length;\n        originalFunctions.push(rawSignaturesMap[signature])\n        const conversionParams = params.map(expandParam)\n        // E) Split the signatures and collect them up\n        let sp;\n        for (sp of splitParams(conversionParams)) {\n          const spName = stringifyParams(sp);\n          preliminarySignatures.push(\n            {params: sp, name: spName, fn: functionIndex});\n          if (sp.every(p => !p.hasConversion)) {\n            signaturesMap[spName] = functionIndex;\n          }\n        }\n      }\n\n      preliminarySignatures.sort(compareSignatures);\n\n      // Note the forward reference to the_typed_fn\n      const resolvedFunctions =\n        resolveReferences(originalFunctions, signaturesMap, the_typed_fn);\n\n      // Fill in the proper function for each signature\n      let s;\n      for (s in signaturesMap) {\n        if (Object.prototype.hasOwnProperty.call(signaturesMap, s)) {\n          signaturesMap[s] = resolvedFunctions[signaturesMap[s]]\n        }\n      }\n      const signatures = []\n      const internalSignatureMap = new Map() // benchmarks faster than object\n      for (s of preliminarySignatures) {\n        // Note it's only safe to eliminate duplicates like this\n        // _after_ the signature sorting step above; otherwise we might\n        // remove the wrong one.\n        if (!internalSignatureMap.has(s.name)) {\n          s.fn = resolvedFunctions[s.fn]\n          signatures.push(s)\n          internalSignatureMap.set(s.name, s)\n        }\n      }\n\n      // we create a highly optimized checks for the first couple of signatures with max 2 arguments\n      const ok0 = signatures[0] && signatures[0].params.length <= 2 && !hasRestParam(signatures[0].params);\n      const ok1 = signatures[1] && signatures[1].params.length <= 2 && !hasRestParam(signatures[1].params);\n      const ok2 = signatures[2] && signatures[2].params.length <= 2 && !hasRestParam(signatures[2].params);\n      const ok3 = signatures[3] && signatures[3].params.length <= 2 && !hasRestParam(signatures[3].params);\n      const ok4 = signatures[4] && signatures[4].params.length <= 2 && !hasRestParam(signatures[4].params);\n      const ok5 = signatures[5] && signatures[5].params.length <= 2 && !hasRestParam(signatures[5].params);\n      const allOk = ok0 && ok1 && ok2 && ok3 && ok4 && ok5;\n\n      // compile the tests\n      for (var i = 0; i < signatures.length; ++i) {\n        signatures[i].test = compileTests(signatures[i].params);\n      }\n\n      const test00 = ok0 ? compileTest(signatures[0].params[0]) : notOk;\n      const test10 = ok1 ? compileTest(signatures[1].params[0]) : notOk;\n      const test20 = ok2 ? compileTest(signatures[2].params[0]) : notOk;\n      const test30 = ok3 ? compileTest(signatures[3].params[0]) : notOk;\n      const test40 = ok4 ? compileTest(signatures[4].params[0]) : notOk;\n      const test50 = ok5 ? compileTest(signatures[5].params[0]) : notOk;\n\n      const test01 = ok0 ? compileTest(signatures[0].params[1]) : notOk;\n      const test11 = ok1 ? compileTest(signatures[1].params[1]) : notOk;\n      const test21 = ok2 ? compileTest(signatures[2].params[1]) : notOk;\n      const test31 = ok3 ? compileTest(signatures[3].params[1]) : notOk;\n      const test41 = ok4 ? compileTest(signatures[4].params[1]) : notOk;\n      const test51 = ok5 ? compileTest(signatures[5].params[1]) : notOk;\n\n      // compile the functions\n      for (var i = 0; i < signatures.length; ++i) {\n        signatures[i].implementation =\n          compileArgsPreprocessing(signatures[i].params, signatures[i].fn);\n      }\n\n      const fn0 = ok0 ? signatures[0].implementation : undef;\n      const fn1 = ok1 ? signatures[1].implementation : undef;\n      const fn2 = ok2 ? signatures[2].implementation : undef;\n      const fn3 = ok3 ? signatures[3].implementation : undef;\n      const fn4 = ok4 ? signatures[4].implementation : undef;\n      const fn5 = ok5 ? signatures[5].implementation : undef;\n\n      const len0 = ok0 ? signatures[0].params.length : -1;\n      const len1 = ok1 ? signatures[1].params.length : -1;\n      const len2 = ok2 ? signatures[2].params.length : -1;\n      const len3 = ok3 ? signatures[3].params.length : -1;\n      const len4 = ok4 ? signatures[4].params.length : -1;\n      const len5 = ok5 ? signatures[5].params.length : -1;\n\n      // simple and generic, but also slow\n      const iStart = allOk ? 6 : 0;\n      const iEnd = signatures.length;\n      // de-reference ahead for execution speed:\n      const tests = signatures.map(s => s.test)\n      const fns = signatures.map(s => s.implementation)\n      const generic = function generic() {\n        'use strict';\n\n        for (var i = iStart; i < iEnd; i++) {\n          if (tests[i](arguments)) {\n            return fns[i].apply(this, arguments);\n          }\n        }\n\n        return typed.onMismatch(name, arguments, signatures);\n      }\n\n      // create the typed function\n      // fast, specialized version. Falls back to the slower, generic one if needed\n      function the_typed_fn (arg0, arg1) {\n        'use strict';\n\n        if (arguments.length === len0 && test00(arg0) && test01(arg1)) { return fn0.apply(this, arguments); }\n        if (arguments.length === len1 && test10(arg0) && test11(arg1)) { return fn1.apply(this, arguments); }\n        if (arguments.length === len2 && test20(arg0) && test21(arg1)) { return fn2.apply(this, arguments); }\n        if (arguments.length === len3 && test30(arg0) && test31(arg1)) { return fn3.apply(this, arguments); }\n        if (arguments.length === len4 && test40(arg0) && test41(arg1)) { return fn4.apply(this, arguments); }\n        if (arguments.length === len5 && test50(arg0) && test51(arg1)) { return fn5.apply(this, arguments); }\n\n        return generic.apply(this, arguments);\n      }\n\n      // attach name the typed function\n      try {\n        Object.defineProperty(the_typed_fn, 'name', {value: name});\n      }\n      catch (err) {\n        // old browsers do not support Object.defineProperty and some don't support setting the name property\n        // the function name is not essential for the functioning, it's mostly useful for debugging,\n        // so it's fine to have unnamed functions.\n      }\n\n      // attach signatures to the function.\n      // This property is close to the original collection of signatures\n      // used to create the typed-function, just with unions split:\n      the_typed_fn.signatures = signaturesMap;\n\n      // Store internal data for functions like resolve, find, etc.\n      // Also serves as the flag that this is a typed-function\n      the_typed_fn._typedFunctionData = {\n        signatures: signatures,\n        signatureMap: internalSignatureMap\n      };\n\n      return the_typed_fn;\n    }\n\n    /**\n     * Action to take on mismatch\n     * @param {string} name      Name of function that was attempted to be called\n     * @param {Array} args       Actual arguments to the call\n     * @param {Array} signatures Known signatures of the named typed-function\n     */\n    function _onMismatch(name, args, signatures) {\n      throw createError(name, args, signatures);\n    }\n\n    /**\n     * Return all but the last items of an array or function Arguments\n     * @param {Array | Arguments} arr\n     * @return {Array}\n     */\n    function initial(arr) {\n      return slice(arr, 0, arr.length - 1);\n    }\n\n    /**\n     * return the last item of an array or function Arguments\n     * @param {Array | Arguments} arr\n     * @return {*}\n     */\n    function last(arr) {\n      return arr[arr.length - 1];\n    }\n\n    /**\n     * Slice an array or function Arguments\n     * @param {Array | Arguments | IArguments} arr\n     * @param {number} start\n     * @param {number} [end]\n     * @return {Array}\n     */\n    function slice(arr, start, end) {\n      return Array.prototype.slice.call(arr, start, end);\n    }\n\n    /**\n     * Return the first item from an array for which test(arr[i]) returns true\n     * @param {Array} arr\n     * @param {function} test\n     * @return {* | undefined} Returns the first matching item\n     *                         or undefined when there is no match\n     */\n    function findInArray(arr, test) {\n      for (var i = 0; i < arr.length; i++) {\n        if (test(arr[i])) {\n          return arr[i];\n        }\n      }\n      return undefined;\n    }\n\n    /**\n     * Flat map the result invoking a callback for every item in an array.\n     * https://gist.github.com/samgiles/762ee337dff48623e729\n     * @param {Array} arr\n     * @param {function} callback\n     * @return {Array}\n     */\n    function flatMap(arr, callback) {\n      return Array.prototype.concat.apply([], arr.map(callback));\n    }\n\n    /**\n     * Create a reference callback to one or multiple signatures\n     *\n     * Syntax:\n     *\n     *     typed.referTo(signature1, signature2, ..., function callback(fn1, fn2, ...) {\n     *       // ...\n     *     })\n     *\n     * @returns {{referTo: {references: string[], callback}}}\n     */\n    function referTo() {\n      let references =\n        initial(arguments).map(s => stringifyParams(parseSignature(s)));\n      const callback = last(arguments);\n\n      if (typeof callback !== 'function') {\n        throw new TypeError('Callback function expected as last argument');\n      }\n\n      return makeReferTo(references, callback)\n    }\n\n    function makeReferTo(references, callback) {\n      return { referTo: { references: references, callback: callback } }\n    }\n\n    /**\n     * Create a reference callback to the typed-function itself\n     *\n     * @param {(self: function) => function} callback\n     * @returns {{referToSelf: { callback: function }}}\n     */\n    function referToSelf(callback) {\n      if (typeof callback !== 'function') {\n        throw new TypeError('Callback function expected as first argument');\n      }\n\n      return { referToSelf: { callback: callback } };\n    }\n\n    /**\n     * Test whether something is a referTo object, holding a list with reference\n     * signatures and a callback.\n     *\n     * @param {Object | function} objectOrFn\n     * @returns {boolean}\n     */\n    function isReferTo(objectOrFn) {\n      return objectOrFn &&\n        typeof objectOrFn.referTo === 'object' &&\n        Array.isArray(objectOrFn.referTo.references) &&\n        typeof objectOrFn.referTo.callback === 'function';\n    }\n\n    /**\n     * Test whether something is a referToSelf object, holding a callback where\n     * to pass `self`.\n     *\n     * @param {Object | function} objectOrFn\n     * @returns {boolean}\n     */\n    function isReferToSelf(objectOrFn) {\n      return objectOrFn &&\n        typeof objectOrFn.referToSelf === 'object' &&\n        typeof objectOrFn.referToSelf.callback === 'function';\n    }\n\n    /**\n     * Check if name is (A) new, (B) a match, or (C) a mismatch; and throw\n     * an error in case (C).\n     *\n     * @param { string | undefined } nameSoFar\n     * @param { string | undefined } newName\n     * @returns { string } updated name\n     */\n    function checkName (nameSoFar, newName) {\n      if (!nameSoFar) {\n        return newName;\n      }\n      if (newName && newName != nameSoFar) {\n        const err = new Error('Function names do not match (expected: ' +\n          nameSoFar + ', actual: ' + newName + ')');\n        err.data = { actual: newName, expected: nameSoFar };\n        throw err;\n      }\n      return nameSoFar;\n    }\n\n    /**\n     * Retrieve the implied name from an object with signature keys\n     * and function values, checking whether all value names match\n     *\n     * @param { {string: function} } obj\n     */\n    function getObjectName (obj) {\n      let name\n      for (let key in obj) {\n        // Only pay attention to own properties, and only if their values\n        // are typed functions or functions with a signature property\n        if (obj.hasOwnProperty(key) &&\n            (isTypedFunction(obj[key]) ||\n             typeof obj[key].signature === 'string')) {\n          name = checkName(name, obj[key].name)\n        }\n      }\n      return name\n    }\n\n    /**\n     * Copy all of the signatures from the second argument into the first,\n     * which is modified by side effect, checking for conflicts\n     *\n     * @param {Object.<string, function|typed-reference} destination\n     * @param {Object.<string, function|typed-reference} source\n     */\n    function mergeSignatures (dest, source) {\n      let key;\n      for (key in source) {\n        if (source.hasOwnProperty(key)) {\n          if (key in dest) {\n            if (source[key] !== dest[key]) {\n              const err = new Error('Signature \"' + key + '\" is defined twice')\n              err.data = {\n                signature: key,\n                sourceFunction: source[key],\n                destFunction: dest[key]\n              }\n              throw err\n            }\n            // else: both signatures point to the same function, that's fine\n          }\n          dest[key] = source[key]\n        }\n      }\n    }\n\n    const saveTyped = typed\n    /**\n     * Originally the main function was a typed function itself, but then\n     * it might not be able to generate error messages if the client\n     * replaced the type system with different names.\n     *\n     * Main entry: typed([name], functions/objects with signatures...)\n     *\n     * Assembles and returns a new typed-function from the given items\n     * that provide signatures and implementations, each of which may be\n     * * a plain object mapping (string) signatures to implementing functions,\n     * * a previously constructed typed function, or\n     * * any other single function with a string-valued property `signature`.\n\n     * The name of the resulting typed-function will be given by the\n     * string-valued name argument if present, or if not, by the name\n     * of any of the arguments that have one, as long as any that do are\n     * consistent with each other. If no name is specified, the name will be\n     * an empty string.\n     *\n     * @param {string} name [optional]\n     * @param {(function|object)[]} signature providers\n     * @returns {typed-function}\n     */\n    typed = function(maybeName) {\n      const named = typeof maybeName === 'string'\n      const start = named ? 1 : 0\n      let name = named ? maybeName : ''\n      const allSignatures = {}\n      for (let i = start; i < arguments.length; ++i) {\n        const item = arguments[i]\n        let theseSignatures = {}\n        let thisName\n        if (typeof item === 'function') {\n          thisName = item.name\n          if (typeof item.signature === 'string') {\n            // Case 1: Ordinary function with a string 'signature' property\n            theseSignatures[item.signature] = item\n          } else if (isTypedFunction(item)) {\n            // Case 2: Existing typed function\n            theseSignatures = item.signatures\n          }\n        } else if (isPlainObject(item)) {\n          // Case 3: Plain object, assume keys = signatures, values = functions\n          theseSignatures = item\n          if (!named) {\n            thisName = getObjectName(item)\n          }\n        }\n\n        if (Object.keys(theseSignatures).length === 0) {\n          const err = new TypeError(\n            'Argument to \\'typed\\' at index ' + i + ' is not a (typed) function, ' +\n            'nor an object with signatures as keys and functions as values.')\n          err.data = { index: i, argument: item }\n          throw err\n        }\n\n        if (!named) {\n          name = checkName(name, thisName)\n        }\n        mergeSignatures(allSignatures, theseSignatures)\n      }\n\n      return createTypedFunction(name || '', allSignatures)\n    }\n\n    typed.create = create;\n    typed.createCount = saveTyped.createCount;\n    typed.onMismatch = _onMismatch;\n    typed.throwMismatchError = _onMismatch;\n    typed.createError = createError;\n    typed.clear = clear;\n    typed.clearConversions = clearConversions;\n    typed.addTypes = addTypes;\n    typed._findType = findType; // For unit testing only\n    typed.referTo = referTo;\n    typed.referToSelf = referToSelf;\n    typed.convert = convert;\n    typed.findSignature = findSignature;\n    typed.find = find;\n    typed.isTypedFunction = isTypedFunction;\n    typed.warnAgainstDeprecatedThis = true;\n\n    /**\n     * add a type (convenience wrapper for typed.addTypes)\n     * @param {{name: string, test: function}} type\n     * @param {boolean} [beforeObjectTest=true]\n     *                          If true, the new test will be inserted before\n     *                          the test with name 'Object' (if any), since\n     *                          tests for Object match Array and classes too.\n     */\n    typed.addType = function (type, beforeObjectTest) {\n      let before = 'any';\n      if (beforeObjectTest !== false) {\n        before = 'Object';\n      }\n      typed.addTypes([type], before);\n    };\n\n    /**\n     * Verify that the ConversionDef conversion has a valid format.\n     *\n     * @param {conversionDef} conversion\n     * @return {void}\n     * @throws {TypeError|SyntaxError}\n     */\n    function _validateConversion (conversion) {\n      if (!conversion\n          || typeof conversion.from !== 'string'\n          || typeof conversion.to !== 'string'\n          || typeof conversion.convert !== 'function') {\n        throw new TypeError('Object with properties {from: string, to: string, convert: function} expected');\n      }\n      if (conversion.to === conversion.from) {\n        throw new SyntaxError(\n          'Illegal to define conversion from \"' + conversion.from +\n          '\" to itself.');\n      }\n    }\n\n    /**\n     * Add a conversion\n     *\n     * @param {ConversionDef} conversion\n     * @returns {void}\n     * @throws {TypeError}\n     */\n    typed.addConversion = function (conversion) {\n      _validateConversion(conversion)\n\n      const to = findType(conversion.to)\n      if (to.conversionsTo.every(function (other) {\n        return other.from !== conversion.from\n      })) {\n        to.conversionsTo.push({\n          from: conversion.from,\n          convert: conversion.convert,\n          index: nConversions++\n        })\n      } else {\n        throw new Error(\n          'There is already a conversion from \"' + conversion.from + '\" to \"' +\n          to.name + '\"');\n      }\n    };\n\n    /**\n     * Convenience wrapper to call addConversion on each conversion in a list.\n     *\n     @param {ConversionDef[]} conversions\n     @returns {void}\n     @throws {TypeError}\n     */\n    typed.addConversions = function (conversions) {\n      conversions.forEach(typed.addConversion);\n    }\n\n    /**\n     * Remove the specified conversion. The format is the same as for\n     * addConversion, and the convert function must match or an error\n     * is thrown.\n     *\n     * @param {{from: string, to: string, convert: function}} conversion\n     * @returns {void}\n     * @throws {TypeError|SyntaxError|Error}\n     */\n    typed.removeConversion = function (conversion) {\n      _validateConversion(conversion);\n      const to = findType(conversion.to);\n      const existingConversion =\n        findInArray(to.conversionsTo, c => (c.from === conversion.from))\n      if (!existingConversion) {\n        throw new Error(\n          'Attempt to remove nonexistent conversion from ' + conversion.from +\n          ' to ' + conversion.to);\n      }\n      if (existingConversion.convert !== conversion.convert) {\n        throw new Error(\n          'Conversion to remove does not match existing conversion');\n      }\n      const index = to.conversionsTo.indexOf(existingConversion);\n      to.conversionsTo.splice(index, 1);\n    }\n\n    /**\n     * Produce the specific signature that a typed function\n     * will execute on the given arguments. Here, a \"signature\" is an\n     * object with properties 'params', 'test', 'fn', and 'implementation'.\n     * This last property is a function that converts params as necessary\n     * and then calls 'fn'. Returns null if there is no matching signature.\n     * @param {typed-function} tf\n     * @param {any[]} argList\n     * @returns {{params: string, test: function, fn: function, implementation: function}}\n     */\n    typed.resolve = function (tf, argList) {\n      if (!isTypedFunction(tf)) {\n        throw new TypeError(NOT_TYPED_FUNCTION);\n      }\n      const sigs = tf._typedFunctionData.signatures;\n      for (var i = 0; i < sigs.length; ++i) {\n        if (sigs[i].test(argList)) {\n          return sigs[i];\n        }\n      }\n      return null;\n    }\n\n    return typed;\n  }\n\n  return create();\n}));\n"],"mappings":"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"},"metadata":{},"sourceType":"script"}